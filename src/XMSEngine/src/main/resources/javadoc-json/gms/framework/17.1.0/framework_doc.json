{
  "com.google.android.gms.common.api.Scope": {
    "classDes": "Describes an OAuth 2.0 scope to request. This has security implications for the user, and requesting additional scopes will result in authorization dialogs.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Scope",
    "methods": {
      "com.google.android.gms.common.api.Scope.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Scope#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String: a string about this Scope",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Scope.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Scope#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "o": "the other object"
        },
        "returns": "boolean: true if the two objects is same",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Scope.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Scope#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int: hash code value",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Scope.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Scope#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "",
          "flags": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Scope.Scope(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Scope#Scope(java.lang.String)",
        "methodDes": "Creates a new scope with the given URI.",
        "params": {
          "scopeUri": "a given URI"
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.api.Scope.CREATOR": {
        "des": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Scope#CREATOR",
        "value": ""
      }
    }
  },
  "com.google.android.gms.common.data.AbstractDataBuffer<T>": {
    "classDes": "Default implementation of DataBuffer. An AbstractDataBuffer wraps data provided across the binder from Google Play services.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/AbstractDataBuffer",
    "methods": {
      "com.google.android.gms.common.data.AbstractDataBuffer.getCount()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#getCount()",
        "methodDes": "",
        "params": {},
        "returns": "int:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.AbstractDataBuffer.close()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#close()",
        "methodDes": "Releases the data buffer, for use in try-with-resources. Both close and release shall have identical semantics, and are idempotent.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.AbstractDataBuffer.iterator()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#iterator()",
        "methodDes": "",
        "params": {},
        "returns": "java.util.Iterator<T>:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.AbstractDataBuffer.release()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Releasable#release()",
        "methodDes": "Releases resources used by the buffer. This method is idempotent.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.AbstractDataBuffer.singleRefIterator()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#singleRefIterator()",
        "methodDes": "In order to use this you should correctly override setDataRow(int) in your DataBufferRef implementation. Be careful: there will be single DataBufferRef while iterating. If you are not sure - DO NOT USE this iterator.",
        "params": {},
        "returns": "java.util.Iterator<T>:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.AbstractDataBuffer.isClosed()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#isClosed()",
        "methodDes": "This method is deprecated. release() and close() are idempotent, and so is safe to call multiple times.",
        "params": {},
        "returns": "boolean:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.AbstractDataBuffer.get(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#get(int)",
        "methodDes": "Get the item at the specified position. Note that the objects returned from subsequent invocations of this method for the same position may not be identical objects, but will be equal in value. In other words: buffer.get(i) == buffer.get(i) may return false. buffer.get(i).equals(buffer.get(i)) will return true.",
        "params": {
          "position": "The position of the item to retrieve"
        },
        "returns": "T: the item at position in this buffer",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.GoogleApiClient.Builder": {
    "classDes": "Builder to configure a GoogleApiClient.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder",
    "methods": {
      "com.google.android.gms.common.api.GoogleApiClient.Builder.setGravityForPopups(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#setGravityForPopups(int)",
        "methodDes": "Specifies the part of the screen at which games service popups (for example, welcome back or achievement unlocked popups) will be displayed using gravity. Default value is TOP|CENTER_HORIZONTAL.",
        "params": {
          "gravityForPopups": "The gravity which controls the placement of games service popups"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.addApiIfAvailable(com.google.android.gms.common.api.Api<O>,O,com.google.android.gms.common.api.Scope...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#addApiIfAvailable(com.google.android.gms.common.api.Api<O>, O, com.google.android.gms.common.api.Scope...)",
        "methodDes": "Specify which Apis should attempt to connect, but are not strictly required for your app. The GoogleApiClient will try to connect to these Apis, but will not necessarily fail if there are only errors when connecting to an unavailable Api added with this method. See Api for more information.",
        "params": {
          "api": "The Api requested by your app",
          "options": "",
          "scopes": "Scopes required by this API"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.addScope(com.google.android.gms.common.api.Scope)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#addScope(com.google.android.gms.common.api.Scope)",
        "methodDes": "Specify the OAuth 2.0 scopes requested by your app. See Scopes for more information. It is an error to call this method when using GOOGLE_SIGN_IN_API. Use requestScopes(Scope, Scope...) instead.",
        "params": {
          "scope": "The OAuth 2.0 scopes requested by your app"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.Builder(android.content.Context,com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks,com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#public-googleapiclient.builder-context-context,-googleapiclient.connectioncallbacks-connectedlistener,-googleapiclient.onconnectionfailedlistener-connectionfailedlistener",
        "methodDes": "Builder to help construct the GoogleApiClient object.",
        "params": {
          "context": "The context to use for the connection",
          "connectedListener": "The listener where the results of the asynchronous connect() call are delivered",
          "connectionFailedListener": "The listener which will be notified if the connection attempt fails"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.Builder(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#public-googleapiclient.builder-context-context",
        "methodDes": "Builder to help construct the GoogleApiClient object.",
        "params": {
          "context": "The context to use for the connection"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.enableAutoManage(androidx.fragment.app.FragmentActivity,int,com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#enableAutoManage(androidx.fragment.app.FragmentActivity, int, com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)",
        "methodDes": "Enables automatic lifecycle management in a support library FragmentActivity that connects the client in onStart() and disconnects it in onStop(). It handles user recoverable errors appropriately and calls if the ConnectionResult has no resolution. This eliminates most of the boiler plate associated with using GoogleApiClient. When using this option, build() must be called from the main thread.",
        "params": {
          "fragmentActivity": "The activity that uses the GoogleApiClient. For lifecycle management to work correctly the activity must call its parent's onActivityResult(int, int, android.content.Intent)",
          "clientId": "A non-negative identifier for this client. At any given time, only one auto-managed client is allowed per id. To reuse an id you must first call stopAutoManage(FragmentActivity) on the previous client",
          "unresolvedConnectionFailedListener": "Called if the connection failed and there was no resolution or the user chose not to complete the provided resolution. If this listener is called, the client will no longer be auto-managed, and a new instance must be built. In the event that the user chooses not to complete a resolution, the ConnectionResult will have a status code of CANCELED"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {
          "java.lang.NullPointerException": "if fragmentActivity is null",
          "java.lang.IllegalArgumentException": "if clientId is negative",
          "java.lang.IllegalStateException": "if clientId is already being auto-managed"
        }
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.setViewForPopups(android.view.View)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#setViewForPopups(android.view.View)",
        "methodDes": "Sets the View to use as a content view for popups.",
        "params": {
          "viewForPopups": "The view to use as a content view for popups. View cannot be null"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.setAccountName(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#setAccountName(java.lang.String)",
        "methodDes": "Specify an account name on the device that should be used. If this is never called, the client will use the current default account for Google Play services for this application. It is an error to call this method when using GOOGLE_SIGN_IN_API. Use #setAccountName(String) instead.",
        "params": {
          "accountName": "The account name on the device that should be used by GoogleApiClient"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.useDefaultAccount()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#useDefaultAccount()",
        "methodDes": "Specify that the default account should be used when connecting to services.",
        "params": {},
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.addApiIfAvailable(com.google.android.gms.common.api.Api<? extends com.google.android.gms.common.api.Api.ApiOptions.NotRequiredOptions>,com.google.android.gms.common.api.Scope[])": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#addApiIfAvailable(com.google.android.gms.common.api.Api<? extends com.google.android.gms.common.api.Api.ApiOptions.NotRequiredOptions>, com.google.android.gms.common.api.Scope...)",
        "methodDes": "Specify which Apis should attempt to connect, but are not strictly required for your app. The GoogleApiClient will try to connect to these Apis, but will not necessarily fail if there are only errors when connecting to an unavailable Api added with this method. See Api for more information.",
        "params": {
          "api": "The Api requested by your app",
          "scopes": "Scopes required by this API"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.addConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#addConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)",
        "methodDes": "Registers a listener to receive connection events from this GoogleApiClient. Applications should balance calls to this method with calls to unregisterConnectionCallbacks(ConnectionCallbacks) to avoid leaking resources. If the specified listener is already registered to receive connection events, this method will not add a duplicate entry for the same listener. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.",
        "params": {
          "listener": "the listener where the results of the asynchronous connect() call are delivered"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.setHandler(android.os.Handler)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#setHandler(android.os.Handler)",
        "methodDes": "Sets a Handler to indicate which thread to use when invoking callbacks. Will not be used directly to handle callbacks. If this is not called then the application's main thread will be used.",
        "params": {
          "handler": "a Handler instance"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.addApi(com.google.android.gms.common.api.Api<O>,O)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#addApi(com.google.android.gms.common.api.Api<O>, O)",
        "methodDes": "Specify which Apis are requested by your app. See Api for more information.",
        "params": {
          "api": "The Api requested by your app",
          "options": "Any additional parameters required for the specific AP"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.addApi(com.google.android.gms.common.api.Api<? extends com.google.android.gms.common.api.Api.ApiOptions.NotRequiredOptions>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#addApi(com.google.android.gms.common.api.Api<? extends com.google.android.gms.common.api.Api.ApiOptions.NotRequiredOptions>)",
        "methodDes": "Specify which Apis are requested by your app. See Api for more information.",
        "params": {
          "api": "The Api requested by your app"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.addOnConnectionFailedListener(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#addOnConnectionFailedListener(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)",
        "methodDes": "Adds a listener to register to receive connection failed events from this GoogleApiClient. Applications should balance calls to this method with calls to unregisterConnectionFailedListener(OnConnectionFailedListener) to avoid leaking resources. If the specified listener is already registered to receive connection failed events, this method will not add a duplicate entry for the same listener. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.",
        "params": {
          "listener": "the listener where the results of the asynchronous connect() call are delivered"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.build()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#build()",
        "methodDes": "Builds a new GoogleApiClient object for communicating with the Google APIs.",
        "params": {},
        "returns": "com.google.android.gms.common.api.GoogleApiClient:The GoogleApiClient object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.Builder.enableAutoManage(androidx.fragment.app.FragmentActivity,com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.Builder#enableAutoManage(androidx.fragment.app.FragmentActivity, com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)",
        "methodDes": "Enables automatic lifecycle management in a support library FragmentActivity that connects the client in onStart() and disconnects it in onStop(). It handles user recoverable errors appropriately and calls OnConnectionFailedListener#onConnectionFailed on the unresolvedConnectionFailedListener if the ConnectionResult has no resolution. This eliminates most of the boiler plate associated with using GoogleApiClient. This method can only be used if this GoogleApiClient will be the only auto-managed client in the containing activity. The api client will be assigned a default client id. When using this option, build() must be called from the main thread.",
        "params": {
          "fragmentActivity": "The activity that uses the GoogleApiClient. For lifecycle management to work correctly the activity must call its parent's onActivityResult(int, int, android.content.Intent)",
          "unresolvedConnectionFailedListener": "Called if the connection failed and there was no resolution or the user chose not to complete the provided resolution. If this listener is called, the client will no longer be auto-managed, and a new instance must be built. In the event that the user chooses not to complete a resolution, the ConnectionResult will have a status code of CANCELED"
        },
        "returns": "com.google.android.gms.common.api.GoogleApiClient.Builder: the Builder instance",
        "Exceptions": {
          "java.lang.NullPointerException": "if fragmentActivity is null",
          "java.lang.IllegalStateException": "if another GoogleApiClient is already being auto-managed with the default clientId"
        }
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.PendingResults": {
    "classDes": "Provides factory methods for PendingResult instances, primarily for use in tests.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResults",
    "methods": {
      "com.google.android.gms.common.api.PendingResults.immediatePendingResult(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResults#immediatePendingResult(com.google.android.gms.common.api.Status)",
        "methodDes": "Returns a PendingResult with the specified Status. If setResultCallback(ResultCallback ) is called on the returned PendingResult then onResult(R) will immediately be called on the main thread. If await() is called it will immediate return result.",
        "params": {
          "result": "the specified Status"
        },
        "returns": "com.google.android.gms.common.api.PendingResult<com.google.android.gms.common.api.Status>: a PendingResult that has been canceled",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResults.canceledPendingResult()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResults#canceledPendingResult()",
        "methodDes": "Returns a PendingResult that has been canceled.",
        "params": {},
        "returns": "com.google.android.gms.common.api.PendingResult<com.google.android.gms.common.api.Status>: a PendingResult that has been canceled",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResults.canceledPendingResult(R)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResults#canceledPendingResult(R)",
        "methodDes": "Returns a PendingResult that has been canceled.",
        "params": {
          "result": "The canceled result. Must have a status code of CANCELED"
        },
        "returns": "com.google.android.gms.common.api.PendingResult<R>: a PendingResult that has been canceled",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.images.WebImage": {
    "classDes": "A class that represents an image that is located on a web server.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage",
    "methods": {
      "com.google.android.gms.common.images.WebImage.getUrl()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#getUrl()",
        "methodDes": "Gets the image URL.",
        "params": {},
        "returns": "android.net.Uri: tge URL of image",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.WebImage.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int: a hash code value for this object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.WebImage.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "out": "",
          "flags": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.WebImage.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "o": "the reference object with which to compare"
        },
        "returns": "boolean: true if this object is the same as the obj argument; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.WebImage.getWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#getWidth()",
        "methodDes": "Gets the image width, in pixels.",
        "params": {},
        "returns": "int: the width of image",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.WebImage.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#toString()",
        "methodDes": "Returns a string representation of this object.",
        "params": {},
        "returns": "java.lang.String: a string representation of the object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.WebImage.getHeight()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#getHeight()",
        "methodDes": "Gets the image height, in pixels.",
        "params": {},
        "returns": "int: the height of image",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.WebImage.WebImage(android.net.Uri)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#WebImage(android.net.Uri)",
        "methodDes": "Constructs a new WebImage with the given URL.",
        "params": {
          "url": "The URL of the image"
        },
        "returns": "",
        "Exceptions": {
          "java.lang.IllegalArgumentException": "If the URL is null or empty"
        }
      },
      "com.google.android.gms.common.images.WebImage.WebImage(android.net.Uri,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#public-webimage-uri-url,-int-width,-int-height",
        "methodDes": "Constructs a new WebImage with the given URL and dimensions.",
        "params": {
          "url": "The URL of the image",
          "width": "The width of the image, in pixels",
          "height": "The height of the image, in pixels"
        },
        "returns": "",
        "Exceptions": {
          "java.lang.IllegalArgumentException": "If the URL is null or empty, or the dimensions are invalid"
        }
      }
    },
    "fields": {
      "com.google.android.gms.common.images.WebImage.CREATOR": {
        "des": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/images/WebImage#CREATOR",
        "value": ""
      }
    }
  },
  "com.google.android.gms.common.api.ResolvingResultCallbacks<R extends com.google.android.gms.common.api.Result>": {
    "classDes": "ResultCallbacks which automatically start resolutions for failures. Contains separate callbacks for success and unresolvable failures. These methods are called on the main thread, unless overridden by setHandler(Handler).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResolvingResultCallbacks",
    "methods": {
      "com.google.android.gms.common.api.ResolvingResultCallbacks.onUnresolvableFailure(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResolvingResultCallbacks#onUnresolvableFailure(com.google.android.gms.common.api.Status)",
        "methodDes": "Called when a non-resolvable failure occurs or starting a resolution fails.",
        "params": {
          "result": "Status resulting from the API call. Guaranteed to be non-null and unsuccessful"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResolvingResultCallbacks.onSuccess(R)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallbacks#onSuccess(R)",
        "methodDes": "Called when the Result is ready and was successful. It is the responsibility of the callback to release any resources associated with the result if onSuccess(R) is called. Some result types may implement Releasable, in which case release() should be used to free the associated resources. If a failure occurs the result will be released automatically.",
        "params": {
          "result": "The result from the API call. Never null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResolvingResultCallbacks.ResolvingResultCallbacks(android.app.Activity,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResolvingResultCallbacks#ResolvingResultCallbacks(android.app.Activity, int)",
        "methodDes": "Create new callbacks that automatically resolve failure.",
        "params": {
          "activity": "Activity to use for displaying UI to resolve failures. This activity will receive a call to onActivityResult(int, int, Intent) with the given request code when the user completes a resolution",
          "requestCode": "If >= 0, this code will be passed to onActivityResult(int, int, Intent) after the user completes a resolution"
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.actions.ItemListIntents": {
    "classDes": "Constants for intents to create and modify item lists from a Search Action.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents",
    "methods": {},
    "fields": {
      "com.google.android.gms.actions.ItemListIntents.ACTION_APPEND_ITEM_LIST": {
        "des": "Intent action for appending to an existing item list.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#ACTION_APPEND_ITEM_LIST",
        "value": "com.google.android.gms.actions.APPEND_ITEM_LIST"
      },
      "com.google.android.gms.actions.ItemListIntents.EXTRA_ITEM_NAMES": {
        "des": "Intent extra for specifying multiple items when creating a list with ACTION_CREATE_ITEM_LIST as a string array.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#EXTRA_ITEM_NAMES",
        "value": "com.google.android.gms.actions.extra.ITEM_NAMES"
      },
      "com.google.android.gms.actions.ItemListIntents.EXTRA_LIST_QUERY": {
        "des": "Intent extra specifying an unstructured query for an item list as a string.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#EXTRA_LIST_QUERY",
        "value": "com.google.android.gms.actions.extra.LIST_QUERY"
      },
      "com.google.android.gms.actions.ItemListIntents.EXTRA_LIST_NAME": {
        "des": "Intent extra specifying an optional name or title as a string describing what the list contains (e.g. shopping or todo).",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#EXTRA_LIST_NAME",
        "value": "com.google.android.gms.actions.extra.LIST_NAME"
      },
      "com.google.android.gms.actions.ItemListIntents.ACTION_REJECT_ITEM": {
        "des": "Intent action for marking an existing list item incomplete.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#ACTION_REJECT_ITEM",
        "value": "com.google.android.gms.actions.REJECT_ITEM"
      },
      "com.google.android.gms.actions.ItemListIntents.ACTION_DELETE_ITEM_LIST": {
        "des": "Intent action for removing an item list.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#ACTION_DELETE_ITEM_LIST",
        "value": "com.google.android.gms.actions.DELETE_ITEM_LIST"
      },
      "com.google.android.gms.actions.ItemListIntents.EXTRA_ITEM_NAME": {
        "des": "Intent extra specifying the contents of a list item as a string.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#EXTRA_ITEM_NAME",
        "value": "com.google.android.gms.actions.extra.ITEM_NAME"
      },
      "com.google.android.gms.actions.ItemListIntents.EXTRA_ITEM_QUERY": {
        "des": "Intent extra specifying an unstructured query to identify a specific item as a string.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#EXTRA_ITEM_QUERY",
        "value": "com.google.android.gms.actions.extra.ITEM_QUERY"
      },
      "com.google.android.gms.actions.ItemListIntents.ACTION_ACCEPT_ITEM": {
        "des": "Intent action for marking an existing list item complete.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#ACTION_ACCEPT_ITEM",
        "value": "com.google.android.gms.actions.ACCEPT_ITEM"
      },
      "com.google.android.gms.actions.ItemListIntents.ACTION_CREATE_ITEM_LIST": {
        "des": "Intent action for creating an item list.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#ACTION_CREATE_ITEM_LIST",
        "value": "com.google.android.gms.actions.CREATE_ITEM_LIST"
      },
      "com.google.android.gms.actions.ItemListIntents.ACTION_DELETE_ITEM": {
        "des": "Intent action for deleting an existing list item.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ItemListIntents#ACTION_DELETE_ITEM",
        "value": "com.google.android.gms.actions.DELETE_ITEM"
      }
    }
  },
  "com.google.android.gms.common.api.Api<O extends com.google.android.gms.common.api.Api.ApiOptions>": {
    "classDes": "Describes a section of the Google Play Services API that should be made available.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Api",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.common.api.Api.ApiOptions.NoOptions": {
    "classDes": "Api.ApiOptions implementation for Apis that do not take any options.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Api.ApiOptions.NoOptions",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.tasks.RuntimeExecutionException": {
    "classDes": "Runtime version of ExecutionException. See Also getResult(Class).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/RuntimeExecutionException",
    "methods": {
      "com.google.android.gms.tasks.RuntimeExecutionException.RuntimeExecutionException(java.lang.Throwable)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/RuntimeExecutionException#RuntimeExecutionException(java.lang.Throwable)",
        "methodDes": "",
        "params": {
          "cause": ""
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.AvailabilityException": {
    "classDes": "Contains the result of an availability check for one or more GoogleApis. See Also checkApiAvailability(GoogleApi, GoogleApi).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/AvailabilityException",
    "methods": {
      "com.google.android.gms.common.api.AvailabilityException.getMessage()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/AvailabilityException#getMessage()",
        "methodDes": "Lists the ConnectionResult per API.",
        "params": {},
        "returns": "java.lang.String: the message of this exception",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.AvailabilityException.getConnectionResult(com.google.android.gms.common.api.GoogleApi<? extends com.google.android.gms.common.api.Api.ApiOptions>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/AvailabilityException#getConnectionResult(com.google.android.gms.common.api.GoogleApi<? extends com.google.android.gms.common.api.Api.ApiOptions>)",
        "methodDes": "Returns a ConnectionResult indicating if the specified API is available.",
        "params": {
          "api": "the specified API"
        },
        "returns": "com.google.android.gms.common.ConnectionResult: the ConnectionResult instance",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.tasks.SuccessContinuation<TResult, TContinuationResult>": {
    "classDes": "A function that is called to continue execution then a Task succeeds. See Also onSuccessTask(SuccessContinuation).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/SuccessContinuation",
    "methods": {
      "com.google.android.gms.tasks.SuccessContinuation.then(TResult)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/SuccessContinuation#then(TResult)",
        "methodDes": "Returns the result of applying this SuccessContinuation to Task. The SuccessContinuation only happens then the Task is successful. If the previous Task fails, the onSuccessTask continuation will be skipped and failure listeners will be invoked.",
        "params": {
          "result": "the result of completed Task"
        },
        "returns": "com.google.android.gms.tasks.Task<TContinuationResult>: the result of applying this SuccessContinuation to Task",
        "Exceptions": {
          "java.lang.Exception": "if the result couldn't be produced"
        }
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.Api.ApiOptions.NotRequiredOptions": {
    "classDes": "Base interface for Api.ApiOptions that are not required, don't exist.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Api.ApiOptions.NotRequiredOptions",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.tasks.Continuation<TResult, TContinuationResult>": {
    "classDes": "A function that is called to continue execution after completion of a Task. See Also continueWith(Continuation).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation",
    "methods": {
      "com.google.android.gms.tasks.Continuation.then(com.google.android.gms.tasks.Task<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Continuation#then(com.google.android.gms.tasks.Task<TResult>)",
        "methodDes": "Returns the result of applying this Continuation to task.",
        "params": {
          "task": "the completed Task. Never null"
        },
        "returns": "TContinuationResult: ",
        "Exceptions": {
          "java.lang.Exception": "if the result couldn't be produced"
        }
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.data.FreezableUtils": {
    "classDes": "Utilities for working with Freezable objects.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/FreezableUtils",
    "methods": {
      "com.google.android.gms.common.data.FreezableUtils.freeze(java.util.ArrayList<E>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/FreezableUtils#freeze(java.util.ArrayList<E>)",
        "methodDes": "Utility helper method to freeze a list of freezable entities into a list of concrete entities. The list provided here must contain elements that implement the Freezable interface. Type T is the type of object returned by freezing an element of the list. In most cases, this will be the same as E. Type E is the type of object contained in the list. Must implement Freezable.",
        "params": {
          "list": "ArrayList to freeze contents from"
        },
        "returns": "java.util.ArrayList<T>: ArrayList of frozen representations of the object present in the provided list",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.FreezableUtils.freeze(E[])": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/FreezableUtils#public-static-arraylistt-freeze-e[]-array",
        "methodDes": "Utility helper method to freeze an array of freezable entities into a list of concrete entities.",
        "params": {
          "array": "Array to freeze contents from"
        },
        "returns": "java.util.ArrayList<T>: ArrayList of frozen representations of the object present in the provided array",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.FreezableUtils.freezeIterable(java.lang.Iterable<E>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/FreezableUtils#freezeIterable(java.lang.Iterable<E>)",
        "methodDes": "Utility helper method to freeze an array of freezable entities into a list of concrete entities. The array provided here must contain elements that implement the Freezable interface. Type T is the type of object returned by freezing an element of the array. In most cases, this will be the same as E. Type E is the type of object contained in the array. Must implement Freezable.",
        "params": {
          "iterable": "Iterable to freeze contents from"
        },
        "returns": "java.util.ArrayList<T>:ArrayList of frozen representations of the object present in the provided array",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.FreezableUtils.FreezableUtils()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/FreezableUtils#FreezableUtils()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.BatchResultToken<R extends com.google.android.gms.common.api.Result>": {
    "classDes": "Result token used to retrieve the result of individual operations from a batch.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/BatchResultToken",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.common.api.Releasable": {
    "classDes": "Represents a resource, or a holder of resources, which may be released once they are no longer needed.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Releasable",
    "methods": {
      "com.google.android.gms.common.api.Releasable.release()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Releasable#release()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.data.DataBufferObserver.Observable": {
    "classDes": "Interface a data buffer can implement to expose the fact that it supports observation.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver.Observable",
    "methods": {
      "com.google.android.gms.common.data.DataBufferObserver.Observable.removeObserver(com.google.android.gms.common.data.DataBufferObserver)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver.Observable#removeObserver(com.google.android.gms.common.data.DataBufferObserver)",
        "methodDes": "Unregister the given observer from receiving change notifications.",
        "params": {
          "observer": "the given observer from receiving change notifications"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserver.Observable.addObserver(com.google.android.gms.common.data.DataBufferObserver)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver.Observable#addObserver(com.google.android.gms.common.data.DataBufferObserver)",
        "methodDes": "Register the given observer for receiving change notifications.",
        "params": {
          "observer": "the given observer for receiving change notifications"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.HasApiKey<O extends com.google.android.gms.common.api.Api.ApiOptions>": {
    "classDes": "Anything that has an ApiKey. This is used to allow GoogleApi-based clients to be exposed via interface instead of subclass. Those interfaces can be declared as extending this, and GoogleApi's will automatically fulfill the interface.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/HasApiKey",
    "methods": {
      "com.google.android.gms.common.api.HasApiKey.getApiKey()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/HasApiKey#getApiKey()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Object: Api Key",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.tasks.OnSuccessListener<TResult>": {
    "classDes": "Listener called when a Task completes successfully. See Also addOnSuccessListener(OnSuccessListener).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnSuccessListener",
    "methods": {
      "com.google.android.gms.tasks.OnSuccessListener.onSuccess(TResult)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnSuccessListener#onSuccess(TResult)",
        "methodDes": "Called when the Task completes successfully.",
        "params": {
          "result": "the result of the Task"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.AccountPicker.AccountChooserOptions": {
    "classDes": "Options for building an appropriate intent to launch the Account Picker.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions",
    "methods": {
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.AccountChooserOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions#public-accountpicker.accountchooseroptions",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.tasks.CancellationTokenSource": {
    "classDes": "Creates a new CancellationToken or cancels one that has already created. There is a 1:1 CancellationTokenSource to CancellationToken relationship. To create a CancellationToken, create a CancellationTokenSource first and then call getToken() to get the CancellationToken for this CancellationTokenSource. See Also CancellationToken.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationTokenSource",
    "methods": {
      "com.google.android.gms.tasks.CancellationTokenSource.CancellationTokenSource()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationTokenSource#CancellationTokenSource()",
        "methodDes": "Creates a new CancellationTokenSource instance.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.CancellationTokenSource.getToken()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationTokenSource#getToken()",
        "methodDes": "Gets the CancellationToken for this CancellationTokenSource.",
        "params": {},
        "returns": "com.google.android.gms.tasks.CancellationToken: the CancellationToken that can be passed to asynchronous Task to cancel the Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.CancellationTokenSource.cancel()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationTokenSource#cancel()",
        "methodDes": "Cancels the CancellationToken if cancellation has not been requested yet.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.tasks.OnTokenCanceledListener": {
    "classDes": "Listener called when a CancellationToken is canceled successfully. See Also onCanceledRequested(OnTokenCanceledListener).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnTokenCanceledListener",
    "methods": {
      "com.google.android.gms.tasks.OnTokenCanceledListener.onCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnTokenCanceledListener#onCanceled()",
        "methodDes": "Called when the CancellationToken is canceled successfully.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.Scopes": {
    "classDes": "OAuth 2.0 scopes for use with Google Play services. See the specific client methods for details on which scopes are required.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes",
    "methods": {},
    "fields": {
      "com.google.android.gms.common.Scopes.DRIVE_FILE": {
        "des": "Scope for access user-authorized files from Google Drive.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#DRIVE_FILE",
        "value": "//www.googleapis.com/auth/drive.file"
      },
      "com.google.android.gms.common.Scopes.FITNESS_NUTRITION_READ_WRITE": {
        "des": "Scope for read/write access to nutrition data types in Google Fit.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_NUTRITION_READ_WRITE",
        "value": "//www.googleapis.com/auth/fitness.nutrition.write"
      },
      "com.google.android.gms.common.Scopes.FITNESS_BODY_READ_WRITE": {
        "des": "Scope for read/write access to biometric data types in Google Fit. These include heart rate, height, and weight.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_BODY_READ_WRITE",
        "value": "//www.googleapis.com/auth/fitness.body.write"
      },
      "com.google.android.gms.common.Scopes.GAMES": {
        "des": "Scope for accessing data from Google Play Games.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#GAMES",
        "value": "//www.googleapis.com/auth/games"
      },
      "com.google.android.gms.common.Scopes.FITNESS_BODY_READ": {
        "des": "Scope for read access to biometric data types in Google Fit. These include heart rate, height, and weight.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_BODY_READ",
        "value": "//www.googleapis.com/auth/fitness.body.read"
      },
      "com.google.android.gms.common.Scopes.DRIVE_APPFOLDER": {
        "des": "Scope for accessing appfolder files from Google Drive.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#DRIVE_APPFOLDER",
        "value": "//www.googleapis.com/auth/drive.appdata"
      },
      "com.google.android.gms.common.Scopes.APP_STATE": {
        "des": "Scope for using the App State service.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#APP_STATE",
        "value": "//www.googleapis.com/auth/appstate"
      },
      "com.google.android.gms.common.Scopes.FITNESS_LOCATION_READ": {
        "des": "Scope for read access to location-related data types in Google Fit. These include location, distance, and speed.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_LOCATION_READ",
        "value": "//www.googleapis.com/auth/fitness.location.read"
      },
      "com.google.android.gms.common.Scopes.PROFILE": {
        "des": "OAuth 2.0 scope for viewing a user's basic profile information.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#PROFILE",
        "value": "profile"
      },
      "com.google.android.gms.common.Scopes.CLOUD_SAVE": {
        "des": "Scope for using the CloudSave service.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#CLOUD_SAVE",
        "value": "//www.googleapis.com/auth/datastoremobile"
      },
      "com.google.android.gms.common.Scopes.FITNESS_NUTRITION_READ": {
        "des": "Scope for read access to nutrition data types in Google Fit.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_NUTRITION_READ",
        "value": "//www.googleapis.com/auth/fitness.nutrition.read"
      },
      "com.google.android.gms.common.Scopes.FITNESS_ACTIVITY_READ": {
        "des": "Scope for read access to activity-related data types in Google Fit.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_ACTIVITY_READ",
        "value": "//www.googleapis.com/auth/fitness.activity.read"
      },
      "com.google.android.gms.common.Scopes.PLUS_LOGIN": {
        "des": "OAuth 2.0 scope for accessing the user's name, basic profile info and Google+ profile info.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#PLUS_LOGIN",
        "value": "//www.googleapis.com/auth/plus.login"
      },
      "com.google.android.gms.common.Scopes.FITNESS_ACTIVITY_READ_WRITE": {
        "des": "Scope for read/write access to activity-related data types in Google Fit. These include activity type, calories consumed and expended, step counts, and others.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_ACTIVITY_READ_WRITE",
        "value": "//www.googleapis.com/auth/fitness.activity.write"
      },
      "com.google.android.gms.common.Scopes.FITNESS_LOCATION_READ_WRITE": {
        "des": "Scope for read/write access to location-related data types in Google Fit. These include location, distance, and speed.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#FITNESS_LOCATION_READ_WRITE",
        "value": "//www.googleapis.com/auth/fitness.location.write"
      },
      "com.google.android.gms.common.Scopes.EMAIL": {
        "des": "OAuth 2.0 scope for accessing user's Google account email address.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#EMAIL",
        "value": "email"
      },
      "com.google.android.gms.common.Scopes.PLUS_ME": {
        "des": "This scope was previously named PLUS_PROFILE.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/Scopes#PLUS_ME",
        "value": "//www.googleapis.com/auth/plus.me"
      }
    }
  },
  "com.google.android.gms.tasks.OnCompleteListener<TResult>": {
    "classDes": "Listener called when a Task completes. See Also addOnCompleteListener(OnCompleteListener).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCompleteListener",
    "methods": {
      "com.google.android.gms.tasks.OnCompleteListener.onComplete(com.google.android.gms.tasks.Task<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCompleteListener#onComplete(com.google.android.gms.tasks.Task<TResult>)",
        "methodDes": "Called when the Task completes.",
        "params": {
          "task": "the completed Task. Never null"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.Api.ApiOptions.Optional": {
    "classDes": "Base interface for Api.ApiOptions that are optional.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Api.ApiOptions.Optional",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.tasks.Tasks": {
    "classDes": "Task utility methods.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks",
    "methods": {
      "com.google.android.gms.tasks.Tasks.call(java.util.concurrent.Callable<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#call(java.util.concurrent.Callable<TResult>)",
        "methodDes": "Returns a Task that will be completed with the result of the specified Callable. The Callable will be called on the main application thread.",
        "params": {
          "callable": "the specified Callable"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: a Task that will be completed with the result of the specified Callable",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.whenAllComplete(com.google.android.gms.tasks.Task<?>...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(com.google.android.gms.tasks.Task<?>...)",
        "methodDes": "Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.",
        "params": {
          "tasks": "a list of Tasks"
        },
        "returns": "com.google.android.gms.tasks.Task<java.util.List<com.google.android.gms.tasks.Task<?>>>: a Task with a list of Tasks that completes successfully when all of the specified Tasks complete",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.whenAllSuccess(java.util.Collection<? extends com.google.android.gms.tasks.Task<?>>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(java.util.Collection<? extends com.google.android.gms.tasks.Task<?>>)",
        "methodDes": "Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls. This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.",
        "params": {
          "tasks": " a list of Task"
        },
        "returns": "com.google.android.gms.tasks.Task<java.util.List<TResult>>: a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.whenAll(com.google.android.gms.tasks.Task<?>...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAll(com.google.android.gms.tasks.Task<?>...)",
        "methodDes": "Returns a Task that completes successfully when all of the specified Tasks complete successfully. Does not accept nulls. This Task would fail if any of the provided Tasks fail. This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.",
        "params": {
          "tasks": "a list of Tasks"
        },
        "returns": "com.google.android.gms.tasks.Task<java.lang.Void>: a Task that completes successfully when all of the specified Tasks complete successfully",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.whenAllComplete(java.util.Collection<? extends com.google.android.gms.tasks.Task<?>>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllComplete(java.util.Collection<? extends com.google.android.gms.tasks.Task<?>>)",
        "methodDes": "Returns a Task with a list of Tasks that completes successfully when all of the specified Tasks complete. This Task would always succeed even if any of the provided Tasks fail or canceled. Does not accept nulls.",
        "params": {
          "tasks": "a list of Tasks"
        },
        "returns": "com.google.android.gms.tasks.Task<java.util.List<com.google.android.gms.tasks.Task<?>>>: a Task with a list of Tasks that completes successfully when all of the specified Tasks complete",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.forException(java.lang.Exception)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#forException(java.lang.Exception)",
        "methodDes": "Returns a completed Task with the specified exception.",
        "params": {
          "e": "the specified exception"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: a completed Task with the specified exception",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.forCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#forCanceled()",
        "methodDes": "Returns a canceled Task.",
        "params": {},
        "returns": "com.google.android.gms.tasks.Task<TResult>: a canceled Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.call(java.util.concurrent.Executor,java.util.concurrent.Callable<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#call(java.util.concurrent.Executor, java.util.concurrent.Callable<TResult>)",
        "methodDes": "Returns a Task that will be completed with the result of the specified Callable.",
        "params": {
          "executor": "the Executor to use to call the Callable",
          "callable": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: a Task that will be completed with the result of the specified Callable",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.forResult(TResult)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#forResult(TResult)",
        "methodDes": "Returns a completed Task with the specified result.",
        "params": {
          "result": "the specified result"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: a completed Task with the specified result",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.whenAllSuccess(com.google.android.gms.tasks.Task<?>...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#whenAllSuccess(com.google.android.gms.tasks.Task<?>...)",
        "methodDes": "Returns a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully. This Task would fail if any of the provided Tasks fail. Does not accept nulls. This Task would be set to canceled if any of the provided Tasks is canceled and no failure is detected.",
        "params": {
          "tasks": " a list of Task"
        },
        "returns": "com.google.android.gms.tasks.Task<java.util.List<TResult>>: a Task with a list of Task results that completes successfully when all of the specified Tasks complete successfully",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Tasks.await(com.google.android.gms.tasks.Task<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#await(com.google.android.gms.tasks.Task<TResult>)",
        "methodDes": "Blocks until the specified Task is complete.",
        "params": {
          "task": "the specified Task"
        },
        "returns": "TResult: the Task's result",
        "Exceptions": {
          "java.util.concurrent.ExecutionException": "if the Task fails. getCause will return the original exception",
          "java.lang.InterruptedException": "if an interrupt occurs while waiting for the Task to complete"
        }
      },
      "com.google.android.gms.tasks.Tasks.await(com.google.android.gms.tasks.Task<TResult>,long,java.util.concurrent.TimeUnit)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Tasks#public-static-tresult-await-tasktresult-task,-long-timeout,-timeunit-unit",
        "methodDes": "",
        "params": {
          "task": "",
          "timeout": "",
          "unit": ""
        },
        "returns": "TResult: the Task's result",
        "Exceptions": {
          "java.util.concurrent.ExecutionException": "if the Task fails. getCause will return the original exception",
          "java.lang.InterruptedException": "if an interrupt occurs while waiting for the Task to complete",
          "java.util.concurrent.TimeoutException": "if the specified timeout is reached before the Task completes"
        }
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.data.DataBufferUtils": {
    "classDes": "Utilities for working with DataBuffer objects.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferUtils",
    "methods": {
      "com.google.android.gms.common.data.DataBufferUtils.hasNextPage(com.google.android.gms.common.data.DataBuffer<?>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferUtils#hasNextPage(com.google.android.gms.common.data.DataBuffer<?>)",
        "methodDes": "Utility function to get the next page pagination token from a data buffer.",
        "params": {
          "buffer": "The data buffer to check"
        },
        "returns": "boolean: true if a data buffer has the next page pagination token",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferUtils.hasPrevPage(com.google.android.gms.common.data.DataBuffer<?>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferUtils#hasPrevPage(com.google.android.gms.common.data.DataBuffer<?>)",
        "methodDes": "Utility function to get the prev page pagination token from a data buffer.",
        "params": {
          "buffer": "The data buffer to check"
        },
        "returns": "boolean: true if a data buffer has the prev page pagination token",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferUtils.hasData(com.google.android.gms.common.data.DataBuffer<?>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferUtils#hasData(com.google.android.gms.common.data.DataBuffer<?>)",
        "methodDes": "Utility function to determine whether a data buffer has data or not.",
        "params": {
          "buffer": "The data buffer to check"
        },
        "returns": "boolean:Whether the data buffer has data or not",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferUtils.freezeAndClose(com.google.android.gms.common.data.DataBuffer<E>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferUtils#freezeAndClose(com.google.android.gms.common.data.DataBuffer<E>)",
        "methodDes": "Utility helper method to freeze a DataBuffer into a list of concrete entities. The DataBuffer provided here must contain elements that implement the Freezable interface. Note that this will close the buffer, so do not attempt to use it afterwards. Type T is the type of object returned by freezing an element of the DataBuffer. In most cases, this will be the same as E. Type E is the type of object contained by the DataBuffer. Must implement Freezable.",
        "params": {
          "buffer": "DataBuffer to freeze contents from"
        },
        "returns": "java.util.ArrayList<T>:ArrayList of objects represented by the buffer",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.UserRecoverableException": {
    "classDes": "UserRecoverableExceptions signal errors that can be recovered with user action, such as a user login.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/UserRecoverableException",
    "methods": {
      "com.google.android.gms.common.UserRecoverableException.getIntent()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/UserRecoverableException#getIntent()",
        "methodDes": "Getter for an Intent that when supplied to startActivityForResult(Intent, int), will allow user intervention.",
        "params": {},
        "returns": "android.content.Intent:Intent representing the ameliorating user action",
        "Exceptions": {}
      },
      "com.google.android.gms.common.UserRecoverableException.UserRecoverableException(java.lang.String,android.content.Intent)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/UserRecoverableException#UserRecoverableException(java.lang.String, android.content.Intent)",
        "methodDes": "",
        "params": {
          "msg": "",
          "intent": ""
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.BooleanResult": {
    "classDes": "A Result with a boolean value.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/BooleanResult",
    "methods": {
      "com.google.android.gms.common.api.BooleanResult.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/BooleanResult#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int: a hash code value for this object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.BooleanResult.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/BooleanResult#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "obj": "the reference object with which to compare"
        },
        "returns": "boolean: true if this object is the same as the obj argument; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.BooleanResult.getStatus()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Result#getStatus()",
        "methodDes": "Returns the status of this result. Use isSuccess() to determine whether the call was successful, and getStatusCode() to determine what the error cause was. Certain errors are due to failures that can be resolved by launching a particular intent. The resolution intent is available via getResolution().",
        "params": {},
        "returns": "com.google.android.gms.common.api.Status: the status of this result",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.BooleanResult.getValue()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/BooleanResult#getValue()",
        "methodDes": "",
        "params": {},
        "returns": "boolean:the boolean value of this result",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.GooglePlayServicesNotAvailableException": {
    "classDes": "Indicates Google Play services is not available.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesNotAvailableException",
    "methods": {
      "com.google.android.gms.common.GooglePlayServicesNotAvailableException.GooglePlayServicesNotAvailableException(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesNotAvailableException#GooglePlayServicesNotAvailableException(int)",
        "methodDes": "",
        "params": {
          "errorCode": ""
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.GooglePlayServicesNotAvailableException.errorCode": {
        "des": "The error code returned by isGooglePlayServicesAvailable(Context) call.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesNotAvailableException#public-final-int-errorcode",
        "value": ""
      }
    }
  },
  "com.google.android.gms.common.api.GoogleApi<O extends com.google.android.gms.common.api.Api.ApiOptions>": {
    "classDes": "Base class for Google API entry points. API clients based on this class manage the connection between your app and Google Play services (as opposed to GoogleApiClient-based calls). GoogleApi-based instances enqueue calls until a connection is made to Google Play services, and then execute them in order. The instances are: Cheap to create Thread-safe Automatically deduplicated Automatically timed-out and reconnected when necessary GoogleApi abstracts the connection to Play services, so callers do not need to implement GoogleApiClient.ConnectionCallbacks. If the user needs to install or update Google Play services, GoogleApi will prompt the user to do so and enqueue API calls until the issue is resolved. If GoogleApi was initialized with an Activity it will create a foreground prompt, otherwise it will display a system notification. If the user cancels the resolution or some other issue arises, pending API calls will be fail with an ApiException and status code CommonStatusCodes.API_NOT_CONNECTED. If isGooglePlayServicesAvailable(Context) returns true, GoogleApi instances will not show any UI to resolve connection failures.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApi",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.common.api.ResultCallbacks<R extends com.google.android.gms.common.api.Result>": {
    "classDes": "Callbacks for receiving a Result from a PendingResult as an asynchronous callback. Contains separate callbacks for success and failure. These methods are called on the main thread, unless overridden by setHandler(Handler).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallbacks",
    "methods": {
      "com.google.android.gms.common.api.ResultCallbacks.onSuccess(R)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallbacks#onSuccess(R)",
        "methodDes": "Called when the Result is ready and was successful. It is the responsibility of the callback to release any resources associated with the result if onSuccess(R) is called. Some result types may implement Releasable, in which case release() should be used to free the associated resources. If a failure occurs the result will be released automatically.",
        "params": {
          "result": "The result from the API call. Never null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResultCallbacks.onFailure(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallbacks#onFailure(com.google.android.gms.common.api.Status)",
        "methodDes": "Called when the Result is ready and a failure occurred.",
        "params": {
          "result": "Status resulting from the API call. Guaranteed to be non-null and unsuccessful"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResultCallbacks.ResultCallbacks()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallbacks#ResultCallbacks()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.actions.SearchIntents": {
    "classDes": "Constants for intents to perform in-app search from a Search Action.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/actions/SearchIntents",
    "methods": {},
    "fields": {
      "com.google.android.gms.actions.SearchIntents.ACTION_SEARCH": {
        "des": "Intent action for performing an in-app search. The intent should include an optional extra to specify the text to search for EXTRA_QUERY. If no extras are provided, the application should just show an Activity with the search UI activated.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/SearchIntents#ACTION_SEARCH",
        "value": "com.google.android.gms.actions.SEARCH_ACTION"
      },
      "com.google.android.gms.actions.SearchIntents.EXTRA_QUERY": {
        "des": "Intent extra specifying the text query to use as a string for ACTION_SEARCH.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/SearchIntents#EXTRA_QUERY",
        "value": "query"
      }
    }
  },
  "com.google.android.gms.common.api.Batch": {
    "classDes": "Handles a batch of PendingResult items. Callbacks can be added and you can block to wait for all items in the batch to complete like any other PendingResult item. A Batch can also be canceled if the results are no longer needed. In this case, the onBatchComplete callback will never be triggered. The results can be taken either from the underlying PendingResults or via take(BatchResultToken) but not both.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch",
    "methods": {
      "com.google.android.gms.common.api.Batch.clearResultCallback()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch#clearResultCallback()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Batch.cancel()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#cancel()",
        "methodDes": "Requests that the batch be canceled. Cancels all underlying PendingResults. onResult(Result) will never be called, await() will return a failed result with status CANCELED.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Batch.isCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#isCanceled()",
        "methodDes": "Indicates whether the pending result has been canceled either due to calling disconnect() or calling cancel() directly on the pending result or an enclosing Batch.",
        "params": {},
        "returns": "boolean: true if the pending result has been canceled either due to calling disconnect() or calling cancel() directly on the pending result or an enclosing Batch",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Batch.createFailedResult(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch#createFailedResult(com.google.android.gms.common.api.Status)",
        "methodDes": "Creates a result of type <R> that represents a failure with the specified Status.",
        "params": {
          "status": ""
        },
        "returns": "com.google.android.gms.common.api.BatchResult: a result of type <R> that represents a failure with the specified Status",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.api.Batch.mApiClient": {
        "des": "This reference will never be null so long as the GoogleApiClient is connected. It needs to be weak so that PendingResults don't pin disconnected GACs due to binder references to the PendingResults.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch#protected-final-weakreferencegoogleapiclient-mapiclient",
        "value": ""
      }
    }
  },
  "com.google.android.gms.common.data.DataBufferObserver": {
    "classDes": "An interface for notifying an observer about changes to a DataBuffer. To support adding multiple observers, see DataBufferObserverSet. It allows you to delegate addObserver and removeObserver to it and it will handle distributing all the notifications to all registered observers. See Also DataBuffer.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver",
    "methods": {
      "com.google.android.gms.common.data.DataBufferObserver.onDataRangeChanged(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeChanged(int, int)",
        "methodDes": "Called when a range of items changes.",
        "params": {
          "position": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserver.onDataRangeInserted(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeInserted(int, int)",
        "methodDes": "Called when a range of items is inserted.",
        "params": {
          "position": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserver.onDataRangeRemoved(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeRemoved(int, int)",
        "methodDes": "Called when a range of items is removed.",
        "params": {
          "position": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserver.onDataRangeMoved(int,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeMoved(int, int, int)",
        "methodDes": "Called when a range of items is moved.",
        "params": {
          "fromPosition": "",
          "toPosition": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserver.onDataChanged()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataChanged()",
        "methodDes": "Called when the overall data changes.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.ApiException": {
    "classDes": "Exception to be returned by a Task when a call to Google Play services has failed.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ApiException",
    "methods": {
      "com.google.android.gms.common.api.ApiException.getStatusCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ApiException#getStatusCode()",
        "methodDes": "Indicates the status of the operation.",
        "params": {},
        "returns": "int:Status code resulting from the operation. The value is one of the constants in CommonStatusCodes or specific to the API in use",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ApiException.ApiException(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ApiException#ApiException(com.google.android.gms.common.api.Status)",
        "methodDes": "Create an ApiException from a Status.",
        "params": {
          "status": "the Status instance containing a message and code"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ApiException.getStatusMessage()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ApiException#getStatusMessage()",
        "methodDes": "This method is deprecated. use getMessage() for a summary of the cause.",
        "params": {},
        "returns": "java.lang.String: the status message of this ApiException",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.tasks.OnCanceledListener": {
    "classDes": "Listener called when a Task is canceled. See Also addOnCanceledListener(OnCanceledListener).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCanceledListener",
    "methods": {
      "com.google.android.gms.tasks.OnCanceledListener.onCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnCanceledListener#onCanceled()",
        "methodDes": "Called when the Task is canceled successfully.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.actions.NoteIntents": {
    "classDes": "Constants for intents to create and modify notes from a Search Action.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/actions/NoteIntents",
    "methods": {},
    "fields": {
      "com.google.android.gms.actions.NoteIntents.ACTION_CREATE_NOTE": {
        "des": "Intent action for creating a note. The intent may optionally include an extra to specify the title or subject of the note EXTRA_NAME.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/NoteIntents#ACTION_CREATE_NOTE",
        "value": "com.google.android.gms.actions.CREATE_NOTE"
      },
      "com.google.android.gms.actions.NoteIntents.ACTION_DELETE_NOTE": {
        "des": "Intent action for removing an existing note.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/NoteIntents#ACTION_DELETE_NOTE",
        "value": "com.google.android.gms.actions.DELETE_NOTE"
      },
      "com.google.android.gms.actions.NoteIntents.EXTRA_NAME": {
        "des": "Intent extra specifying an optional title or subject for the note as a string. The name can be used to locate the note later with EXTRA_NOTE_QUERY.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/NoteIntents#EXTRA_NAME",
        "value": "com.google.android.gms.actions.extra.NAME"
      },
      "com.google.android.gms.actions.NoteIntents.EXTRA_TEXT": {
        "des": "Intent extra specifying the text of the note as a string.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/NoteIntents#EXTRA_TEXT",
        "value": "com.google.android.gms.actions.extra.TEXT"
      },
      "com.google.android.gms.actions.NoteIntents.ACTION_APPEND_NOTE": {
        "des": "Intent action for appending to an existing note. The intent should include an extra to specify the text EXTRA_TEXT to append.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/NoteIntents#ACTION_APPEND_NOTE",
        "value": "com.google.android.gms.actions.APPEND_NOTE"
      },
      "com.google.android.gms.actions.NoteIntents.EXTRA_NOTE_QUERY": {
        "des": "Intent extra specifying an unstructured query for a note as a string. This could search the note name or the text content of the note.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/NoteIntents#EXTRA_NOTE_QUERY",
        "value": "com.google.android.gms.actions.extra.NOTE_QUERY"
      }
    }
  },
  "com.google.android.gms.common.ErrorDialogFragment": {
    "classDes": "Wraps the Dialog returned by getErrorDialog(Activity, int, int) by using DialogFragment so that it can be properly managed by the Activity. If you are using an Activity from the support library, use SupportErrorDialogFragment instead.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ErrorDialogFragment",
    "methods": {
      "com.google.android.gms.common.ErrorDialogFragment.onCancel(android.content.DialogInterface)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ErrorDialogFragment#onCancel(android.content.DialogInterface)",
        "methodDes": "",
        "params": {
          "dialog": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ErrorDialogFragment.show(android.app.FragmentManager,java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ErrorDialogFragment#show(android.app.FragmentManager, java.lang.String)",
        "methodDes": "",
        "params": {
          "manager": "",
          "tag": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ErrorDialogFragment.onCreateDialog(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ErrorDialogFragment#onCreateDialog(android.os.Bundle)",
        "methodDes": "Returns a Dialog created by getErrorDialog(Activity, int, int) with the provided errorCode, activity, request code, and cancel listener.",
        "params": {
          "savedInstanceState": "Not used"
        },
        "returns": "android.app.Dialog: a Dialog instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ErrorDialogFragment.ErrorDialogFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ErrorDialogFragment#ErrorDialogFragment()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ErrorDialogFragment.newInstance(android.app.Dialog)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ErrorDialogFragment#newInstance(android.app.Dialog)",
        "methodDes": "Create a DialogFragment for displaying the getErrorDialog(Activity, int, int).",
        "params": {
          "dialog": "The Dialog created by getErrorDialog(Activity, int, int)"
        },
        "returns": "com.google.android.gms.common.ErrorDialogFragment:The ErrorDialogFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ErrorDialogFragment.newInstance(android.app.Dialog,android.content.DialogInterface.OnCancelListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ErrorDialogFragment#public-static-errordialogfragment-newinstance-dialog-dialog,-dialoginterface.oncancellistener-cancellistener",
        "methodDes": "Create a DialogFragment for displaying the getErrorDialog(Activity, int, int) with an OnCancelListener.",
        "params": {
          "dialog": "The Dialog created by getErrorDialog(Activity, int, int)",
          "cancelListener": "A DialogInterface.OnCancelListener for when a user cancels the DialogFragment"
        },
        "returns": "com.google.android.gms.common.ErrorDialogFragment:The ErrorDialogFragment",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.ConnectionResult": {
    "classDes": "Contains all possible error codes for when a client fails to connect to Google Play services. These error codes are used by GoogleApiClient.OnConnectionFailedListener.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult",
    "methods": {
      "com.google.android.gms.common.ConnectionResult.ConnectionResult(int,android.app.PendingIntent,java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#ConnectionResult(int, android.app.PendingIntent, java.lang.String)",
        "methodDes": "Creates a connection result.",
        "params": {
          "statusCode": "The status code",
          "pendingIntent": "A pending intent that will resolve the issue when started, or null",
          "message": "An additional error message for the connection result, or null"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.ConnectionResult(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#ConnectionResult(int)",
        "methodDes": "Creates a connection result.",
        "params": {
          "statusCode": "The status code"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.getResolution()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#getResolution()",
        "methodDes": "A pending intent to resolve the connection failure. This intent can be started with startIntentSenderForResult(IntentSender, int, Intent, int, int, int) to present UI to solve the issue.",
        "params": {},
        "returns": "android.app.PendingIntent:The pending intent to resolve the connection failure",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.hasResolution()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#hasResolution()",
        "methodDes": "Returns true if calling startResolutionForResult(Activity, int) will start any intents requiring user interaction.",
        "params": {},
        "returns": "boolean:true if there is a resolution that can be started",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.ConnectionResult(int,android.app.PendingIntent)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#ConnectionResult(int, android.app.PendingIntent)",
        "methodDes": "Creates a connection result.",
        "params": {
          "statusCode": "The status code",
          "pendingIntent": "A pending intent that will resolve the issue when started, or null"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int: a hash code value for this object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "out": "",
          "flags": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.getErrorMessage()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#getErrorMessage()",
        "methodDes": "Returns an error message for connection result.",
        "params": {},
        "returns": "java.lang.String:the message",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.startResolutionForResult(android.app.Activity,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#startResolutionForResult(android.app.Activity, int)",
        "methodDes": "Resolves an error by starting any intents requiring user interaction. See SIGN_IN_REQUIRED, and RESOLUTION_REQUIRED.",
        "params": {
          "activity": "An Activity context to use to resolve the issue. The activity's onActivityResult method will be invoked after the user is done. If the resultCode is RESULT_OK, the application should try to connect again",
          "requestCode": "The request code to pass to onActivityResult"
        },
        "returns": "void",
        "Exceptions": {
          "android.content.IntentSender.SendIntentException": "If the resolution intent has been canceled or is no longer able to execute the request"
        }
      },
      "com.google.android.gms.common.ConnectionResult.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String: a string representation of the object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "o": "the reference object with which to compare"
        },
        "returns": "boolean: true if this object is the same as the obj argument; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.isSuccess()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#isSuccess()",
        "methodDes": "Returns true if the connection was successful.",
        "params": {},
        "returns": "boolean:true if the connection was successful, false if there was an error",
        "Exceptions": {}
      },
      "com.google.android.gms.common.ConnectionResult.getErrorCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#getErrorCode()",
        "methodDes": "Indicates the type of error that interrupted connection.",
        "params": {},
        "returns": "int:the error code, or SUCCESS if no error occurred",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.ConnectionResult.TIMEOUT": {
        "des": "The timeout was exceeded while waiting for the connection to complete. Only returned by  blockingConnect().",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#TIMEOUT",
        "value": "14"
      },
      "com.google.android.gms.common.ConnectionResult.RESTRICTED_PROFILE": {
        "des": "The current user profile is restricted and cannot use authenticated features.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#RESTRICTED_PROFILE",
        "value": "20"
      },
      "com.google.android.gms.common.ConnectionResult.SERVICE_UPDATING": {
        "des": "Google Play service is currently being updated on this device.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SERVICE_UPDATING",
        "value": "18"
      },
      "com.google.android.gms.common.ConnectionResult.SIGN_IN_FAILED": {
        "des": "The client attempted to connect to the service but the user is not signed in. An error may have occurred when signing in the user and the error can not be recovered with any user interaction. Alternately, the API may have been requested with  addApiIfAvailable(Api , Scope...) and it may be the case that no required APIs needed authentication, so authentication did not occur.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SIGN_IN_FAILED",
        "value": "17"
      },
      "com.google.android.gms.common.ConnectionResult.SERVICE_DISABLED": {
        "des": "The installed version of Google Play services has been disabled on this device. The calling activity should pass this error code to  getErrorDialog(Activity, int, int) to get a localized error dialog that will resolve the error when shown.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SERVICE_DISABLED",
        "value": "3"
      },
      "com.google.android.gms.common.ConnectionResult.SUCCESS": {
        "des": "The connection was successful.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SUCCESS",
        "value": "0"
      },
      "com.google.android.gms.common.ConnectionResult.SIGN_IN_REQUIRED": {
        "des": "The client attempted to connect to the service but the user is not signed in. The client may choose to continue without using the API. Alternately, if  hasResolution() returns true the client may call  startResolutionForResult(Activity, int) to prompt the user to sign in. After the sign in activity returns with RESULT_OK further attempts should succeed.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SIGN_IN_REQUIRED",
        "value": "4"
      },
      "com.google.android.gms.common.ConnectionResult.RESOLUTION_REQUIRED": {
        "des": "Completing the connection requires some form of resolution. A resolution will be available to be started with  startResolutionForResult(Activity, int). If the result returned is RESULT_OK, then further attempts to connect should either complete or continue on to the next issue that needs to be resolved.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#RESOLUTION_REQUIRED",
        "value": "6"
      },
      "com.google.android.gms.common.ConnectionResult.SERVICE_VERSION_UPDATE_REQUIRED": {
        "des": "The installed version of Google Play services is out of date. The calling activity should pass this error code to  getErrorDialog(Activity, int, int) to get a localized error dialog that will resolve the error when shown.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SERVICE_VERSION_UPDATE_REQUIRED",
        "value": "2"
      },
      "com.google.android.gms.common.ConnectionResult.LICENSE_CHECK_FAILED": {
        "des": "The application is not licensed to the user. This error is not recoverable and will be treated as fatal.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#LICENSE_CHECK_FAILED",
        "value": "11"
      },
      "com.google.android.gms.common.ConnectionResult.DRIVE_EXTERNAL_STORAGE_REQUIRED": {
        "des": "The Drive API requires external storage (such as an SD card), but no external storage is mounted. This error is recoverable if the user installs external storage (if none is present) and ensures that it is mounted (which may involve disabling USB storage mode, formatting the storage, or other initialization as required by the device).",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#DRIVE_EXTERNAL_STORAGE_REQUIRED",
        "value": "1500"
      },
      "com.google.android.gms.common.ConnectionResult.SERVICE_MISSING_PERMISSION": {
        "des": "Google Play service doesn't have one or more required permissions. The client may call  startResolutionForResult(Activity, int) to prompt the user to fix the issue. After activity returns with RESULT_OK further attempts to connect should succeed.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SERVICE_MISSING_PERMISSION",
        "value": "19"
      },
      "com.google.android.gms.common.ConnectionResult.CANCELED": {
        "des": "The connection was canceled.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#CANCELED",
        "value": "13"
      },
      "com.google.android.gms.common.ConnectionResult.NETWORK_ERROR": {
        "des": "A network error occurred. Retrying should resolve the problem.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#NETWORK_ERROR",
        "value": "7"
      },
      "com.google.android.gms.common.ConnectionResult.API_UNAVAILABLE": {
        "des": "One of the API components you attempted to connect to is not available. The API will not work on this device or for your app or for this particular account, and updating Google Play services will not likely solve the problem.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#API_UNAVAILABLE",
        "value": "16"
      },
      "com.google.android.gms.common.ConnectionResult.SERVICE_INVALID": {
        "des": "The version of the Google Play services installed on this device is not authentic.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SERVICE_INVALID",
        "value": "9"
      },
      "com.google.android.gms.common.ConnectionResult.INVALID_ACCOUNT": {
        "des": "The client attempted to connect to the service with an invalid account name specified.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#INVALID_ACCOUNT",
        "value": "5"
      },
      "com.google.android.gms.common.ConnectionResult.DEVELOPER_ERROR": {
        "des": "The application is misconfigured. This error is not recoverable and will be treated as fatal. The developer should look at the logs after this to determine more actionable information.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#DEVELOPER_ERROR",
        "value": "10"
      },
      "com.google.android.gms.common.ConnectionResult.INTERNAL_ERROR": {
        "des": "An internal error occurred. Retrying should resolve the problem.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#INTERNAL_ERROR",
        "value": "8"
      },
      "com.google.android.gms.common.ConnectionResult.SERVICE_MISSING": {
        "des": "Google Play services is missing on this device. The calling activity should pass this error code to  getErrorDialog(Activity, int, int) to get a localized error dialog that will resolve the error when shown.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#SERVICE_MISSING",
        "value": "1"
      },
      "com.google.android.gms.common.ConnectionResult.INTERRUPTED": {
        "des": "An interrupt occurred while waiting for the connection complete. Only returned by  blockingConnect().",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#INTERRUPTED",
        "value": "15"
      },
      "com.google.android.gms.common.ConnectionResult.CREATOR": {
        "des": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult#CREATOR",
        "value": ""
      }
    }
  },
  "com.google.android.gms.tasks.TaskExecutors": {
    "classDes": "Standard Executor instances for use with Task.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskExecutors",
    "methods": {},
    "fields": {
      "com.google.android.gms.tasks.TaskExecutors.MAIN_THREAD": {
        "des": "An Executor that uses the main application thread.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskExecutors#MAIN_THREAD",
        "value": ""
      }
    }
  },
  "com.google.android.gms.tasks.Task<TResult>": {
    "classDes": "Represents an asynchronous operation.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task",
    "methods": {
      "com.google.android.gms.tasks.Task.getResult(java.lang.Class<X>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getResult(java.lang.Class<X>)",
        "methodDes": "Gets the result of the Task, if it has already completed.",
        "params": {
          "exceptionType": ""
        },
        "returns": "TResult:",
        "Exceptions": {
          "X": "the specified exception class"
        }
      },
      "com.google.android.gms.tasks.Task.continueWithTask(com.google.android.gms.tasks.Continuation<TResult,com.google.android.gms.tasks.Task<TContinuationResult>>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWithTask(com.google.android.gms.tasks.Continuation<TResult, com.google.android.gms.tasks.Task<TContinuationResult>>)",
        "methodDes": "Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. The Continuation will be called on the main application thread. If the previous Task is canceled, the Continuation would still execute and task.isCanceled() is true can be observed in the Continuation.",
        "params": {
          "continuation": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TContinuationResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnFailureListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnFailureListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnFailureListener)",
        "methodDes": "Adds a listener that is called if the Task fails. If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.",
        "params": {
          "executor": "the executor to use to call the listener",
          "listener": "the listener"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnFailureListener(android.app.Activity,com.google.android.gms.tasks.OnFailureListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-abstract-tasktresult-addonfailurelistener-activity-activity,-onfailurelistener-listener",
        "methodDes": "Adds an Activity-scoped listener that is called if the Task fails.",
        "params": {
          "activity": "",
          "listener": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.continueWithTask(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation<TResult,com.google.android.gms.tasks.Task<TContinuationResult>>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWithTask(java.util.concurrent.Executor, com.google.android.gms.tasks.Continuation<TResult, com.google.android.gms.tasks.Task<TContinuationResult>>)",
        "methodDes": "Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. If the previous Task is canceled, the Continuation would still execute and task.isCanceled() is true can be observed in the Continuation.",
        "params": {
          "executor": "the executor to use to call the Continuation",
          "continuation": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TContinuationResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(com.google.android.gms.tasks.OnCanceledListener)",
        "methodDes": "Adds a listener that is called if the Task is canceled. The listener will be called on main application thread. If the Task has already been canceled, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.",
        "params": {
          "listener": "a listener that is called if the Task is canceled"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnCanceledListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCanceledListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-tasktresult-addoncanceledlistener-executor-executor,-oncanceledlistener-listener",
        "methodDes": "Adds a listener that is called if the Task is canceled.",
        "params": {
          "executor": "the executor to use to call the listener",
          "listener": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnFailureListener(com.google.android.gms.tasks.OnFailureListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnFailureListener(com.google.android.gms.tasks.OnFailureListener)",
        "methodDes": "Adds a listener that is called if the Task fails. The listener will be called on main application thread. If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added. A canceled Task is not a failure Task. This listener will not trigger if the Task is canceled.",
        "params": {
          "listener": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener<TResult>)",
        "methodDes": "Adds a listener that is called when the Task completes. The listener will be called on main application thread. If the Task is already complete, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.",
        "params": {
          "listener": "a listener that is called when the Task completes"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.Task()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#Task()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.continueWith(java.util.concurrent.Executor,com.google.android.gms.tasks.Continuation<TResult,TContinuationResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWith(java.util.concurrent.Executor, com.google.android.gms.tasks.Continuation<TResult, TContinuationResult>)",
        "methodDes": "Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. If the previous Task is canceled, the returned Task will also be canceled and the Continuation would not execute.",
        "params": {
          "executor": "the executor to use to call the Continuation",
          "continuation": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TContinuationResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.getResult()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getResult()",
        "methodDes": "Gets the result of the Task, if it has already completed.",
        "params": {},
        "returns": "TResult:",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.getException()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#getException()",
        "methodDes": "Returns the exception that caused the Task to fail. Returns null if the Task is not yet complete, or completed successfully.",
        "params": {},
        "returns": "java.lang.Exception: the exception that caused the Task to fail",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.isCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isCanceled()",
        "methodDes": "Returns true if the Task is canceled; false otherwise.",
        "params": {},
        "returns": "boolean: true if the Task is canceled; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<? super TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(com.google.android.gms.tasks.OnSuccessListener<? super TResult>)",
        "methodDes": "Adds a listener that is called if the Task completes successfully. The listener will be called on the main application thread. If the Task has already completed successfully, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.",
        "params": {
          "listener": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnSuccessListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnSuccessListener<? super TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-abstract-tasktresult-addonsuccesslistener-executor-executor,-onsuccesslistener-super-tresult-listener",
        "methodDes": "Adds a listener that is called if the Task completes successfully.",
        "params": {
          "executor": "the executor to use to call the listener",
          "listener": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.onSuccessTask(com.google.android.gms.tasks.SuccessContinuation<TResult,TContinuationResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#onSuccessTask(com.google.android.gms.tasks.SuccessContinuation<TResult, TContinuationResult>)",
        "methodDes": "Returns a new Task that will be completed with the result of applying the specified SuccessContinuation to this Task when this Task completes successfully. If the previous Task fails, the onSuccessTask completion will be skipped and failure listeners will be invoked. The SuccessContinuation will be called on the main application thread. If the previous Task is canceled, the returned Task will also be canceled and the SuccessContinuation would not execute.",
        "params": {
          "successContinuation": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TContinuationResult>: this task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.onSuccessTask(java.util.concurrent.Executor,com.google.android.gms.tasks.SuccessContinuation<TResult,TContinuationResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-tasktcontinuationresult-onsuccesstask-executor-executor,-successcontinuationtresult,-tcontinuationresult-successcontinuation",
        "methodDes": "Returns a new Task that will be completed with the result of applying the specified SuccessContinuation to this Task when this Task completes successfully.",
        "params": {
          "executor": "the executor to use to call the SuccessContinuation",
          "successContinuation": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TContinuationResult>: this task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnCompleteListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCompleteListener<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(java.util.concurrent.Executor, com.google.android.gms.tasks.OnCompleteListener<TResult>)",
        "methodDes": "Adds a listener that is called when the Task completes. If the Task is already complete, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.",
        "params": {
          "executor": "the executor to use to call the listener",
          "listener": "the listener"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnCompleteListener(android.app.Activity,com.google.android.gms.tasks.OnCompleteListener<TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#public-tasktresult-addoncompletelistener-activity-activity,-oncompletelistenertresult-listener",
        "methodDes": "Adds an Activity-scoped listener that is called when the Task completes.",
        "params": {
          "activity": "",
          "listener": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnCanceledListener(android.app.Activity,com.google.android.gms.tasks.OnCanceledListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCanceledListener(android.app.Activity, com.google.android.gms.tasks.OnCanceledListener)",
        "methodDes": "Adds an Activity-scoped listener that is called if the Task is canceled. The listener will be called on main application thread. If the Task has already been canceled, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added. The listener will be automatically removed during onStop().",
        "params": {
          "activity": "",
          "listener": "a listener that is called if the Task is canceled"
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.addOnSuccessListener(android.app.Activity,com.google.android.gms.tasks.OnSuccessListener<? super TResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnSuccessListener(android.app.Activity, com.google.android.gms.tasks.OnSuccessListener<? super TResult>)",
        "methodDes": "Adds an Activity-scoped listener that is called if the Task completes successfully. The listener will be called on the main application thread. If the Task has already completed successfully, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added. The listener will be automatically removed during onStop().",
        "params": {
          "activity": "",
          "listener": ""
        },
        "returns": "com.google.android.gms.tasks.Task<TResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.continueWith(com.google.android.gms.tasks.Continuation<TResult,TContinuationResult>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#continueWith(com.google.android.gms.tasks.Continuation<TResult, TContinuationResult>)",
        "methodDes": "Returns a new Task that will be completed with the result of applying the specified Continuation to this Task. The Continuation will be called on the main application thread. If the previous Task is canceled, the returned Task will also be canceled and the Continuation would not execute.",
        "params": {
          "continuation": "the specified Continuation to this Task"
        },
        "returns": "com.google.android.gms.tasks.Task<TContinuationResult>: this Task",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.isComplete()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isComplete()",
        "methodDes": "Returns true if the Task is complete; false otherwise.",
        "params": {},
        "returns": "boolean: true if the Task is complete; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.Task.isSuccessful()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#isSuccessful()",
        "methodDes": "Returns true if the Task has completed successfully; false otherwise.",
        "params": {},
        "returns": "boolean: true if the Task has completed successfully; false otherwise",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.tasks.TaskCompletionSource<TResult>": {
    "classDes": "Provides the ability to create Task-based APIs.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource",
    "methods": {
      "com.google.android.gms.tasks.TaskCompletionSource.TaskCompletionSource()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource#TaskCompletionSource()",
        "methodDes": "Creates an instance of TaskCompletionSource.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.TaskCompletionSource.trySetResult(TResult)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource#trySetResult(TResult)",
        "methodDes": "Completes the Task with the specified result, unless the Task has already completed. If the Task has already completed, the call does nothing.",
        "params": {
          "result": ""
        },
        "returns": "boolean: true if the result was set successfully, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.TaskCompletionSource.setResult(TResult)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource#setResult(TResult)",
        "methodDes": "Completes the Task with the specified result.",
        "params": {
          "result": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.TaskCompletionSource.getTask()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource#getTask()",
        "methodDes": "Returns the Task.",
        "params": {},
        "returns": "com.google.android.gms.tasks.Task<TResult>:",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.TaskCompletionSource.setException(java.lang.Exception)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource#setException(java.lang.Exception)",
        "methodDes": "Completes the Task with the specified exception.",
        "params": {
          "e": "the specified exception"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.TaskCompletionSource.trySetException(java.lang.Exception)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource#trySetException(java.lang.Exception)",
        "methodDes": "Completes the Task with the specified exception, unless the Task has already completed. If the Task has already completed, the call does nothing.",
        "params": {
          "e": ""
        },
        "returns": "boolean: true if the exception was set successfully, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.TaskCompletionSource.TaskCompletionSource(com.google.android.gms.tasks.CancellationToken)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/TaskCompletionSource#TaskCompletionSource(com.google.android.gms.tasks.CancellationToken)",
        "methodDes": "Creates an instance of TaskCompletionSource with a CancellationToken so that the Task can be set to canceled when CancellationToken is canceled.",
        "params": {
          "cancellationToken": ""
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.actions.ReserveIntents": {
    "classDes": "Constants for intents corresponding to Reserve Action.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/actions/ReserveIntents",
    "methods": {},
    "fields": {
      "com.google.android.gms.actions.ReserveIntents.ACTION_RESERVE_TAXI_RESERVATION": {
        "des": "Intent action for reserving a taxi. The application MUST confirm whatever action will be taken with the user before completing the action (e.g. confirmation dialog).",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/actions/ReserveIntents#ACTION_RESERVE_TAXI_RESERVATION",
        "value": "com.google.android.gms.actions.RESERVE_TAXI_RESERVATION"
      }
    }
  },
  "com.google.android.gms.common.api.PendingResult<R extends com.google.android.gms.common.api.Result>": {
    "classDes": "Represents a pending result from calling an API method in Google Play services. The final result object from a PendingResult is of type R, which can be retrieved in one of two ways. via blocking calls to await(), or await(long, TimeUnit), or via a callback by passing in an object implementing interface ResultCallback to setResultCallback(ResultCallback ). After the result has been retrieved using await() or delivered to the result callback, it is an error to attempt to retrieve the result again. It is the responsibility of the caller or callback receiver to release any resources associated with the returned result. Some result types may implement Releasable, in which case release() should be used to free the associated resources.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult",
    "methods": {
      "com.google.android.gms.common.api.PendingResult.setResultCallback(com.google.android.gms.common.api.ResultCallback<? super R>,long,java.util.concurrent.TimeUnit)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#setResultCallback(com.google.android.gms.common.api.ResultCallback<? super R>, long, java.util.concurrent.TimeUnit)",
        "methodDes": "Set the callback here if you want the result to be delivered via a callback when the result is ready or has timed out waiting for the result. The returned result object can have an additional failure mode of TIMEOUT.",
        "params": {
          "callback": "",
          "time": "",
          "units": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResult.then(com.google.android.gms.common.api.ResultTransform<? super R,? extends S>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/TransformedResult#then(com.google.android.gms.common.api.ResultTransform<? super R, ? extends S>)",
        "methodDes": "Transforms the result by making another API call.",
        "params": {
          "transform": ""
        },
        "returns": "com.google.android.gms.common.api.TransformedResult<S>: Transforms result",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResult.isCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#isCanceled()",
        "methodDes": "Indicates whether the pending result has been canceled either due to calling disconnect() or calling cancel() directly on the pending result or an enclosing Batch.",
        "params": {},
        "returns": "boolean:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResult.setResultCallback(com.google.android.gms.common.api.ResultCallback<? super R>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#setResultCallback(com.google.android.gms.common.api.ResultCallback<? super R>)",
        "methodDes": "Set the callback here if you want the result to be delivered via a callback when the result is ready.",
        "params": {
          "callback": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResult.cancel()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#cancel()",
        "methodDes": "Requests that the PendingResult be canceled. If the result is available, but not consumed it will be released. If the result is set after cancelation was requested it is immediately released. onResult(Result) will never be called, await() will return a failed result with CANCELED.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResult.await()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#await()",
        "methodDes": "Blocks until the task is completed. This is not allowed on the UI thread. The returned result object can have an additional failure mode of INTERRUPTED.",
        "params": {},
        "returns": "R:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.PendingResult.await(long,java.util.concurrent.TimeUnit)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#await(long, java.util.concurrent.TimeUnit)",
        "methodDes": "Blocks until the task is completed or has timed out waiting for the result. This is not allowed on the UI thread. The returned result object can have an additional failure mode of either INTERRUPTED or TIMEOUT.",
        "params": {
          "time": "",
          "units": ""
        },
        "returns": "R:",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.GooglePlayServicesRepairableException": {
    "classDes": "GooglePlayServicesRepairableExceptions are special instances of UserRecoverableExceptions which are thrown when Google Play services is not installed, up-to-date, or enabled. In these cases, client code can use getConnectionStatusCode() in conjunction with getErrorDialog(android.app.Activity, int, int) to provide users with a localized Dialog that will allow users to install, update, or otherwise enable Google Play services.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesRepairableException",
    "methods": {
      "com.google.android.gms.common.GooglePlayServicesRepairableException.getConnectionStatusCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesRepairableException#getConnectionStatusCode()",
        "methodDes": "Returns the ConnectionResult statusCode of the exception. This value may be passed in to getErrorDialog(android.app.Activity, int, int) to provide users with a localized Dialog that will allow users to install, update, or otherwise enable Google Play services.",
        "params": {},
        "returns": "int: the status code of connection",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.data.DataBuffer<T>": {
    "classDes": "Interface for a buffer of typed data.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer",
    "methods": {
      "com.google.android.gms.common.data.DataBuffer.isClosed()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#isClosed()",
        "methodDes": "This method is deprecated. release() is idempotent, and so is safe to call multiple times.",
        "params": {},
        "returns": "boolean: true if resources used by the buffer are closed",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBuffer.get(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#get(int)",
        "methodDes": "Returns an element on specified position.",
        "params": {
          "position": ""
        },
        "returns": "T:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBuffer.release()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Releasable#release()",
        "methodDes": "Releases resources used by the buffer. This method is idempotent.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBuffer.iterator()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#iterator()",
        "methodDes": "",
        "params": {},
        "returns": "java.util.Iterator<T>:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBuffer.close()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#close()",
        "methodDes": "Releases the data buffer, for use in try-with-resources. Both close and release shall have identical semantics, and are idempotent.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBuffer.getCount()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#getCount()",
        "methodDes": "",
        "params": {},
        "returns": "int:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBuffer.singleRefIterator()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBuffer#singleRefIterator()",
        "methodDes": "In order to use this iterator it should be supported by particular DataBuffer. Be careful: there will be single reference while iterating. If you are not sure - DO NOT USE this iterator.",
        "params": {},
        "returns": "java.util.Iterator<T>:",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener": {
    "classDes": "This interface is deprecated. use GoogleApi based apis instead. see moving past googleapiclient. api implementors should use the stand-alone OnConnectionFailedListener instead. Provides callbacks for scenarios that result in a failed attempt to connect the client to the service. See ConnectionResult for a list of error codes and suggestions for resolution.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.OnConnectionFailedListener",
    "methods": {
      "com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener.onConnectionFailed(com.google.android.gms.common.ConnectionResult)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.OnConnectionFailedListener",
        "methodDes": "",
        "params": {
          "result": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.ResultTransform<R extends com.google.android.gms.common.api.Result, S extends com.google.android.gms.common.api.Result>": {
    "classDes": "Transforms a Result by making a subsequent API call. See Also then(ResultTransform).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultTransform",
    "methods": {
      "com.google.android.gms.common.api.ResultTransform.createFailedResult(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultTransform#createFailedResult(com.google.android.gms.common.api.Status)",
        "methodDes": "Creates a failed result with the given Status. In the event of an error during onSuccess(R), call this method and return the failed result. Note: the PendingResult generated by this method must be returned directly from onSuccess(R). It is an error to call any methods on this PendingResult.",
        "params": {
          "status": "the given Status"
        },
        "returns": "com.google.android.gms.common.api.PendingResult<S>: a failed result",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResultTransform.onFailure(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultTransform#onFailure(com.google.android.gms.common.api.Status)",
        "methodDes": "Called when the PendingResult to be transformed returns a failure. Default implementation simply propagates the failure, but subclasses may override for custom failure handling. This method is called on the main thread, unless overridden by setHandler(Handler).",
        "params": {
          "status": "The status of the failure"
        },
        "returns": "com.google.android.gms.common.api.Status: The status of the result of the transformation. Must not be success or null",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResultTransform.onSuccess(R)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultTransform#onSuccess(R)",
        "methodDes": "Transforms the result of a successful API call. This method is called on a background thread and should not access UI elements.",
        "params": {
          "result": "The successful result to be transformed. Never null. If this result is Releasable it will be automatically released after this transform is applied; it is not necessary to release the result inside onSuccess. It is an error to set callbacks on this result. Any callbacks set on this result will be overridden and will not be called"
        },
        "returns": "com.google.android.gms.common.api.PendingResult<S>: The result of the transformation. Normally the result of another API call. To shortcut execution and directly yield a failure, return either: null, which is translated into a Status with code ERROR; or a specific failure created using createFailedResult(Status)",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResultTransform.ResultTransform()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultTransform#ResultTransform()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.SupportErrorDialogFragment": {
    "classDes": "Wraps the Dialog returned by getErrorDialog(Activity, int, int) by using DialogFragment so that it can be properly managed by the Activity. If you are using an Activity from the support library, use SupportErrorDialogFragment instead.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/SupportErrorDialogFragment",
    "methods": {
      "com.google.android.gms.common.SupportErrorDialogFragment.onCreateDialog(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/SupportErrorDialogFragment#onCreateDialog(android.os.Bundle)",
        "methodDes": "Returns a Dialog created by getErrorDialog(Activity, int, int) with the provided errorCode, activity, request code, and cancel listener.",
        "params": {
          "savedInstanceState": "Not used"
        },
        "returns": "android.app.Dialog: a Dialog instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.SupportErrorDialogFragment.newInstance(android.app.Dialog)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/SupportErrorDialogFragment#newInstance(android.app.Dialog)",
        "methodDes": "Create a DialogFragment for displaying the getErrorDialog(Activity, int, int).",
        "params": {
          "dialog": "The Dialog created by getErrorDialog(Activity, int, int)"
        },
        "returns": "com.google.android.gms.common.SupportErrorDialogFragment:The SupportErrorDialogFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.common.SupportErrorDialogFragment.newInstance(android.app.Dialog,android.content.DialogInterface.OnCancelListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/SupportErrorDialogFragment#public-static-supporterrordialogfragment-newinstance-dialog-dialog,-dialoginterface.oncancellistener-cancellistener",
        "methodDes": "Create a DialogFragment for displaying the getErrorDialog(Activity, int, int) with an OnCancelListener.",
        "params": {
          "dialog": "The Dialog created by getErrorDialog(Activity, int, int)",
          "cancelListener": "A DialogInterface.OnCancelListener for when a user cancels the DialogFragment"
        },
        "returns": "com.google.android.gms.common.SupportErrorDialogFragment:The SupportErrorDialogFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.common.SupportErrorDialogFragment.onCancel(android.content.DialogInterface)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/SupportErrorDialogFragment#onCancel(android.content.DialogInterface)",
        "methodDes": "",
        "params": {
          "dialog": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.SupportErrorDialogFragment.SupportErrorDialogFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/SupportErrorDialogFragment#SupportErrorDialogFragment()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.SupportErrorDialogFragment.show(androidx.fragment.app.FragmentManager,java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/SupportErrorDialogFragment#show(androidx.fragment.app.FragmentManager, java.lang.String)",
        "methodDes": "",
        "params": {
          "manager": "",
          "tag": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.GooglePlayServicesUtil": {
    "classDes": "Utility class for verifying that the Google Play services APK is available and up-to-date on this device. The same checks are performed if one uses AdvertisingIdClient or GoogleAuthUtil to connect to the service.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil",
    "methods": {
      "com.google.android.gms.common.GooglePlayServicesUtil.getErrorString(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#getErrorString(int)",
        "methodDes": "This method is deprecated. Use getErrorString(int) instead.",
        "params": {
          "errorCode": ""
        },
        "returns": "java.lang.String: a human-readable string of the error code returned from isGooglePlayServicesAvailable(Context)",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.isUserRecoverableError(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#isUserRecoverableError(int)",
        "methodDes": "This method is deprecated. Use isUserResolvableError(int) instead.",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context), or returned to your application via GoogleApiClient.OnConnectionFailedListener#onConnectionFailed"
        },
        "returns": "boolean:true if the error is recoverable with getErrorDialog(int, Activity, int)",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.showErrorNotification(int,android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#showErrorNotification(int,%20android.content.Context)",
        "methodDes": "This method is deprecated.Use showErrorNotification(Context, int) instead.",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then null is returned",
          "context": "used for identifying language to display dialog in as well as accessing the NotificationManager"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.getErrorDialog(int,android.app.Activity,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#getErrorDialog(int, android.app.Activity, int)",
        "methodDes": "This method is deprecated. Use getErrorDialog(Activity, int, int) instead.",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then null is returned",
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "requestCode": "The requestCode given when calling startActivityForResult"
        },
        "returns": "android.app.Dialog: a Dialog instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.getRemoteContext(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#getRemoteContext(android.content.Context)",
        "methodDes": "This gets the Context object of the Buddy APK. This loads the Buddy APK code from the Buddy APK into memory. This returned context can be used to create classes and obtain resources defined in the Buddy APK.",
        "params": {
          "context": ""
        },
        "returns": "android.content.Context:The Context object of the Buddy APK or null if the Buddy APK is not installed on the device",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.getErrorPendingIntent(int,android.content.Context,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#getErrorPendingIntent(int, android.content.Context, int)",
        "methodDes": "This method is deprecated. Use getErrorResolutionPendingIntent(Context, ConnectionResult) instead.",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then null is returned",
          "context": "parent context for creating the PendingIntent",
          "requestCode": "The requestCode given when calling startActivityForResult"
        },
        "returns": "android.app.PendingIntent: the PendingIntent instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.isGooglePlayServicesAvailable(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#isGooglePlayServicesAvailable(android.content.Context)",
        "methodDes": "This method is deprecated. Use isGooglePlayServicesAvailable(Context) instead.",
        "params": {
          "context": ""
        },
        "returns": "int: status code indicating whether there was an error. Can be one of following in ConnectionResult: SUCCESS, SERVICE_MISSING, SERVICE_VERSION_UPDATE_REQUIRED, SERVICE_DISABLED, SERVICE_INVALID",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.getErrorDialog(int,android.app.Activity,int,android.content.DialogInterface.OnCancelListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#getErrorDialog(android.app.Activity, int, int, android.content.DialogInterface.OnCancelListener)",
        "methodDes": "This method is deprecated. Use getErrorDialog(Activity, int, int, OnCancelListener) instead.",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then null is returned",
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "requestCode": "The requestCode given when calling startActivityForResult",
          "cancelListener": "The DialogInterface.OnCancelListener to invoke if the dialog is canceled"
        },
        "returns": "android.app.Dialog: a Dialog instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.getRemoteResource(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#getRemoteResource(android.content.Context)",
        "methodDes": "This gets the Resources object of the Buddy APK.",
        "params": {
          "context": ""
        },
        "returns": "android.content.res.Resources:The Resources object of the Buddy APK or null if the Buddy APK is not installed on the device",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.isGooglePlayServicesAvailable(android.content.Context,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#isGooglePlayServicesAvailable(android.content.Context, int)",
        "methodDes": "This method is deprecated. Use isGooglePlayServicesAvailable(Context) instead.",
        "params": {
          "context": "",
          "minApkVersion": ""
        },
        "returns": "int: status code indicating whether there was an error. Can be one of following in ConnectionResult: SUCCESS, SERVICE_MISSING, SERVICE_VERSION_UPDATE_REQUIRED, SERVICE_DISABLED, SERVICE_INVALID",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.showErrorDialogFragment(int,android.app.Activity,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#showErrorDialogFragment(int,%20android.app.Activity,%20int)",
        "methodDes": "This method is deprecated. Use showErrorDialogFragment(Activity, int, int) instead.",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then this does nothing",
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "requestCode": "The requestCode given when calling startActivityForResult"
        },
        "returns": "boolean: true if the dialog is shown, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.showErrorDialogFragment(int,android.app.Activity,int,android.content.DialogInterface.OnCancelListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#public-static-boolean-showerrordialogfragment-int-errorcode,-activity-activity,-int-requestcode,-dialoginterface.oncancellistener-cancellistener",
        "methodDes": "Display a DialogFragment for an error code returned by isGooglePlayServicesAvailable(Context).",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then this does nothing",
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "requestCode": "The requestCode given when calling startActivityForResult",
          "cancelListener": "The DialogInterface.OnCancelListener to invoke if the dialog is canceled"
        },
        "returns": "boolean: true if the dialog is shown, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.showErrorDialogFragment(int,android.app.Activity,androidx.fragment.app.Fragment,int,android.content.DialogInterface.OnCancelListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#public-static-boolean-showerrordialogfragment-int-errorcode,-activity-activity,-fragment-fragment,-int-requestcode,-dialoginterface.oncancellistener-cancellistener",
        "methodDes": "Display a DialogFragment for an error code.",
        "params": {
          "errorCode": "",
          "activity": "",
          "fragment": "",
          "requestCode": "",
          "cancelListener": ""
        },
        "returns": "boolean: true if the dialog is shown, false otherwise",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.GooglePlayServicesUtil.GOOGLE_PLAY_STORE_PACKAGE": {
        "des": "Package name for Google Play Store.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#GOOGLE_PLAY_STORE_PACKAGE",
        "value": "com.android.vending"
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.GMS_ERROR_DIALOG": {
        "des": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil#GMS_ERROR_DIALOG",
        "value": "GooglePlayServicesErrorDialog"
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.GOOGLE_PLAY_SERVICES_VERSION_CODE": {
        "des": "Google Play services client library version (declared in library's AndroidManifest.xml android:versionCode).",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#GOOGLE_PLAY_SERVICES_VERSION_CODE",
        "value": ""
      },
      "com.google.android.gms.common.GooglePlayServicesUtil.GOOGLE_PLAY_SERVICES_PACKAGE": {
        "des": "Package name for Google Play services.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#GOOGLE_PLAY_SERVICES_PACKAGE",
        "value": "com.google.android.gms"
      }
    }
  },
  "com.google.android.gms.tasks.OnFailureListener": {
    "classDes": "Listener called when a Task fails with an exception. See Also addOnFailureListener(OnFailureListener).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnFailureListener",
    "methods": {
      "com.google.android.gms.tasks.OnFailureListener.onFailure(java.lang.Exception)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/OnFailureListener#onFailure(java.lang.Exception)",
        "methodDes": "Called when the Task fails with an exception.",
        "params": {
          "e": "the exception that caused the Task to fail. Never null"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.GoogleApiClient": {
    "classDes": "This class is deprecated. Use GoogleApi based APIs instead. See Moving Past GoogleApiClient. The main entry point for Google Play services integration. GoogleApiClient is used with a variety of static methods. Some of these methods require that GoogleApiClient be connected, some will queue up calls before GoogleApiClient is connected; check the specific API documentation to determine whether you need to be connected. Before any operation is executed, the GoogleApiClient must be connected. The simplest way to manage the connection is to use enableAutoManage(FragmentActivity, GoogleApiClient.OnConnectionFailedListener). See Accessing Google APIs. GoogleApiClient instances are not thread-safe. To access Google APIs from multiple threads simultaneously, create a GoogleApiClient on each thread. GoogleApiClient service connections are cached internally, so creating multiple instances is fast.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient",
    "methods": {
      "com.google.android.gms.common.api.GoogleApiClient.blockingConnect(long,java.util.concurrent.TimeUnit)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#blockingConnect(long, java.util.concurrent.TimeUnit)",
        "methodDes": "Connects the client to Google Play services. Blocks until the connection either succeeds or fails, or the timeout is reached. Keep in mind this method will cause ANRs if called from the main thread. If the client is already connected, this methods returns immediately. If the client is already connecting (for example due to a prior call to connect()), this method blocks until the existing connection attempt completes or the timeout is reached. If a prior connection attempt has already failed, then a new connection attempt is started.",
        "params": {
          "timeout": "the maximum time to wait",
          "unit": "the time unit of the timeout argument"
        },
        "returns": "com.google.android.gms.common.ConnectionResult:the result of the connection",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.hasConnectedApi(com.google.android.gms.common.api.Api<?>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#hasConnectedApi(com.google.android.gms.common.api.Api<?>)",
        "methodDes": "Returns whether or not this GoogleApiClient has the specified API in a connected state.",
        "params": {
          "api": "The Api to test the connection of"
        },
        "returns": "boolean: whether or not this GoogleApiClient has the specified API in a connected state",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.connect()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#connect()",
        "methodDes": "Connects the client to Google Play services. This method returns immediately, and connects to the service in the background. If the connection is successful, ConnectionCallbacks#onConnected is called and enqueued items are executed. On a failure, OnConnectionFailedListener#onConnectionFailed is called. If the client is already connected or connecting, this method does nothing.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.connect(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#public-void-connect-int-signinmode",
        "methodDes": "Connects the client to Google Play services using the given sign in mode.",
        "params": {
          "signInMode": "sign in mode"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.disconnect()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#disconnect()",
        "methodDes": "Closes the connection to Google Play services. No calls can be made using this client after calling this method. Any method calls that haven't executed yet will be canceled, and their onResult(Result) callbacks won't be called. If the connection to the remote service hasn't been established yet, all enqueued calls will be canceled.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
        "methodDes": "Prints the GoogleApiClient's state into the given stream.",
        "params": {
          "prefix": "Desired prefix to prepend at each line of output",
          "fd": "The raw file descriptor that the dump is being sent to",
          "writer": "The PrintWriter to use for writing the dump",
          "args": "Additional arguments to the dump request"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.registerConnectionFailedListener(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#registerConnectionFailedListener(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)",
        "methodDes": "Registers a listener to receive connection failed events from this GoogleApiClient. Unlike registerConnectionCallbacks(GoogleApiClient.ConnectionCallbacks), if the service is not already connected, the listener's OnConnectionFailedListener#onConnectionFailed method will not be called immediately. Applications should balance calls to this method with calls to unregisterConnectionFailedListener(OnConnectionFailedListener) to avoid leaking resources. If the specified listener is already registered to receive connection failed events, this method will not add a duplicate entry for the same listener. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.",
        "params": {
          "listener": "the listener where the results of the asynchronous connect() call are delivered"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.blockingConnect()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#blockingConnect()",
        "methodDes": "Connects the client to Google Play services. Blocks until the connection either succeeds or fails. Keep in mind this method will cause ANRs if called from the main thread. If the client is already connected, this methods returns immediately. If the client is already connecting (for example due to a prior call to connect()), this method blocks until the existing connection attempt completes. If a prior connection attempt has already failed, then a new connection attempt is started.",
        "params": {},
        "returns": "com.google.android.gms.common.ConnectionResult:the result of the connection",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.isConnectionFailedListenerRegistered(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#isConnectionFailedListenerRegistered(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)",
        "methodDes": "Returns true if the specified listener is currently registered to receive connection failed events.",
        "params": {
          "listener": "The listener to check for"
        },
        "returns": "boolean:true if the specified listener is currently registered to receive connection failed events",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.getConnectionResult(com.google.android.gms.common.api.Api<?>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#getConnectionResult(com.google.android.gms.common.api.Api<?>)",
        "methodDes": "Returns the ConnectionResult for the GoogleApiClient's connection to the specified API. This method must only be called after connect() has been called and before disconnect() is called. This method should be used to check the connection result of an API added via addApiIfAvailable(Api , Scope...) in the event that the overall connection succeeded, but the individual API failed to connect. To check the failure of the overall connection, use addOnConnectionFailedListener(GoogleApiClient.OnConnectionFailedListener). This method may return stale results if the GoogleApiClient is reconnecting due to a lost network connection. It is guaranteed to return the most recent ConnectionResult from attempting to connect the given API, but will throw an IllegalStateException if called before calling connect, after calling disconnect, or after receiving OnConnectionFailedListener#onConnectionFailed. This method can be used to easily determine why an API failed to connect if it was not available. To determine whether a given API is currently connected (without potential stale results) see hasConnectedApi(Api ).",
        "params": {
          "api": "The Api to retrieve the ConnectionResult of. Passing an API that was not registered with the GoogleApiClient results in an IllegalArgumentException"
        },
        "returns": "com.google.android.gms.common.ConnectionResult: the ConnectionResult for the GoogleApiClient's connection to the specified API",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.GoogleApiClient()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#GoogleApiClient()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.registerConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#registerConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)",
        "methodDes": "Registers a listener to receive connection events from this GoogleApiClient. If the service is already connected, the listener's ConnectionCallbacks#onConnected method will be called immediately. Applications should balance calls to this method with calls to unregisterConnectionCallbacks(ConnectionCallbacks) to avoid leaking resources. If the specified listener is already registered to receive connection events, this method will not add a duplicate entry for the same listener, but will still call the listener's ConnectionCallbacks#onConnected method if currently connected. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.",
        "params": {
          "listener": "the listener where the results of the asynchronous connect() call are delivered"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.dumpAll(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#dumpAll(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])",
        "methodDes": "Prints the state of all GoogleApiClients in the current process into the given stream. This can be used to diagnose lifecycle issues where GoogleApiClients may be unintentionally left in the connected state. Note that the output may include clients that are no longer referenced but have not yet been garbage collected.",
        "params": {
          "prefix": "Desired prefix to prepend at each line of output",
          "fd": "The raw file descriptor that the dump is being sent to",
          "writer": "The PrintWriter to use for writing the dump",
          "args": "Additional arguments to the dump request"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.unregisterConnectionFailedListener(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#unregisterConnectionFailedListener(com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener)",
        "methodDes": "Removes a connection failed listener from the GoogleApiClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection failed events, this method will have no effect.",
        "params": {
          "listener": "the listener to unregister"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.clearDefaultAccountAndReconnect()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#clearDefaultAccountAndReconnect()",
        "methodDes": "Clears the account selected by the user and reconnects the client asking the user to pick an account again if useDefaultAccount() was set.",
        "params": {},
        "returns": "com.google.android.gms.common.api.PendingResult<com.google.android.gms.common.api.Status>:the pending result is fired once the default account has been cleared, but before the client is reconnected - for that ConnectionCallbacks can be used",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.isConnectionCallbacksRegistered(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#isConnectionCallbacksRegistered(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)",
        "methodDes": "Returns true if the specified listener is currently registered to receive connection events.",
        "params": {
          "listener": "The listener to check for"
        },
        "returns": "boolean:true if the specified listener is currently registered to receive connection events",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.reconnect()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#reconnect()",
        "methodDes": "Closes the current connection to Google Play services and creates a new connection. Equivalent to calling disconnect() followed by connect(). This method closes the current connection then returns immediately and reconnects to the service in the background. After calling this method, your application will receive ConnectionCallbacks#onConnected if the connection is successful, or OnConnectionFailedListener#onConnectionFailed if the connection failed.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.stopAutoManage(androidx.fragment.app.FragmentActivity)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#stopAutoManage(androidx.fragment.app.FragmentActivity)",
        "methodDes": "Disconnects the client and stops automatic lifecycle management. Use this before creating a new client (which might be necessary when switching accounts, changing the set of used APIs etc.). This method must be called from the main thread.",
        "params": {
          "lifecycleActivity": "the activity managing the client's lifecycle"
        },
        "returns": "void",
        "Exceptions": {
          "java.lang.IllegalStateException": "if called from outside of the main thread"
        }
      },
      "com.google.android.gms.common.api.GoogleApiClient.isConnected()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#isConnected()",
        "methodDes": "Checks if the client is currently connected to the service, so that requests to other methods will succeed. Applications should guard client actions caused by the user with a call to this method.",
        "params": {},
        "returns": "boolean:true if the client is connected to the service",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.isConnecting()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#isConnecting()",
        "methodDes": "Checks if the client is attempting to connect to the service.",
        "params": {},
        "returns": "boolean:true if the client is attempting to connect to the service",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.unregisterConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#unregisterConnectionCallbacks(com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks)",
        "methodDes": "Removes a connection listener from this GoogleApiClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection events, this method will have no effect.",
        "params": {
          "listener": "the listener to unregister"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.api.GoogleApiClient.SIGN_IN_MODE_OPTIONAL": {
        "des": "If authenticated APIs are present they will attempt to connect, but failure of an authenticated API will not cause the GoogleApiClient connection to fail. After ConnectionCallbacks#onConnected is received, the status of an authenticated API can be checked with  hasConnectedApi(Api ).",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#SIGN_IN_MODE_OPTIONAL",
        "value": "2"
      },
      "com.google.android.gms.common.api.GoogleApiClient.SIGN_IN_MODE_REQUIRED": {
        "des": "If a required authenticated API fails to connect, the entire GoogleApiClient will fail to connect and a failed ConnectionResult will be delivered to OnConnectionFailedListener#onConnectionFailed. Once a connection has successfully completed the only way to disconnect the authenticated APIs is to call  disconnect() on this GoogleApiClient.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient#SIGN_IN_MODE_REQUIRED",
        "value": "1"
      }
    }
  },
  "com.google.android.gms.common.api.Result": {
    "classDes": "Represents the final result of invoking an API method in Google Play services.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Result",
    "methods": {
      "com.google.android.gms.common.api.Result.getStatus()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Result#getStatus()",
        "methodDes": "Returns the status of this result. Use isSuccess() to determine whether the call was successful, and getStatusCode() to determine what the error cause was. Certain errors are due to failures that can be resolved by launching a particular intent. The resolution intent is available via getResolution().",
        "params": {},
        "returns": "com.google.android.gms.common.api.Status: the status of this result",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks": {
    "classDes": "This interface is deprecated. use GoogleApi based APIs instead. see moving past googleapiclient. API implementors should use the stand-alone ConnectionCallbacks instead. Provides callbacks that are called when the client is connected or disconnected from the service. Most applications implement GoogleApiClient.ConnectionCallbacks#onConnected(Bundle) to start making requests.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.ConnectionCallbacks",
    "methods": {
      "com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks.onConnected(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.ConnectionCallbacks",
        "methodDes": "",
        "params": {
          "bundle": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks.onConnectionSuspended(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.ConnectionCallbacks",
        "methodDes": "",
        "params": {
          "arg": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks.CAUSE_SERVICE_DISCONNECTED": {
        "des": "A suspension cause informing that the service has been killed.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.ConnectionCallbacks#CAUSE_SERVICE_DISCONNECTED",
        "value": "1"
      },
      "com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks.CAUSE_NETWORK_LOST": {
        "des": "A suspension cause informing you that a peer device connection was lost.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.ConnectionCallbacks#CAUSE_NETWORK_LOST",
        "value": "2"
      }
    }
  },
  "com.google.firebase.FirebaseApiNotAvailableException": {
    "classDes": "Indicates that a requested API is not available.",
    "classUrl": "https://developers.google.com/android/reference/com/google/firebase/FirebaseApiNotAvailableException",
    "methods": {
      "com.google.firebase.FirebaseApiNotAvailableException.FirebaseApiNotAvailableException(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/firebase/FirebaseApiNotAvailableException#FirebaseApiNotAvailableException(java.lang.String)",
        "methodDes": "",
        "params": {
          "message": ""
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.tasks.CancellationToken": {
    "classDes": "Propagates notification that operations should be canceled.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationToken",
    "methods": {
      "com.google.android.gms.tasks.CancellationToken.CancellationToken()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationToken#CancellationToken()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.CancellationToken.isCancellationRequested()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationToken#isCancellationRequested()",
        "methodDes": "Checks if cancellation has been requested from the CancellationTokenSource.",
        "params": {},
        "returns": "boolean:true if cancellation is requested, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.tasks.CancellationToken.onCanceledRequested(com.google.android.gms.tasks.OnTokenCanceledListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/tasks/CancellationToken#onCanceledRequested(com.google.android.gms.tasks.OnTokenCanceledListener)",
        "methodDes": "Adds an OnTokenCanceledListener to this CancellationToken.",
        "params": {
          "listener": "the listener that will fire once the cancellation request succeeds"
        },
        "returns": "com.google.android.gms.tasks.CancellationToken: a CancellationToken instance",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.ResolvableApiException": {
    "classDes": "Exception to be returned by a Task when a call to Google Play services has failed with a possible resolution.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResolvableApiException",
    "methods": {
      "com.google.android.gms.common.api.ResolvableApiException.ResolvableApiException(com.google.android.gms.common.api.Status)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResolvableApiException#ResolvableApiException(com.google.android.gms.common.api.Status)",
        "methodDes": "",
        "params": {
          "status": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResolvableApiException.getResolution()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResolvableApiException#getResolution()",
        "methodDes": "A pending intent to resolve the failure. This intent can be started with startIntentSenderForResult(IntentSender, int, Intent, int, int, int) to present UI to solve the issue.",
        "params": {},
        "returns": "android.app.PendingIntent:The pending intent to resolve the failure",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.ResolvableApiException.startResolutionForResult(android.app.Activity,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResolvableApiException#startResolutionForResult(android.app.Activity, int)",
        "methodDes": "Resolves an error by starting any intents requiring user interaction. See SIGN_IN_REQUIRED, and RESOLUTION_REQUIRED.",
        "params": {
          "activity": "An Activity context to use to resolve the issue. The activity's onActivityResult method will be invoked after the user is done. If the resultCode is RESULT_OK, the application should try to connect again",
          "requestCode": "The request code to pass to onActivityResult"
        },
        "returns": "void",
        "Exceptions": {
          "android.content.IntentSender.SendIntentException": "If the resolution intent has been canceled or is no longer able to execute the request"
        }
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.AccountPicker": {
    "classDes": "Common account picker similar to the standard framework account picker introduced in ICS: newChooseAccountIntent.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker",
    "methods": {
      "com.google.android.gms.common.AccountPicker.newChooseAccountIntent(android.accounts.Account,java.util.ArrayList<android.accounts.Account>,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker#newChooseAccountIntent(android.accounts.Account, java.util.ArrayList<android.accounts.Account>, java.lang.String[], boolean, java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle)",
        "methodDes": "This method is deprecated. use newChooseAccountIntent(AccountChooserOptions).",
        "params": {
          "selectedAccount": "if specified, indicates that the Account is the currently selected one, according to the caller's definition of selected",
          "allowableAccounts": "an optional ArrayList of accounts that are allowed to be shown. If not specified then this field will not limit the displayed accounts",
          "allowableAccountTypes": "an optional string array of account types. These are used both to filter the shown accounts and to filter the list of account types that are shown when adding an account",
          "alwaysPromptForAccount": "if set, the account chooser screen is always shown, otherwise it is only shown when there is more than one account from which to choose or the calling app doesn't have the GET_ACCOUNTS permission",
          "descriptionOverrideText": "if non-null this string is used as the description in the accounts chooser screen rather than the default",
          "addAccountAuthTokenType": "this optional string is passed as the addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback, Handler) authTokenType parameter. Current implementation does not check this value",
          "addAccountRequiredFeatures": "this optional string array is passed as the addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback, Handler) requiredFeatures parameter. Current implementation does not check this value",
          "addAccountOptions": "This optional Bundle is passed as the addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback, Handler) options parameter. Can be null if sending no extra options"
        },
        "returns": "android.content.Intent: an Intent that can be used to launch the ChooseAccount activity flow",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.newChooseAccountIntent(com.google.android.gms.common.AccountPicker.AccountChooserOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker#public-static-intent-newchooseaccountintent-accountpicker.accountchooseroptions-options",
        "methodDes": "Returns an intent to an Activity that prompts the user to choose from a list of accounts.",
        "params": {
          "options": "that controls the behavior and style of the AccountPicker"
        },
        "returns": "android.content.Intent: an Intent that can be used to launch the ChooseAccount activity flow",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.BatchResult": {
    "classDes": "The result of a batch operation. The result status is successful if and only if all results are successful. Individual results can be retrieved using BatchResultToken objects.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/BatchResult",
    "methods": {
      "com.google.android.gms.common.api.BatchResult.take(com.google.android.gms.common.api.BatchResultToken<R>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/BatchResult#take(com.google.android.gms.common.api.BatchResultToken<R>)",
        "methodDes": "Retrieves a result from the batch. After the result has been retrieved, it is an error to attempt to retrieve it again. It is the responsibility of the caller to release any resources associated with the returned result. Some result types may implement Releasable, in which case release() should be used to free the associated resources.",
        "params": {
          "resultToken": ""
        },
        "returns": "R: a result from the batch",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.BatchResult.getStatus()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Result#getStatus()",
        "methodDes": "Returns the status of this result. Use isSuccess() to determine whether the call was successful, and getStatusCode() to determine what the error cause was. Certain errors are due to failures that can be resolved by launching a particular intent. The resolution intent is available via getResolution().",
        "params": {},
        "returns": "com.google.android.gms.common.api.Status: the status of this result",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.Api.ApiOptions": {
    "classDes": "Base interface for API options. These are used to configure specific parameters for individual API surfaces. The default implementation has no parameters.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Api.ApiOptions",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.common.api.Batch.Builder": {
    "classDes": "Builder for Batch objects. Note that this class is not thread-safe, by design.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch.Builder",
    "methods": {
      "com.google.android.gms.common.api.Batch.Builder.build()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch.Builder#build()",
        "methodDes": "",
        "params": {},
        "returns": "com.google.android.gms.common.api.Batch: a Batch instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Batch.Builder.Builder(com.google.android.gms.common.api.GoogleApiClient)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch.Builder#public-batch.builder-googleapiclient-googleapiclient",
        "methodDes": "Builder for Batch objects.",
        "params": {
          "googleApiClient": "a GoogleApiClient instance"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Batch.Builder.add(com.google.android.gms.common.api.PendingResult<R>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Batch.Builder#add(com.google.android.gms.common.api.PendingResult<R>)",
        "methodDes": "Adds a PendingResult to the batch. The returned token can be used to retrieve the result from the BatchResult passed to the result callback.",
        "params": {
          "pendingResult": "Items to wait for completion of"
        },
        "returns": "com.google.android.gms.common.api.BatchResultToken<R>:The result token to use to get the result from the BatchResult",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.firebase.FirebaseException": {
    "classDes": "Base class for all Firebase exceptions.",
    "classUrl": "https://developers.google.com/android/reference/com/google/firebase/FirebaseException",
    "methods": {
      "com.google.firebase.FirebaseException.FirebaseException()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/firebase/FirebaseException#FirebaseException()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.firebase.FirebaseException.FirebaseException(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/firebase/FirebaseException#public-firebaseexception-string-detailmessage",
        "methodDes": "",
        "params": {
          "detailMessage": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.firebase.FirebaseException.FirebaseException(java.lang.String,java.lang.Throwable)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/firebase/FirebaseException#public-firebaseexception-string-detailmessage,-throwable-cause",
        "methodDes": "",
        "params": {
          "detailMessage": "",
          "cause": ""
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.data.DataBufferObserverSet": {
    "classDes": "Utility class for managing a set of observers and distributing their notifications. See Also DataBufferObserver.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserverSet",
    "methods": {
      "com.google.android.gms.common.data.DataBufferObserverSet.onDataChanged()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataChanged()",
        "methodDes": "Called when the overall data changes.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.clear()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserverSet#clear()",
        "methodDes": "Clears the set of observers.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.addObserver(com.google.android.gms.common.data.DataBufferObserver)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver.Observable#addObserver(com.google.android.gms.common.data.DataBufferObserver)",
        "methodDes": "Register the given observer for receiving change notifications.",
        "params": {
          "observer": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.DataBufferObserverSet()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserverSet#DataBufferObserverSet()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.onDataRangeChanged(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeChanged(int, int)",
        "methodDes": "Called when a range of items changes.",
        "params": {
          "position": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.onDataRangeMoved(int,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeMoved(int, int, int)",
        "methodDes": "Called when a range of items is moved.",
        "params": {
          "fromPosition": "",
          "toPosition": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.onDataRangeInserted(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeInserted(int, int)",
        "methodDes": "Called when a range of items is inserted.",
        "params": {
          "position": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.onDataRangeRemoved(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver#onDataRangeRemoved(int, int)",
        "methodDes": "Called when a range of items is removed.",
        "params": {
          "position": "",
          "count": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.hasObservers()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserverSet#hasObservers()",
        "methodDes": "Returns true if this has any registered observers.",
        "params": {},
        "returns": "boolean: true if this has any registered observers",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.DataBufferObserverSet.removeObserver(com.google.android.gms.common.data.DataBufferObserver)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/DataBufferObserver.Observable#removeObserver(com.google.android.gms.common.data.DataBufferObserver)",
        "methodDes": "Unregister the given observer from receiving change notifications.",
        "params": {
          "observer": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.UnsupportedApiCallException": {
    "classDes": "Exception that's thrown when an API call is not supported by the Google Play services package.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/UnsupportedApiCallException",
    "methods": {
      "com.google.android.gms.common.api.UnsupportedApiCallException.getMessage()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/UnsupportedApiCallException#getMessage()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String: the message of UnsupportedApiCallException",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.data.Freezable<T>": {
    "classDes": "Interface for data objects that support being frozen into immutable representations.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/Freezable",
    "methods": {
      "com.google.android.gms.common.data.Freezable.freeze()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/Freezable#freeze()",
        "methodDes": "Freeze a volatile representation into an immutable representation. Objects returned from this call are safe to cache. Note that the output of freeze may not be identical to the parent object, but should be equal. In other words: Freezable f1 = new Freezable(); Freezable f2 = f1.freeze(); f1 == f2 may not be true. f1.equals(f2) will be true.",
        "params": {},
        "returns": "T: A concrete implementation of the data object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.data.Freezable.isDataValid()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/data/Freezable#isDataValid()",
        "methodDes": "Check to see if this object is valid for use. If the object is still volatile, this method will indicate whether or not the object can be safely used. The output of a call to freeze() will always be valid.",
        "params": {},
        "returns": "boolean: whether or not the object is valid for use",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.Api.ApiOptions.HasOptions": {
    "classDes": "Base interface for Api.ApiOptions in Apis that have options.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Api.ApiOptions.HasOptions",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.common.images.ImageManager": {
    "classDes": "This class is used to load images from the network and handles local caching for you.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager",
    "methods": {
      "com.google.android.gms.common.images.ImageManager.create(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager#create(android.content.Context)",
        "methodDes": "Returns a new ImageManager for loading images from the network.",
        "params": {
          "context": "The context used by the ImageManager"
        },
        "returns": "com.google.android.gms.common.images.ImageManager:A new ImageManager",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.ImageManager.loadImage(android.widget.ImageView,android.net.Uri)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager#loadImage(android.widget.ImageView, android.net.Uri)",
        "methodDes": "Loads an image to display from a URI. Note that this does not support arbitrary URIs - the URI must be something that was retrieved from another call to Google Play services. The image view will be cleared out (the drawable set to null) if the image needs to be loaded asynchronously. The result (if non-null) is set on the given image view on the main thread. Note that if the ImageView used for this call is hosted in a ListAdapter (or any other class that recycles ImageView instances), then ALL calls to set the contents of that ImageView must be done via one of the calls on this ImageManager.",
        "params": {
          "imageView": "The image view to populate with the image",
          "uri": "URI to load the image data from"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.ImageManager.loadImage(android.widget.ImageView,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager#loadImage(android.widget.ImageView, int)",
        "methodDes": "Loads an image to display from the given resource ID. If you also use ImageManagers for Views hosted in a ListAdapter (or any other class that recycles Views instances), then this call should be used rather than setting the resource directly. This avoids clobbering images when views are recycled.",
        "params": {
          "imageView": "The image view to populate with the image",
          "resId": "Resource ID to use for the image"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.ImageManager.loadImage(android.widget.ImageView,android.net.Uri,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager#public-void-loadimage-imageview-imageview,-uri-uri,-int-defaultresid",
        "methodDes": "Loads an image to display from a URI, using the given resource ID as the default if no image is found for the given URI.",
        "params": {
          "imageView": "The image view to populate with the image",
          "uri": "URI to load the image data from",
          "defaultResId": "Resource ID to use by default for the image"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.ImageManager.loadImage(com.google.android.gms.common.images.ImageManager.OnImageLoadedListener,android.net.Uri)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager#public-void-loadimage-imagemanager.onimageloadedlistener-listener,-uri-uri",
        "methodDes": "Load an image to display from a URI. Note that this does not support arbitrary URIs - the URI must be something that was retrieved from another call to Google Play services.",
        "params": {
          "listener": "The listener that is called when the load is complete",
          "uri": "URI to load the image data from"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.ImageManager.loadImage(com.google.android.gms.common.images.ImageManager.OnImageLoadedListener,android.net.Uri,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager#public-void-loadimage-imagemanager.onimageloadedlistener-listener,-uri-uri,-int-defaultresid",
        "methodDes": "Load an image to display from a URI, using the given resource ID as the default if no image is found for the given URI.",
        "params": {
          "listener": "The listener that is called when the load is complete",
          "uri": "URI to load the image data from",
          "defaultResId": "Resource ID to use by default for the image"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.ResultCallback<R extends com.google.android.gms.common.api.Result>": {
    "classDes": "An interface for receiving a Result from a PendingResult as an asynchronous callback. See also ResultCallbacks and ResolvingResultCallbacks.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallback",
    "methods": {
      "com.google.android.gms.common.api.ResultCallback.onResult(R)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallback#onResult(R)",
        "methodDes": "Called when the Result is ready. It is the responsibility of the callback to release any resources associated with the result. Some result types may implement Releasable, in which case release() should be used to free the associated resources. This method is called on the main thread, unless overridden by setHandler(Handler).",
        "params": {
          "result": "The result from the API call. Never null"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.OptionalPendingResult<R extends com.google.android.gms.common.api.Result>": {
    "classDes": "OptionalPendingResults are PendingResults with additional support for non-blocking accessors. The result of an OptionalPendingResult may be available immediately. If the result is available isDone() will return true.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/OptionalPendingResult",
    "methods": {
      "com.google.android.gms.common.api.OptionalPendingResult.get()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/OptionalPendingResult#get()",
        "methodDes": "Returns the Result immediately if it is available. If the result is not available, an exception will be thrown. This method should only be called after checking that isDone() returns true. After the result has been retrieved using get(), await(), or has been delivered to the result callback, it is an error to attempt to retrieve the result again. It is the responsibility of the caller or callback receiver to release any resources associated with the returned result. Some result types may implement Releasable, in which case release() should be used to free the associated resources.",
        "params": {},
        "returns": "R:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.OptionalPendingResult.isDone()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/OptionalPendingResult#isDone()",
        "methodDes": "Returns true if the result is available immediately, false otherwise.",
        "params": {},
        "returns": "boolean: true if the result is available immediately, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.OptionalPendingResult.OptionalPendingResult()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/OptionalPendingResult#OptionalPendingResult()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.CommonStatusCodes": {
    "classDes": "Common status codes that are often shared across API surfaces.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes",
    "methods": {
      "com.google.android.gms.common.api.CommonStatusCodes.getStatusCodeString(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#getStatusCodeString(int)",
        "methodDes": "",
        "params": {
          "statusCode": ""
        },
        "returns": "java.lang.String:untranslated debug (not user-friendly!) string based on the current status code",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.api.CommonStatusCodes.RESOLUTION_REQUIRED": {
        "des": "Completing the operation requires some form of resolution. A resolution will be available to be started with  startResolutionForResult(Activity, int). If the result returned is RESULT_OK, then further attempts should either complete or continue on to the next issue that needs to be resolved.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#RESOLUTION_REQUIRED",
        "value": "6"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.API_NOT_CONNECTED": {
        "des": "The client attempted to call a method from an API that failed to connect.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#API_NOT_CONNECTED",
        "value": "17"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.SERVICE_DISABLED": {
        "des": "The installed version of Google Play services has been disabled on this device. The calling activity should pass this error code to  getErrorDialog(Activity, int, int) to get a localized error dialog that will resolve the error when shown.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#SERVICE_DISABLED",
        "value": "3"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.INVALID_ACCOUNT": {
        "des": "The client attempted to connect to the service with an invalid account name specified.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#INVALID_ACCOUNT",
        "value": "5"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.CANCELED": {
        "des": "The result was canceled either due to client disconnect or cancel().",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#CANCELED",
        "value": "16"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.ERROR": {
        "des": "The operation failed with no more detailed information.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#NETWORK_ERROR",
        "value": "13"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.SIGN_IN_REQUIRED": {
        "des": "The client attempted to connect to the service but the user is not signed in. The client may choose to continue without using the API. Alternately, if hasResolution() returns true the client may call  startResolutionForResult(Activity, int) to prompt the user to sign in. After the sign in activity returns with RESULT_OK further attempts should succeed.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#SIGN_IN_REQUIRED",
        "value": "4"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.SUCCESS_CACHE": {
        "des": "The operation was successful, but was used the device's cache. If this is a write, the data will be written when the device is online; errors will be written to the logs. If this is a read, the data was read from a device cache and may be stale.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#SUCCESS_CACHE",
        "value": "-1"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.SERVICE_VERSION_UPDATE_REQUIRED": {
        "des": "The installed version of Google Play services is out of date. The calling activity should pass this error code to  getErrorDialog(Activity, int, int) to get a localized error dialog that will resolve the error when shown.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#SERVICE_VERSION_UPDATE_REQUIRED",
        "value": "2"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.SUCCESS": {
        "des": "The operation was successful.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#SUCCESS",
        "value": "0"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.INTERNAL_ERROR": {
        "des": "An internal error occurred. Retrying should resolve the problem.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#INTERNAL_ERROR",
        "value": "8"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.DEVELOPER_ERROR": {
        "des": "The application is misconfigured. This error is not recoverable and will be treated as fatal. The developer should look at the logs after this to determine more actionable information.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#DEVELOPER_ERROR",
        "value": "10"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.INTERRUPTED": {
        "des": "A blocking call was interrupted while waiting and did not run to completion.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#INTERRUPTED",
        "value": "14"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.NETWORK_ERROR": {
        "des": "A network error occurred. Retrying should resolve the problem.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#NETWORK_ERROR",
        "value": "7"
      },
      "com.google.android.gms.common.api.CommonStatusCodes.TIMEOUT": {
        "des": "Timed out while awaiting the result.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/CommonStatusCodes#TIMEOUT",
        "value": "15"
      }
    }
  },
  "com.google.android.gms.common.images.ImageManager.OnImageLoadedListener": {
    "classDes": "Listener interface for handling when the image for a particular URI has been loaded.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager.OnImageLoadedListener",
    "methods": {
      "com.google.android.gms.common.images.ImageManager.OnImageLoadedListener.onImageLoaded(android.net.Uri,android.graphics.drawable.Drawable,boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/ImageManager.OnImageLoadedListener#onImageLoaded(android.net.Uri, android.graphics.drawable.Drawable, boolean)",
        "methodDes": "Listener method invoked when an image has been loaded.",
        "params": {
          "uri": "The URI of the requested image",
          "drawable": "Drawable containing the image",
          "isRequestedDrawable": "True if this drawable was loaded from the provided URI, or false if this drawable is a placeholder image instead"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder": {
    "classDes": "The builder for creating an instance of the AccountPicker.AccountChooserOptions.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder",
    "methods": {
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.setSelectedAccount(android.accounts.Account)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#setSelectedAccount(android.accounts.Account)",
        "methodDes": "Sets the specified account to selected in the Account Picker if this account is shown there.",
        "params": {
          "selectedAccount": ""
        },
        "returns": "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.setAllowableAccounts(java.util.List<android.accounts.Account>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#setAllowableAccounts(java.util.List<android.accounts.Account>)",
        "methodDes": "A list of Accounts that limit the accounts that are shown in the Account Picker to those in this list.",
        "params": {
          "allowableAccounts": ""
        },
        "returns": "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.setTitleOverrideText(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#setTitleOverrideText(java.lang.String)",
        "methodDes": "Overrides the default title of the Account Picker.",
        "params": {
          "titleOverrideText": ""
        },
        "returns": "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.setAlwaysShowAccountPicker(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#setAlwaysShowAccountPicker(boolean)",
        "methodDes": "If true then shows the Account Picker even if there is just one account to choose from.",
        "params": {
          "alwaysShowAccountPicker": ""
        },
        "returns": "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.build()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#build()",
        "methodDes": "Builds an instance of AccountPicker.AccountChooserOptions.",
        "params": {},
        "returns": "com.google.android.gms.common.AccountPicker.AccountChooserOptions: a AccountChooserOptions instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.setOptionsForAddingAccount(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#setOptionsForAddingAccount(android.os.Bundle)",
        "methodDes": "Sets the options to be passed as the addAccountOptions parameter in AccountManager#addAccount().",
        "params": {
          "options": ""
        },
        "returns": "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder: the Builder instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.Builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#public-accountpicker.accountchooseroptions.builder",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder.setAllowableAccountsTypes(java.util.List<java.lang.String>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/AccountPicker.AccountChooserOptions.Builder#setAllowableAccountsTypes(java.util.List<java.lang.String>)",
        "methodDes": "Sets the type of allowed types of accounts. If supplied, it limits the accounts to those that match the types in this list. This list is also used to filter the allowable account types if add account is selected.",
        "params": {
          "allowableAccountTypes": ""
        },
        "returns": "com.google.android.gms.common.AccountPicker.AccountChooserOptions.Builder: the Builder instance",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.images.Size": {
    "classDes": "Immutable class for describing width and height dimensions in pixels.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size",
    "methods": {
      "com.google.android.gms.common.images.Size.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int: a hash code value for this object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.Size.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size#equals(java.lang.Object)",
        "methodDes": "Check if this size is equal to another size. Two sizes are equal if and only if both their widths and heights are equal. A size object is never equal to any other type of object.",
        "params": {
          "obj": "the reference object with which to compare"
        },
        "returns": "boolean:true if the objects were equal, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.Size.getHeight()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size#getHeight()",
        "methodDes": "Get the height of the size (in pixels).",
        "params": {},
        "returns": "int:height",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.Size.Size(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size#Size(int, int)",
        "methodDes": "Create a new immutable Size instance.",
        "params": {
          "width": "The width of the size, in pixels",
          "height": "The height of the size, in pixels"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.Size.getWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size#getWidth()",
        "methodDes": "Get the width of the size (in pixels).",
        "params": {},
        "returns": "int:width",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.Size.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size#toString()",
        "methodDes": "Return the size represented as a string with the format WxH.",
        "params": {},
        "returns": "java.lang.String:string representation of the size",
        "Exceptions": {}
      },
      "com.google.android.gms.common.images.Size.parseSize(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/images/Size#parseSize(java.lang.String)",
        "methodDes": "Parses the specified string as a size value.",
        "params": {
          "string": "the string representation of a size value"
        },
        "returns": "com.google.android.gms.common.images.Size:the size value represented by string",
        "Exceptions": {
          "java.lang.NumberFormatException": "if string cannot be parsed as a size value",
          "java.lang.NullPointerException": "if string was null"
        }
      }
    },
    "fields": {}
  },
  "com.google.android.gms.security.ProviderInstaller": {
    "classDes": "A utility class for installing a dynamically updatable Provider to replace the platform default provider.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller",
    "methods": {
      "com.google.android.gms.security.ProviderInstaller.installIfNeeded(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller#installIfNeeded(android.content.Context)",
        "methodDes": "Installs the dynamically updatable security provider, if it's not already installed.",
        "params": {
          "context": ""
        },
        "returns": "void",
        "Exceptions": {
          "com.google.android.gms.common.GooglePlayServicesRepairableException": "",
          "com.google.android.gms.common.GooglePlayServicesNotAvailableException": ""
        }
      },
      "com.google.android.gms.security.ProviderInstaller.ProviderInstaller()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller#ProviderInstaller()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.security.ProviderInstaller.installIfNeededAsync(android.content.Context,com.google.android.gms.security.ProviderInstaller.ProviderInstallListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller#installIfNeededAsync(android.content.Context, com.google.android.gms.security.ProviderInstaller.ProviderInstallListener)",
        "methodDes": "Asynchronously installs the dynamically updatable security provider, if it's not already installed. This method must be called on the UI thread.",
        "params": {
          "context": "",
          "listener": "called when the installation completes"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.security.ProviderInstaller.PROVIDER_NAME": {
        "des": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller#PROVIDER_NAME",
        "value": "GmsCore_OpenSSL"
      }
    }
  },
  "com.google.android.gms.common.api.Response<T extends com.google.android.gms.common.api.Result>": {
    "classDes": "Represents the successful result of invoking an API method in Google Play services using a subclass of GoogleApi. Wraps a instance of a Result.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Response",
    "methods": {
      "com.google.android.gms.common.api.Response.Response(T)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Response#Response(T)",
        "methodDes": "",
        "params": {
          "result": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Response.Response()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Response#Response()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Response.getResult()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Response#getResult()",
        "methodDes": "",
        "params": {},
        "returns": "T:",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Response.setResult(T)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Response#setResult(T)",
        "methodDes": "",
        "params": {
          "result": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.security.ProviderInstaller.ProviderInstallListener": {
    "classDes": "Callback for notification of the result of provider installation.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller.ProviderInstallListener",
    "methods": {
      "com.google.android.gms.security.ProviderInstaller.ProviderInstallListener.onProviderInstalled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller.ProviderInstallListener#onProviderInstalled()",
        "methodDes": "Called when installing the provider succeeds. This method is always called on the UI thread.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.security.ProviderInstaller.ProviderInstallListener.onProviderInstallFailed(int,android.content.Intent)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/security/ProviderInstaller.ProviderInstallListener#onProviderInstallFailed(int, android.content.Intent)",
        "methodDes": "Called when installing the provider fails. This method is always called on the UI thread. Implementers may use errorCode with the standard UI elements provided by GoogleApiAvailability; or recoveryIntent to implement custom UI.",
        "params": {
          "errorCode": "error code for the failure, for use with showErrorDialogFragment(Activity, int, int) or showErrorNotification(Context, ConnectionResult)",
          "recoveryIntent": "if non-null, an intent that can be used to install or update Google Play Services such that the provider can be installed"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.TransformedResult<R extends com.google.android.gms.common.api.Result>": {
    "classDes": "Represents a pending result that has been transformed by one or more subsequent API calls. The result can either be consumed by callbacks set using andFinally(ResultCallbacks ) or used as input to another API call using then(ResultTransform ). It is an error to call both of these methods, or one of them multiple times, on a single instance. See Also then(ResultTransform ).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/TransformedResult",
    "methods": {
      "com.google.android.gms.common.api.TransformedResult.andFinally(com.google.android.gms.common.api.ResultCallbacks<? super R>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/TransformedResult#andFinally(com.google.android.gms.common.api.ResultCallbacks<? super R>)",
        "methodDes": "Requests that the supplied callbacks are called when the result is ready.",
        "params": {
          "callbacks": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.TransformedResult.TransformedResult()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/TransformedResult#TransformedResult()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.TransformedResult.then(com.google.android.gms.common.api.ResultTransform<? super R,? extends S>)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/PendingResult#then(com.google.android.gms.common.api.ResultTransform<? super R, ? extends S>)",
        "methodDes": "Transforms the result by making another API call. If the result is successful, then onSuccess(R) will be called to make the additional API call that yields the transformed result. If the result is a failure, then onFailure(Status) will be called to (optionally) allow modification of failure status. If the result implements Releasable, then release() will be called once the transform has been applied. for more details and sample code.",
        "params": {
          "transform": ""
        },
        "returns": "com.google.android.gms.common.api.TransformedResult<S>: Transforms result",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.common.api.Status": {
    "classDes": "Represents the results of work.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status",
    "methods": {
      "com.google.android.gms.common.api.Status.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int: a hash code value for this object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.hasResolution()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#hasResolution()",
        "methodDes": "Returns true if calling startResolutionForResult(Activity, int) will start any intents requiring user interaction.",
        "params": {},
        "returns": "boolean:true if there is a resolution that can be started",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.Status(int,java.lang.String,android.app.PendingIntent)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#Status(int, java.lang.String, android.app.PendingIntent)",
        "methodDes": "Creates a representation of the status resulting from a GoogleApiClient operation.",
        "params": {
          "statusCode": "The status code",
          "statusMessage": "The message associated with this status, or null",
          "pendingIntent": "A pending intent that will resolve the issue when started, or null"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.getResolution()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#getResolution()",
        "methodDes": "A pending intent to resolve the failure. This intent can be started with startIntentSenderForResult(IntentSender, int, Intent, int, int, int) to present UI to solve the issue.",
        "params": {},
        "returns": "android.app.PendingIntent:The pending intent to resolve the failure",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.Status(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#Status(int)",
        "methodDes": "Creates a representation of the status resulting from a GoogleApiClient operation.",
        "params": {
          "statusCode": "The status code"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "out": "",
          "flags": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.Status(int,java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#Status(int, java.lang.String)",
        "methodDes": "Creates a representation of the status resulting from a GoogleApiClient operation.",
        "params": {
          "statusCode": "The status code",
          "statusMessage": "The message associated with this status, or null"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.getStatusMessage()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#getStatusMessage()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String: the message of status",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "obj": "the reference object with which to compare"
        },
        "returns": "boolean: true if this object is the same as the obj argument; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.isInterrupted()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#isInterrupted()",
        "methodDes": "Returns true if the operation was interrupted.",
        "params": {},
        "returns": "boolean: true if the operation was interrupted",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.getStatus()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Result#getStatus()",
        "methodDes": "Returns the status of this result. Use isSuccess() to determine whether the call was successful, and getStatusCode() to determine what the error cause was. Certain errors are due to failures that can be resolved by launching a particular intent. The resolution intent is available via getResolution().",
        "params": {},
        "returns": "com.google.android.gms.common.api.Status: the status of this result",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.getStatusCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#getStatusCode()",
        "methodDes": "Indicates the status of the operation.",
        "params": {},
        "returns": "int:Status code resulting from the operation. The value is one of the constants in CommonStatusCodes or specific to the APIs added to the GoogleApiClient",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.startResolutionForResult(android.app.Activity,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#startResolutionForResult(android.app.Activity, int)",
        "methodDes": "Resolves an error by starting any intents requiring user interaction. See SIGN_IN_REQUIRED, and RESOLUTION_REQUIRED.",
        "params": {
          "activity": "An Activity context to use to resolve the issue. The activity's onActivityResult method will be invoked after the user is done. If the resultCode is RESULT_OK, the application should try to connect again",
          "requestCode": "The request code to pass to onActivityResult"
        },
        "returns": "void",
        "Exceptions": {
          "android.content.IntentSender.SendIntentException": "If the resolution intent has been canceled or is no longer able to execute the request"
        }
      },
      "com.google.android.gms.common.api.Status.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String: a string representation of the object",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.isCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#isCanceled()",
        "methodDes": "Returns true if the operation was canceled.",
        "params": {},
        "returns": "boolean: true if the operation was canceled",
        "Exceptions": {}
      },
      "com.google.android.gms.common.api.Status.isSuccess()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#isSuccess()",
        "methodDes": "Returns true if the operation was successful.",
        "params": {},
        "returns": "boolean:true if the operation was successful, false if there was an error",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.api.Status.CREATOR": {
        "des": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status#CREATOR",
        "value": ""
      }
    }
  },
  "com.google.android.gms.common.GoogleApiAvailability": {
    "classDes": "Helper class for verifying that the Google Play services APK is available and up-to-date on this device.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability",
    "methods": {
      "com.google.android.gms.common.GoogleApiAvailability.isGooglePlayServicesAvailable(android.content.Context,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#isGooglePlayServicesAvailable(android.content.Context, int)",
        "methodDes": "Verifies that Google Play services is installed and enabled on this device, and that the version installed on this device is no older than the one required by this client or the version is not older than the one specified in minApkVersion.",
        "params": {
          "context": "",
          "minApkVersion": ""
        },
        "returns": "int:status code indicating whether there was an error. Can be one of following in ConnectionResult: SUCCESS, SERVICE_MISSING, SERVICE_UPDATING, SERVICE_VERSION_UPDATE_REQUIRED, SERVICE_DISABLED, SERVICE_INVALID",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.isUserResolvableError(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#isUserResolvableError(int)",
        "methodDes": "Determines whether an error can be resolved via user action. If true, proceed by calling getErrorDialog(Activity, int, int) and showing the dialog.",
        "params": {
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context), or returned to your application via #onConnectionFailed(ConnectionResult)"
        },
        "returns": "boolean:true if the error is resolvable with getErrorDialog(Activity, int, int)",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.showErrorDialogFragment(android.app.Activity,int,int,android.content.DialogInterface.OnCancelListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#showErrorDialogFragment(android.app.Activity, int, int, android.content.DialogInterface.OnCancelListener)",
        "methodDes": "Displays a DialogFragment for an error code returned by isGooglePlayServicesAvailable(Context).",
        "params": {
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then this does nothing",
          "requestCode": "The requestCode given when calling startActivityForResult",
          "cancelListener": "The DialogInterface.OnCancelListener to invoke if the dialog is canceled"
        },
        "returns": "boolean:true if the dialog is shown, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.makeGooglePlayServicesAvailable(android.app.Activity)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#makeGooglePlayServicesAvailable(android.app.Activity)",
        "methodDes": "Attempts to make Google Play services available on this device. If Play Services is already available, the returned Task may complete immediately. If it is necessary to display UI in order to complete this request (e.g. sending the user to the Google Play store) the passed Activity will be used to display this UI. It is recommended to call this method from onCreate(Bundle). If the passed Activity completes before the returned Task completes, the Task will fail with a CancellationException. This method must be called from the main thread.",
        "params": {
          "activity": ""
        },
        "returns": "com.google.android.gms.tasks.Task<java.lang.Void>:A Task. If this Task completes without throwing an exception, Play Services is available on this device",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.getErrorResolutionPendingIntent(android.content.Context,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#getErrorResolutionPendingIntent(android.content.Context, int, int)",
        "methodDes": "Returns a PendingIntent to address the provided errorCode. It will direct the user to either the Play Store if Google Play services is out of date or missing, or system settings if Google Play services is disabled on the device.",
        "params": {
          "context": "parent context for creating the PendingIntent",
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then null is returned",
          "requestCode": "The requestCode given when calling startActivityForResult"
        },
        "returns": "android.app.PendingIntent: a PendingIntent to address the provided connection failure",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.isGooglePlayServicesAvailable(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#isGooglePlayServicesAvailable(android.content.Context)",
        "methodDes": "Verifies that Google Play services is installed and enabled on this device, and that the version installed on this device is no older than the one required by this client.",
        "params": {
          "context": ""
        },
        "returns": "int:status code indicating whether there was an error. Can be one of following in ConnectionResult: SUCCESS, SERVICE_MISSING, SERVICE_UPDATING, SERVICE_VERSION_UPDATE_REQUIRED, SERVICE_DISABLED, SERVICE_INVALID",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.getErrorDialog(android.app.Activity,int,int,android.content.DialogInterface.OnCancelListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#getErrorDialog(android.app.Activity, int, int, android.content.DialogInterface.OnCancelListener)",
        "methodDes": "Returns a dialog to address the provided errorCode. The returned dialog displays a localized message about the error and upon user confirmation (by tapping on dialog) will direct them to the Play Store if Google Play services is out of date or missing, or to system settings if Google Play services is disabled on the device.",
        "params": {
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then null is returned",
          "requestCode": "The requestCode given when calling startActivityForResult",
          "cancelListener": "The DialogInterface.OnCancelListener to invoke if the dialog is canceled"
        },
        "returns": "android.app.Dialog: a dialog to address the provided errorCode",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.getErrorDialog(android.app.Activity,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#getErrorDialog(android.app.Activity, int, int)",
        "methodDes": "Returns a dialog to address the provided errorCode. The returned dialog displays a localized message about the error and upon user confirmation (by tapping on dialog) will direct them to the Play Store if Google Play services is out of date or missing, or to system settings if Google Play services is disabled on the device.",
        "params": {
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then null is returned",
          "requestCode": "The requestCode given when calling startActivityForResult"
        },
        "returns": "android.app.Dialog: a dialog to address the provided errorCode",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.showErrorDialogFragment(android.app.Activity,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#showErrorDialogFragment(android.app.Activity, int, int)",
        "methodDes": "Displays a DialogFragment for an error code returned by isGooglePlayServicesAvailable(Context).",
        "params": {
          "activity": "parent activity for creating the dialog, also used for identifying language to display dialog in",
          "errorCode": "error code returned by isGooglePlayServicesAvailable(Context) call. If errorCode is SUCCESS then this does nothing",
          "requestCode": "The requestCode given when calling startActivityForResult"
        },
        "returns": "boolean:true if the dialog is shown, false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.showErrorNotification(android.content.Context,com.google.android.gms.common.ConnectionResult)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#showErrorNotification(android.content.Context, com.google.android.gms.common.ConnectionResult)",
        "methodDes": "Displays a notification for a connection failure, if it is resolvable by the user.",
        "params": {
          "context": "The calling context used to display the notification",
          "result": "The connection failure. If successful or the error is not resolvable by the user, no notification is shown"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.checkApiAvailability(com.google.android.gms.common.api.GoogleApi<?>,com.google.android.gms.common.api.GoogleApi<?>...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#checkApiAvailability(com.google.android.gms.common.api.GoogleApi<?>, com.google.android.gms.common.api.GoogleApi<?>...)",
        "methodDes": "Checks the availability of the specified APIs. If at least one of the APIs is unavailable, the task will fail with a AvailabilityException, which can be queried for individual API availability.",
        "params": {
          "api": "",
          "apis": ""
        },
        "returns": "com.google.android.gms.tasks.Task<java.lang.Void>: the task",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.checkApiAvailability(com.google.android.gms.common.api.HasApiKey<?>,com.google.android.gms.common.api.HasApiKey<?>...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#public-taskvoid-checkapiavailability-hasapikey-api,-hasapikey...-apis",
        "methodDes": "Checks the availability of the specified APIs.",
        "params": {
          "api": "",
          "apis": ""
        },
        "returns": "com.google.android.gms.tasks.Task<java.lang.Void>: the task",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.getInstance()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#getInstance()",
        "methodDes": "Returns the singleton instance of GoogleApiAvailability.",
        "params": {},
        "returns": "com.google.android.gms.common.GoogleApiAvailability: a GoogleApiAvailability instance",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.setDefaultNotificationChannelId(android.content.Context,java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#setDefaultNotificationChannelId(android.content.Context, java.lang.String)",
        "methodDes": "Overrides the default notification channel for Google Play services availability notifications. It is required to register a NotificationChannel with the notificationChannelId in NotificationManager before calling this method. If the NotificationChannel is not registered AND the platform is at least Android O, then a NullPointerException will be thrown.",
        "params": {
          "context": "The calling context for setting the notification channel",
          "notificationChannelId": "The notification channel for Google Play services availability notifications"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.common.GoogleApiAvailability.getErrorString(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#getErrorString(int)",
        "methodDes": "Returns a human-readable string of the error code returned from isGooglePlayServicesAvailable(Context).",
        "params": {
          "errorCode": ""
        },
        "returns": "java.lang.String: a human-readable string of the error code returned from isGooglePlayServicesAvailable(Context)",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.common.GoogleApiAvailability.GOOGLE_PLAY_SERVICES_PACKAGE": {
        "des": "Package name for Google Play services.",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#GOOGLE_PLAY_SERVICES_PACKAGE",
        "value": "com.google.android.gms"
      },
      "com.google.android.gms.common.GoogleApiAvailability.GOOGLE_PLAY_SERVICES_VERSION_CODE": {
        "des": "Google Play services client library version (declared in library's AndroidManifest.xml android:versionCode).",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/common/GoogleApiAvailability#GOOGLE_PLAY_SERVICES_VERSION_CODE",
        "value": ""
      }
    }
  }
}