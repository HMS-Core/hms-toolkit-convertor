{
  "com.google.android.gms.maps.CameraUpdateFactory": {
    "classDes": "A class containing methods for creating CameraUpdate objects that change a map\u0027s camera. To modify the map\u0027s camera, call animateCamera(CameraUpdate), animateCamera(CameraUpdate, GoogleMap.CancelableCallback) or moveCamera(CameraUpdate), using a CameraUpdate object created with this class. For example, to zoom in on a map, you can use the following code: GoogleMap map \u003d ...; map.animateCamera(CameraUpdateFactory.zoomIn()); Prior to using any methods from this class, you must do one of the following to ensure that this class is initialized: Wait for a GoogleMap to become available from a MapFragment or MapView that you have added to your application. You can obtain the GoogleMap instance by calling getMapAsync() and waiting for the onMapReady(GoogleMap map) callback. Call initialize(Context). As long as a GooglePlayServicesNotAvailableException isn\u0027t thrown, this class will be correctly initialized. Developer Guide For more information, read the Camera and View developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory",
    "methods": {
      "com.google.android.gms.maps.CameraUpdateFactory.newCameraPosition(com.google.android.gms.maps.model.CameraPosition)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#newCameraPosition(com.google.android.gms.maps.model.CameraPosition)",
        "methodDes": "Returns a CameraUpdate that moves the camera to a specified CameraPosition. In effect, this creates a transformation from the CameraPosition object\u0027s latitude, longitude, zoom level, bearing and tilt.",
        "params": {
          "position": ""
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.newLatLng(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#newLatLng(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Returns a CameraUpdate that moves the center of the screen to a latitude and longitude specified by a LatLng object. This centers the camera on the LatLng object.",
        "params": {
          "latLng": "a LatLng object containing the desired latitude and longitude"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.newLatLngBounds(com.google.android.gms.maps.model.LatLngBounds,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#newLatLngBounds(com.google.android.gms.maps.model.LatLngBounds,%20int)",
        "methodDes": "Returns a CameraUpdate that transforms the camera such that the specified latitude/longitude bounds are centered on screen within a bounding box of specified dimensions at the greatest possible zoom level. You can specify additional padding, to further restrict the size of the bounding box. The returned CameraUpdate has a bearing of 0 and a tilt of 0. Unlike newLatLngBounds(LatLngBounds, int), you can use the CameraUpdate returned by this method to change the camera prior to the map\u0027s the layout phase, because the arguments specify the desired size of the bounding box.",
        "params": {
          "bounds": "the region to fit in the bounding box",
          "padding": "additional size restriction (in px) of the bounding box"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.newLatLngBounds(com.google.android.gms.maps.model.LatLngBounds,int,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#public-static-cameraupdate-newlatlngbounds-latlngbounds-bounds,-int-width,-int-height,-int-padding",
        "methodDes": "Returns a CameraUpdate that transforms the camera such that the specified latitude/longitude bounds are centered on screen within a bounding box of specified dimensions at the greatest possible zoom level. You can specify additional padding, to further restrict the size of the bounding box. The returned CameraUpdate has a bearing of 0 and a tilt of 0. Unlike newLatLngBounds(LatLngBounds, int), you can use the CameraUpdate returned by this method to change the camera prior to the map\u0027s the layout phase, because the arguments specify the desired size of the bounding box.",
        "params": {
          "bounds": "the region to fit in the bounding box",
          "width": "bounding box width in pixels (px)",
          "height": "bounding box height in pixels (px)",
          "padding": "additional size restriction (in px) of the bounding box"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.newLatLngZoom(com.google.android.gms.maps.model.LatLng,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#newLatLngZoom(com.google.android.gms.maps.model.LatLng, float)",
        "methodDes": "Returns a CameraUpdate that moves the center of the screen to a latitude and longitude specified by a LatLng object, and moves to the given zoom level.",
        "params": {
          "latLng": "a LatLng object containing the desired latitude and longitude",
          "zoom": "the desired zoom level, in the range of 2.0 to 21.0. Values below this range are set to 2.0, and values above it are set to 21.0. Increase the value to zoom in. Not all areas have tiles at the largest zoom levels"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.scrollBy(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#scrollBy(float, float)",
        "methodDes": "Returns a CameraUpdate that scrolls the camera over the map, shifting the center of view by the specified number of pixels in the x and y directions. Examples: If xPixel \u003d 5 and yPixel \u003d 0, the system scrolls right by moving the camera so that the map appears to have shifted 5 pixels to the left. If xPixel \u003d 0 and yPixel \u003d 5, the system scrolls down by moving the camera so that the map appears to have shifted 5 pixels upwards. The scrolling is relative to the camera\u0027s current orientation. For example, if the camera is bearing 90 degrees, then east is \"up\" and scrolling right will move the camera south.",
        "params": {
          "xPixel": "the number of pixels to scroll horizontally. A positive value moves the camera to the right, with respect to its current orientation. A negative value moves the camera to the left, with respect to its current orientation",
          "yPixel": "the number of pixels to scroll vertically. A positive value moves the camera downwards, with respect to its current orientation. A negative value moves the camera upwards, with respect to its current orientation"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.zoomBy(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#zoomBy(float)",
        "methodDes": "Returns a CameraUpdate that shifts the zoom level of the current camera viewpoint. This method is different to zoomTo(float) in that zoom is relative to the current camera.",
        "params": {
          "amount": "amount to change the zoom level. Positive values indicate zooming closer to the surface of the Earth while negative values indicate zooming away from the surface of the Earth"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.zoomBy(float,android.graphics.Point)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#public-static-cameraupdate-zoomby-float-amount,-point-focus",
        "methodDes": "Returns a CameraUpdate that shifts the zoom level of the current camera viewpoint. This method is different to zoomTo(float) in that zoom is relative to the current camera.",
        "params": {
          "amount": "amount to change the zoom level. Positive values indicate zooming closer to the surface of the Earth while negative values indicate zooming away from the surface of the Earth",
          "focus": "pixel location on the screen that is to remain fixed after the zooming process. The lat/long that was at that pixel location before the camera move will remain the same after the camera has moved"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.zoomIn()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#zoomIn()",
        "methodDes": "Returns a CameraUpdate that zooms in on the map by moving the viewpoint\u0027s height closer to the Earth\u0027s surface. The zoom increment is 1.0.",
        "params": {},
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.zoomOut()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#zoomOut()",
        "methodDes": "Returns a CameraUpdate that zooms out on the map by moving the viewpoint\u0027s height farther away from the Earth\u0027s surface. The zoom increment is -1.0.",
        "params": {},
        "returns": "com.google.android.gms.maps.CameraUpdate:a CameraUpdate containing the transformation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.CameraUpdateFactory.zoomTo(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory#zoomTo(float)",
        "methodDes": "Returns a CameraUpdate that moves the camera viewpoint to a particular zoom level.",
        "params": {
          "zoom": "the desired zoom level, in the range of 2.0 to 21.0. Values below this range are set to 2.0, and values above it are set to 21.0. Increase the value to zoom in. Not all areas have tiles at the largest zoom levels"
        },
        "returns": "com.google.android.gms.maps.CameraUpdate:the CameraUpdate",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnCameraIdleListener": {
    "classDes": "Callback interface for when camera movement has ended.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraIdleListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnCameraIdleListener.onCameraIdle()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraIdleListener#onCameraIdle()",
        "methodDes": "Called when camera movement has ended, there are no pending animations and the user has stopped interacting with the map. This is called on the Android UI thread.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.SupportStreetViewPanoramaFragment": {
    "classDes": "A StreetViewPanorama component in an app. This fragment is the simplest way to place a Street View panorama in an application. It\u0027s a wrapper around a view of a panorama to automatically handle the necessary life cycle needs. Being a fragment, this component can be added to an activity\u0027s layout file simply with the XML below. \u003cfragment class\u003d\"com.google.android.gms.maps.SupportStreetViewPanoramaFragment\" android:layout_width\u003d\"match_parent\" android:layout_height\u003d\"match_parent\"/\u003eA StreetViewPanorama must be acquired using getStreetViewPanoramaAsync(OnStreetViewPanoramaReadyCallback). The SupportStreetViewPanoramaFragment automatically initializes the Street View system and the view. A view can be removed when the SupportStreetViewPanoramaFragment\u0027s onDestroyView() method is called and the useViewLifecycleInFragment(boolean) option is set. When this happens the SupportStreetViewPanoramaFragment is no longer valid until the view is recreated again later when MapFragment\u0027s onCreateView(LayoutInflater, ViewGroup, Bundle) method is called. Any object obtained from the StreetViewPanorama is associated with the view. It\u0027s important to not hold on to objects beyond the view\u0027s life. Otherwise it will cause a memory leak as the view cannot be released. Use this class only if you are targeting API 12 and above. Otherwise, use SupportStreetViewPanoramaFragment. Note: The Google Maps Android SDK does not support multiple SupportStreetViewPanoramaFragment objects in one activity.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment",
    "methods": {
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.SupportStreetViewPanoramaFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#SupportStreetViewPanoramaFragment()",
        "methodDes": "Creates a streetview panorama fragment. This constructor is public only for use by an inflater. Use newInstance() to create a SupportStreetViewPanoramaFragment programmatically.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.getStreetViewPanoramaAsync(com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#getStreetViewPanoramaAsync(com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback)",
        "methodDes": "Sets a callback object which will be triggered when the StreetViewPanorama instance is ready to be used. Note that: In the case where Google Play services is not installed on the user\u0027s device, the callback will not be triggered until the user installs it. The callback will be executed in the main thread. The StreetViewPanorama object provided by the callback is non-null.",
        "params": {
          "callback": "The callback object that will be triggered when the panorama is ready to be used"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.newInstance()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#newInstance()",
        "methodDes": "Creates a streetview panorama fragment, using default options.",
        "params": {},
        "returns": "com.google.android.gms.maps.SupportStreetViewPanoramaFragment:the SupportStreetViewPanoramaFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.newInstance(com.google.android.gms.maps.StreetViewPanoramaOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#newInstance(com.google.android.gms.maps.StreetViewPanoramaOptions)",
        "methodDes": "Creates a streetview panorama fragment with the given options.",
        "params": {
          "instance": ""
        },
        "returns": "com.google.android.gms.maps.SupportStreetViewPanoramaFragment:the SupportStreetViewPanoramaFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onActivityCreated(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onActivityCreated(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "created": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onAttach(android.app.Activity)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onAttach(android.app.Activity)",
        "methodDes": "",
        "params": {
          "attach": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onCreate(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onCreate(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "create": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)",
        "methodDes": "",
        "params": {
          "inflater": "",
          "group": "",
          "bundle": ""
        },
        "returns": "android.view.View:the View",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onDestroy()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onDestroy()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onDestroyView()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onDestroyView()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onInflate(android.app.Activity, android.util.AttributeSet, android.os.Bundle)",
        "methodDes": "Parse attributes during inflation from a view hierarchy into the arguments we handle.",
        "params": {
          "activity": "",
          "set": "",
          "bundle": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onLowMemory()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onLowMemory()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onPause()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onPause()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onResume()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onResume()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onSaveInstanceState(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onSaveInstanceState(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "state": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onStart()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onStart()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.onStop()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#onStop()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportStreetViewPanoramaFragment.setArguments(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportStreetViewPanoramaFragment#setArguments(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "arguments": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.PatternItem": {
    "classDes": "Immutable item used in the stroke pattern for a Polyline or the outline of a Polygon or Circle.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem",
    "methods": {
      "com.google.android.gms.maps.model.PatternItem.PatternItem(int,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "int": "",
          "float": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PatternItem.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PatternItem.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PatternItem.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PatternItem.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener": {
    "classDes": "Callback interface for click/tap events on a marker\u0027s info window.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnInfoWindowClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener.onInfoWindowClick(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnInfoWindowClickListener#onInfoWindowClick(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Called when the marker\u0027s info window is clicked. This is called on the Android UI thread.",
        "params": {
          "marker": "The marker of the info window that was clicked"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.UiSettings": {
    "classDes": "Settings for the user interface of a GoogleMap. To obtain this interface, call getUiSettings().",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings",
    "methods": {
      "com.google.android.gms.maps.UiSettings.isCompassEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isCompassEnabled()",
        "methodDes": "Gets whether the compass is enabled/disabled.",
        "params": {},
        "returns": "boolean:true if the compass is enabled; false if the compass is disabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isIndoorLevelPickerEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isIndoorLevelPickerEnabled()",
        "methodDes": "Gets whether the indoor level picker is enabled/disabled. That is, whether the level picker will appear when a building with indoor maps is focused.",
        "params": {},
        "returns": "boolean:true if the level picker is enabled; false if the level picker is disabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isMapToolbarEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isMapToolbarEnabled()",
        "methodDes": "Gets whether the Map Toolbar is enabled/disabled.",
        "params": {},
        "returns": "boolean:true if the Map Toolbar is enabled; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isMyLocationButtonEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isMyLocationButtonEnabled()",
        "methodDes": "Gets whether the my-location button is enabled/disabled.",
        "params": {},
        "returns": "boolean:true if the my-location button is enabled; false if the my-location button is disabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isRotateGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isRotateGesturesEnabled()",
        "methodDes": "Gets whether rotate gestures are enabled/disabled.",
        "params": {},
        "returns": "boolean:true if rotate gestures are enabled; false if rotate gestures are disabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isScrollGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isScrollGesturesEnabled()",
        "methodDes": "Gets whether scroll gestures are enabled/disabled.",
        "params": {},
        "returns": "boolean:true if scroll gestures are enabled; false if scroll gestures are disabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isScrollGesturesEnabledDuringRotateOrZoom()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isScrollGesturesEnabledDuringRotateOrZoom()",
        "methodDes": "Gets whether scroll gestures are enabled/disabled during rotation and zoom gestures.",
        "params": {},
        "returns": "boolean:true if scroll gestures are enabled during rotate or zoom gestures; false if scroll gestures are disabled during rotate or zoom gestures",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isTiltGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isTiltGesturesEnabled()",
        "methodDes": "Gets whether tilt gestures are enabled/disabled.",
        "params": {},
        "returns": "boolean:true if tilt gestures are enabled; false if tilt gestures are disabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isZoomControlsEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isZoomControlsEnabled()",
        "methodDes": "Gets whether the zoom controls are enabled/disabled.",
        "params": {},
        "returns": "boolean:true if the zoom controls are enabled; false if the zoom controls are disabled;",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.isZoomGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#isZoomGesturesEnabled()",
        "methodDes": "Gets whether zoom gestures are enabled/disabled.",
        "params": {},
        "returns": "boolean:true if zoom gestures are enabled; false if zoom gestures are disabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setAllGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setAllGesturesEnabled(boolean)",
        "methodDes": "Sets the preference for whether all gestures should be enabled or disabled. If enabled, all gestures are available; otherwise, all gestures are disabled. This doesn\u0027t restrict users from tapping any on screen buttons to move the camera (e.g., compass or zoom controls), nor does it restrict programmatic movements and animation.",
        "params": {
          "enabled": "true to enable all gestures; false to disable all gestures"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setCompassEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setCompassEnabled(boolean)",
        "methodDes": "Enables or disables the compass. The compass is an icon on the map that indicates the direction of north on the map. If enabled, it is only shown when the camera is tilted or rotated away from its default orientation (tilt of 0 and a bearing of 0). When a user clicks the compass, the camera orients itself to its default orientation and fades away shortly after. If disabled, the compass will never be displayed. By default, the compass is enabled (and hence shown when the camera is not in the default orientation).",
        "params": {
          "enabled": "true to enable the compass; false to disable the compass"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setIndoorLevelPickerEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setIndoorLevelPickerEnabled(boolean)",
        "methodDes": "Sets whether the indoor level picker is enabled when indoor mode is enabled. If true, the level picker will appear when a building with indoor maps is focused. If false, no level picker will appear - an application will need to provide its own way of selecting levels. The default behaviour is to show the level picker.",
        "params": {
          "enabled": "true to show; false to hide the level picker"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setMapToolbarEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setMapToolbarEnabled(boolean)",
        "methodDes": "Sets the preference for whether the Map Toolbar should be enabled or disabled. If enabled, and the Map Toolbar can be shown in the current context, users will see a bar with various context-dependent actions, including \u0027open this map in the Google Maps app\u0027 and \u0027find directions to the highlighted marker in the Google Maps app\u0027. By default, the Map Toolbar is enabled.",
        "params": {
          "enabled": "true to enable the Map Toolbar; false to disable the Map Toolbar"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setMyLocationButtonEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setMyLocationButtonEnabled(boolean)",
        "methodDes": "Enables or disables the my-location button. The my-location button causes the camera to move such that the user\u0027s location is in the center of the map. If the button is enabled, it is only shown when the my-location layer is enabled. By default, the my-location button is enabled (and hence shown when the my-location layer is enabled).",
        "params": {
          "enabled": "true to enable the my-location button; false to disable the my-location button"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setRotateGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setRotateGesturesEnabled(boolean)",
        "methodDes": "Sets the preference for whether rotate gestures should be enabled or disabled. If enabled, users can use a two-finger rotate gesture to rotate the camera. If disabled, users cannot rotate the camera via gestures. This setting doesn\u0027t restrict the user from tapping the compass icon to reset the camera orientation, nor does it restrict programmatic movements and animation of the camera. By default, rotate gestures are enabled.",
        "params": {
          "enabled": "true to enable rotate; false to disable rotate gestures"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setScrollGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setScrollGesturesEnabled(boolean)",
        "methodDes": "Sets the preference for whether scroll gestures should be enabled or disabled. If enabled, users can swipe to pan the camera. If disabled, swiping has no effect. This setting doesn\u0027t restrict programmatic movement and animation of the camera. By default, scroll gestures are enabled.",
        "params": {
          "enabled": "true to enable scroll gestures; false to disable scroll gestures"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setScrollGesturesEnabledDuringRotateOrZoom(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setScrollGesturesEnabledDuringRotateOrZoom(boolean)",
        "methodDes": "Sets the preference for whether scroll gestures can take place at the same time as a zoom or rotate gesture. If enabled, users can scroll the map while rotating or zooming the map. If disabled, the map cannot be scrolled while the user rotates or zooms the map using gestures. This setting doesn\u0027t disable scroll gestures entirely, only during rotation and zoom gestures, nor does it restrict programmatic movements and animation of the camera. By default, scroll gestures are enabled during rotation and zoom.",
        "params": {
          "enabled": "true to enable scroll gestures during rotate or zoom gestures; false to disable scroll gestures during rotate or zoom gestures"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setTiltGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setTiltGesturesEnabled(boolean)",
        "methodDes": "Sets the preference for whether tilt gestures should be enabled or disabled. If enabled, users can use a two-finger vertical down swipe to tilt the camera. If disabled, users cannot tilt the camera via gestures. This setting doesn\u0027t restrict users from tapping the compass icon to reset the camera orientation, nor does it restrict programmatic movement and animation of the camera. By default, tilt gestures are enabled.",
        "params": {
          "enabled": "true to enable tilt gestures; false to disable tilt gestures"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setZoomControlsEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setZoomControlsEnabled(boolean)",
        "methodDes": "Enables or disables the zoom controls. If enabled, the zoom controls are a pair of buttons (one for zooming in, one for zooming out) that appear on the screen. When pressed, they cause the camera to zoom in (or out) by one zoom level. If disabled, the zoom controls are not shown. By default, the zoom controls are enabled.",
        "params": {
          "enabled": "true to enable the zoom controls; false to disable the zoom controls"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.UiSettings.setZoomGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/UiSettings#setZoomGesturesEnabled(boolean)",
        "methodDes": "Sets the preference for whether zoom gestures should be enabled or disabled. If enabled, users can either double tap/two-finger tap or pinch to zoom the camera. If disabled, these gestures have no effect. This setting doesn\u0027t affect the zoom buttons, nor does it restrict programmatic movement and animation of the camera. By default, zoom gestures are enabled.",
        "params": {
          "enabled": "true to enable zoom gestures; false to disable zoom gestures"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaClickListener": {
    "classDes": "Callback interface for when the user taps on the panorama. Listeners will be invoked on the main thread.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaClickListener",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaClickListener.onStreetViewPanoramaClick(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaClickListener#onStreetViewPanoramaClick(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)",
        "methodDes": "Called when the user makes a tap gesture on the panorama, but only if none of the overlays of the panorama handled the gesture. Implementations of this method are always invoked on the main thread.",
        "params": {
          "orientation": "The tilt and bearing values corresponding to the point on the screen where the user tapped. These values have an absolute value within a specific panorama, and are independent of the current orientation of the camera"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.Dash": {
    "classDes": "An immutable class representing a dash used in the stroke pattern for a Polyline or the outline of a Polygon or Circle.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Dash",
    "methods": {
      "com.google.android.gms.maps.model.Dash.Dash(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Dash#Dash(float)",
        "methodDes": "Constructs a Dash.",
        "params": {
          "length": "Length in pixels. Negative value will be clamped to zero"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Dash.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.Dash.length": {
        "des": "Length in pixels (non-negative).",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Dash#public-final-float-length"
      }
    }
  },
  "com.google.android.gms.maps.model.VisibleRegion": {
    "classDes": "Contains the four points defining the four-sided polygon that is visible in a map\u0027s camera. This polygon can be a trapezoid instead of a rectangle, because a camera can have tilt. If the camera is directly over the center of the camera, the shape is rectangular, but if the camera is tilted, the shape will appear to be a trapezoid whose smallest side is closest to the point of view.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion",
    "methods": {
      "com.google.android.gms.maps.model.VisibleRegion.VisibleRegion(com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLngBounds)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#VisibleRegion(com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLngBounds)",
        "methodDes": "Creates a new VisibleRegion given the four corners of the camera. The LatLng parameters must define a convex shape (the edges of the resulting shape mustn\u0027t cross). No bounds checking is performed at runtime.",
        "params": {
          "nearLeft": "a LatLng object containing the latitude and longitude of the near left corner of the region",
          "nearRight": "a LatLng object containing the latitude and longitude of the near right corner of the region",
          "farLeft": "a LatLng object containing the latitude and longitude of the far left corner of the region",
          "farRight": "a LatLng object containing the latitude and longitude of the far right corner of the region",
          "latLngBounds": "the smallest bounding box that includes the visible region defined in this class. If this box crosses the 180?? meridian (the vertical line from north to south), the longitude in farRight will be negative and the longitude in farLeft will be positive. Same applies to nearRight and nearLeft"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.VisibleRegion.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#equals(java.lang.Object)",
        "methodDes": "Compares this VisibleRegion to another object. If the other object is actually a pointer to this object, or if all four corners and the bounds of the two objects are the same, this method returns true. Otherwise, this method returns false.",
        "params": {
          "o": "an Object. Return true if both objects are the same object, or if all four corners and the bounds of the two objects are the same. Return false otherwise"
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.VisibleRegion.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int ",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.VisibleRegion.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.VisibleRegion.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.VisibleRegion.farLeft": {
        "des": "LatLng object that defines the far left corner of the camera.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#public-final-latlng-farleft"
      },
      "com.google.android.gms.maps.model.VisibleRegion.farRight": {
        "des": "LatLng object that defines the far right corner of the camera.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#public-final-latlng-farright"
      },
      "com.google.android.gms.maps.model.VisibleRegion.latLngBounds": {
        "des": "The smallest bounding box that includes the visible region defined in this class.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#public-final-latlngbounds-latlngbounds"
      },
      "com.google.android.gms.maps.model.VisibleRegion.nearLeft": {
        "des": "LatLng object that defines the bottom left corner of the camera.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#public-final-latlng-nearleft"
      },
      "com.google.android.gms.maps.model.VisibleRegion.nearRight": {
        "des": "LatLng object that defines the bottom right corner of the camera.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/VisibleRegion#public-final-latlng-farleft"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.OnMapClickListener": {
    "classDes": "Callback interface for when the user taps on the map. Listeners will be invoked on the Android UI thread.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMapClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMapClickListener.onMapClick(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMapClickListener#onMapClick(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Called when the user makes a tap gesture on the map, but only if none of the overlays of the map handled the gesture. Implementations of this method are always invoked on the Android UI thread.",
        "params": {
          "point": "The point on the ground (projected from the screen point) that was tapped"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.PolylineOptions": {
    "classDes": "Defines options for a polyline. Developer Guide For more information, read the Shapes developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions",
    "methods": {
      "com.google.android.gms.maps.model.PolylineOptions.PolylineOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#PolylineOptions()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.add(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#add(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Adds a vertex to the end of the polyline being built.",
        "params": {
          "add": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with the given point on the end",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.add(com.google.android.gms.maps.model.LatLng...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#public-polylineoptions-add-latlng...-points",
        "methodDes": "Adds vertices to the end of the polyline being built.",
        "params": {
          "add": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with the given point on the end",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.addAll(java.lang.Iterable\u003ccom.google.android.gms.maps.model.LatLng\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#addAll(java.lang.Iterable\u003ccom.google.android.gms.maps.model.LatLng\u003e)",
        "methodDes": "Adds vertices to the end of the polyline being built.",
        "params": {
          "all": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with the given points on the end",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.clickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#clickable(boolean)",
        "methodDes": "Specifies whether this polyline is clickable. The default setting is false.",
        "params": {
          "clickable": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new clickability setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.color(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#color(int)",
        "methodDes": "Sets the color of the polyline as a 32-bit ARGB color. The default color is black ( 0xff000000).",
        "params": {
          "color": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new color set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.endCap(com.google.android.gms.maps.model.Cap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#endCap(com.google.android.gms.maps.model.Cap)",
        "methodDes": "Sets the cap at the end vertex of the polyline. The default end cap is ButtCap.",
        "params": {
          "cap": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new end cap set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.geodesic(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#geodesic(boolean)",
        "methodDes": "Specifies whether to draw each segment of this polyline as a geodesic. The default setting is false.",
        "params": {
          "geodesic": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new geodesic setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getColor()",
        "methodDes": "Gets the color set for this PolylineOptions object.",
        "params": {},
        "returns": "int:the color of the polyline in ARGB format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getEndCap()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getEndCap()",
        "methodDes": "Gets the cap set for the end vertex in this PolylineOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.Cap:the end cap of the polyline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getJointType()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getJointType()",
        "methodDes": "Gets the joint type set in this PolylineOptions object for all vertices except the start and end vertices. See JointType for possible values.",
        "params": {},
        "returns": "int:the joint type of the polyline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getPattern()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getPattern()",
        "methodDes": "Gets the stroke pattern set in this PolylineOptions object for the polyline.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e:the stroke pattern of the polyline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getPoints()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getPoints()",
        "methodDes": "Gets the points set for this PolylineOptions object.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e:the list of LatLngs specifying the vertices of the polyline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getStartCap()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getStartCap()",
        "methodDes": "Gets the cap set for the start vertex in this PolylineOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.Cap:the start cap of the polyline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getWidth()",
        "methodDes": "Gets the width set for this PolylineOptions object.",
        "params": {},
        "returns": "float:the width of the polyline in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#getZIndex()",
        "methodDes": "Gets the zIndex set for this PolylineOptions object.",
        "params": {},
        "returns": "float:the zIndex of the polyline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#isClickable()",
        "methodDes": "Gets the clickability setting for this PolylineOptions object.",
        "params": {},
        "returns": "boolean:true if the polyline is clickable; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.isGeodesic()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#isGeodesic()",
        "methodDes": "Gets the geodesic setting for this PolylineOptions object.",
        "params": {},
        "returns": "boolean:true if the polyline segments should be geodesics; false they should not be",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#isVisible()",
        "methodDes": "Gets the visibility setting for this PolylineOptions object.",
        "params": {},
        "returns": "boolean:true if the polyline is visible; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.jointType(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#jointType(int)",
        "methodDes": "Sets the joint type for all vertices of the polyline except the start and end vertices. See JointType for allowed values. The default value DEFAULT will be used if joint type is undefined or is not one of the allowed values.",
        "params": {
          "type": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new joint type set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.pattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#pattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)",
        "methodDes": "Sets the stroke pattern for the polyline. The default stroke pattern is solid, represented by null.",
        "params": {
          "pattern": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new stroke pattern set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.startCap(com.google.android.gms.maps.model.Cap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#startCap(com.google.android.gms.maps.model.Cap)",
        "methodDes": "Sets the cap at the start vertex of the polyline. The default start cap is ButtCap.",
        "params": {
          "cap": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new start cap set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.visible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#visible(boolean)",
        "methodDes": "Specifies the visibility for the polyline. The default visibility is true.",
        "params": {
          "visible": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new visibility setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.width(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#width(float)",
        "methodDes": "Sets the width of the polyline in screen pixels. The default is 10.",
        "params": {
          "width": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new width set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolylineOptions.zIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolylineOptions#zIndex(float)",
        "methodDes": "Specifies the polyline\u0027s zIndex, i.e., the order in which it will be drawn. See the documentation at the top of this class for more information about zIndex.",
        "params": {
          "index": ""
        },
        "returns": "com.google.android.gms.maps.model.PolylineOptions:this PolylineOptions object with a new zIndex set",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.StreetViewPanoramaOptions": {
    "classDes": "Defines configuration PanoramaOptions for a StreetViewPanorama. These options can be used when adding a panorama to your application programmatically. If you are using a StreetViewPanoramaFragment, you can pass these options in using the static factory method newInstance(StreetViewPanoramaOptions). If you are using a StreetViewPanoramaView, you can pass these options in using the constructor StreetViewPanoramaView(Context, StreetViewPanoramaOptions).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanoramaOptions.StreetViewPanoramaOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#StreetViewPanoramaOptions()",
        "methodDes": "Creates a new StreetViewPanoramaOptions object.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getPanningGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getPanningGesturesEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:true if users are initially able to pan via gestures on Street View panoramas",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getPanoramaId()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getPanoramaId()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:The initial panorama ID for the Street View panorama, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getPosition()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getPosition()",
        "methodDes": "",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:The initial position for the Street View panorama, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getRadius()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getRadius()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Integer:The initial radius used to search for a Street View panorama, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getSource()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getSource()",
        "methodDes": "",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewSource:The source filter used to search for a Street View panorama, or DEFAULT if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getStreetNamesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getStreetNamesEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:true if users are initially able to see street names on Street View panoramas",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getStreetViewPanoramaCamera()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getStreetViewPanoramaCamera()",
        "methodDes": "",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera:The initial camera for the Street View panorama, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getUseViewLifecycleInFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getUseViewLifecycleInFragment()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the useViewLifecycleInFragment option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getUserNavigationEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getUserNavigationEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:true if users are initially able to move to different Street View panoramas",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.getZoomGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#getZoomGesturesEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:true if users are initially able to zoom via gestures on Street View panoramas",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.panningGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#panningGesturesEnabled(boolean)",
        "methodDes": "Toggles the ability for users to use pan around on panoramas using gestures. See setPanningGesturesEnabled(boolean) for more details. The default is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.panoramaCamera(com.google.android.gms.maps.model.StreetViewPanoramaCamera)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#panoramaCamera(com.google.android.gms.maps.model.StreetViewPanoramaCamera)",
        "methodDes": "Specifies the initial camera for the Street View panorama.",
        "params": {
          "camera": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.panoramaId(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#panoramaId(java.lang.String)",
        "methodDes": "Specifies the initial position for the Street View panorama based on a panorama id. The position set by the panoramaID takes precedence over a position set by a LatLng.",
        "params": {
          "id": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.position(com.google.android.gms.maps.model.LatLng,java.lang.Integer,com.google.android.gms.maps.model.StreetViewSource)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#public-streetviewpanoramaoptions-position-latlng-position,-integer-radius,-streetviewsource-source",
        "methodDes": "Specifies the initial position for the Street View panorama based upon location, radius and source. The position set by the panoramaID, if set, takes precedence over a position set by a LatLng.",
        "params": {
          "position": "",
          "radius": "",
          "source": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.position(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#position(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Specifies the initial position for the Street View panorama based upon location. The position set by the panoramaID, if set, takes precedence over a position set by a LatLng.",
        "params": {
          "position": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.position(com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.StreetViewSource)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#position(com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.StreetViewSource)",
        "methodDes": "Specifies the initial position for the Street View panorama based upon location and source. The position set by the panoramaID, if set, takes precedence over a position set by a LatLng.",
        "params": {
          "lng": "",
          "source": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.position(com.google.android.gms.maps.model.LatLng,java.lang.Integer)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#position(com.google.android.gms.maps.model.LatLng, java.lang.Integer)",
        "methodDes": "Specifies the initial position for the Street View panorama based upon location and radius. The position set by the panoramaID, if set, takes precedence over a position set by a LatLng.",
        "params": {
          "lng": "",
          "integer": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.streetNamesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#streetNamesEnabled(boolean)",
        "methodDes": "Toggles the ability for users to see street names on panoramas. See setStreetNamesEnabled(boolean) for more details. The default is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.useViewLifecycleInFragment(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#useViewLifecycleInFragment(boolean)",
        "methodDes": "When using a StreetViewPanoramaFragment, this flag specifies whether the lifecycle of the Street View panorama should be tied to the fragment\u0027s view or the fragment itself. The default value is false, tying the lifecycle of the Street View panorama to the fragment. Using the lifecycle of the fragment allows faster rendering of the Street View panorama when the fragment is detached and reattached, because the underlying GL context is preserved. This has the cost that detaching the fragment, but not destroying it, will not release memory used by the panorama. Using the lifecycle of a fragment\u0027s view means that a Street View panorama is not reused when the fragment is detached and reattached. This will cause the map to re-render from scratch, which can take a few seconds. It also means that while a fragment is detached, and therefore has no view, all StreetViewPanorama methods will throw NullPointerException.",
        "params": {
          "fragment": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.userNavigationEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#userNavigationEnabled(boolean)",
        "methodDes": "Toggles the ability for users to move between panoramas. See setUserNavigationEnabled(boolean) for more details. The default is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaOptions.zoomGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaOptions#zoomGesturesEnabled(boolean)",
        "methodDes": "Toggles the ability for users to zoom on panoramas using gestures. See setZoomGesturesEnabled(boolean) for more details. The default is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaOptions:the StreetViewPanoramaOptions",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.TileOverlayOptions": {
    "classDes": "Defines options for a TileOverlay.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions",
    "methods": {
      "com.google.android.gms.maps.model.TileOverlayOptions.TileOverlayOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#TileOverlayOptions()",
        "methodDes": "Creates a new set of tile overlay options.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.fadeIn(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#fadeIn(boolean)",
        "methodDes": "Specifies whether the tiles should fade in. The default is true.",
        "params": {
          "in": ""
        },
        "returns": "com.google.android.gms.maps.model.TileOverlayOptions:this TileOverlayOptions object with a new visibility setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.getFadeIn()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#getFadeIn()",
        "methodDes": "Gets whether the tiles should fade in.",
        "params": {},
        "returns": "boolean:true if the tiles are to fade in; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.getTileProvider()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#getTileProvider()",
        "methodDes": "Gets the tile provider set for this TileOverlayOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.TileProvider:the TileProvider of the tile overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.getTransparency()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#getTransparency()",
        "methodDes": "Gets the transparency set for this TileOverlayOptions object.",
        "params": {},
        "returns": "float:the transparency of the tile overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#getZIndex()",
        "methodDes": "Gets the zIndex set for this TileOverlayOptions object.",
        "params": {},
        "returns": "float:the zIndex of the tile overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#isVisible()",
        "methodDes": "Gets the visibility setting for this TileOverlayOptions object.",
        "params": {},
        "returns": "boolean:true if the tile overlay is to be visible; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.tileProvider(com.google.android.gms.maps.model.TileProvider)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#tileProvider(com.google.android.gms.maps.model.TileProvider)",
        "methodDes": "Specifies the tile provider to use for this tile overlay.",
        "params": {
          "tileProvider": "the TileProvider to use for this tile overlay"
        },
        "returns": "com.google.android.gms.maps.model.TileOverlayOptions:the object for which the method was called, with the new tile provider set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.transparency(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#transparency(float)",
        "methodDes": "Specifies the transparency of the tile overlay. The default transparency is 0 (opaque).",
        "params": {
          "transparency": "a float in the range [0..1] where 0 means that the tile overlay is opaque and 1 means that the tile overlay is transparent"
        },
        "returns": "com.google.android.gms.maps.model.TileOverlayOptions:this TileOverlayOptions object with a new transparency setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.visible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#visible(boolean)",
        "methodDes": "Specifies the visibility for the tile overlay. The default visibility is true.",
        "params": {
          "visible": ""
        },
        "returns": "com.google.android.gms.maps.model.TileOverlayOptions:this TileOverlayOptions object with a new visibility setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlayOptions.zIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlayOptions#zIndex(float)",
        "methodDes": "Specifies the tile overlay\u0027s zIndex, i.e., the order in which it will be drawn where overlays with larger values are drawn above those with lower values. See the documentation at the top of this class for more information about zIndex.",
        "params": {
          "index": ""
        },
        "returns": "com.google.android.gms.maps.model.TileOverlayOptions:this TileOverlayOptions object with a new zIndex set",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaCameraChangeListener": {
    "classDes": "A listener for when the StreetViewPanoramaCamera changes.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaCameraChangeListener",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaCameraChangeListener.onStreetViewPanoramaCameraChange(com.google.android.gms.maps.model.StreetViewPanoramaCamera)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaCameraChangeListener#onStreetViewPanoramaCameraChange(com.google.android.gms.maps.model.StreetViewPanoramaCamera)",
        "methodDes": "Called when the user makes changes to the camera on the panorama or if the camera is changed programmatically. Implementations of this method are always invoked on the main thread.",
        "params": {
          "camera": "The position the camera has changed to"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnMapLoadedCallback": {
    "classDes": "Callback interface for when the map has finished rendering. This occurs after all tiles required to render the map have been fetched, and all labeling is complete. This event will not fire if the map never loads due to connectivity issues, or if the map is continuously changing and never completes loading due to the user constantly interacting with the map.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMapLoadedCallback",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMapLoadedCallback.onMapLoaded()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMapLoadedCallback#onMapLoaded()",
        "methodDes": "Called when the map has finished rendering. This will only be called once. You must request another callback if you want to be notified again. This is called on the Android UI thread.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener": {
    "classDes": "Callback interface for when the My Location button is clicked.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationButtonClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener.onMyLocationButtonClick()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationButtonClickListener#onMyLocationButtonClick()",
        "methodDes": "Called when the my location button is clicked. This is called on the Android UI thread. Use com.google.android.gms.location.FusedLocationProviderApi if you need to obtain the user\u0027s current location.",
        "params": {},
        "returns": "boolean:true if the listener has consumed the event (i.e., the default behavior should not occur); false otherwise (i.e., the default behavior should occur). The default behavior is for the camera move such that it is centered on the user location",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnMapLongClickListener": {
    "classDes": "Callback interface for when the user long presses on the map. Listeners will be invoked on the Android UI thread.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMapLongClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMapLongClickListener.onMapLongClick(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMapLongClickListener#onMapLongClick(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Called when the user makes a long-press gesture on the map, but only if none of the overlays of the map handled the gesture. Implementations of this method are always invoked on the Android UI thread.",
        "params": {
          "point": "The point on the ground (projected from the screen point) that was pressed"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder": {
    "classDes": "Builds Street View panorama orientations.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder",
    "methods": {
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder.Builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder#StreetViewPanoramaOrientation.Builder()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder.Builder(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder#public-streetviewpanoramaorientation.builder-streetviewpanoramaorientation-previous",
        "methodDes": "",
        "params": {
          "orientation": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder.bearing(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder#bearing(float)",
        "methodDes": "Sets the direction of the orientation, in degrees clockwise from north.",
        "params": {
          "bearing": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder.build()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder#build()",
        "methodDes": "Builds a StreetViewPanoramaOrientation.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaOrientation:the StreetViewPanoramaOrientation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder.tilt(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder#tilt(float)",
        "methodDes": "Sets the angle, in degrees, of the orientation This value is restricted to being between -90 (directly down) and 90 (directly up).",
        "params": {
          "tilt": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder:the Builder",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder.bearing": {
        "des": "",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder#public-float-bearing"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder.tilt": {
        "des": "",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation.Builder#public-float-tilt"
      }
    }
  },
  "com.google.android.gms.maps.model.StreetViewPanoramaLocation": {
    "classDes": "An immutable class that contains details of the user\u0027s current Street View panorama.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation",
    "methods": {
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.StreetViewPanoramaLocation(com.google.android.gms.maps.model.StreetViewPanoramaLink[],com.google.android.gms.maps.model.LatLng,java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#StreetViewPanoramaLocation(com.google.android.gms.maps.model.StreetViewPanoramaLink[], com.google.android.gms.maps.model.LatLng, java.lang.String)",
        "methodDes": "Constructs a StreetViewPanoramaLocation.",
        "params": {
          "links": "List of StreetViewPanoramaLink reachable from the current position",
          "position": "The location of the current Street View panorama",
          "panoId": "Identification string for the current Street View panorama"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.links": {
        "des": "Array of StreetViewPanoramaLink able to be reached from the current position.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#public-final-streetviewpanoramalink[]-links"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.panoId": {
        "des": "The panorama ID of the current Street View panorama.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#public-final-string-panoid"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLocation.position": {
        "des": "The location of the current Street View panorama.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLocation#public-final-latlng-position"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.SnapshotReadyCallback": {
    "classDes": "Callback interface to notify when the snapshot has been taken.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.SnapshotReadyCallback",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.SnapshotReadyCallback.onSnapshotReady(android.graphics.Bitmap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.SnapshotReadyCallback#onSnapshotReady(android.graphics.Bitmap)",
        "methodDes": "Invoked when the snapshot has been taken. This is called on the Android UI thread.",
        "params": {
          "snapshot": "A bitmap containing the map as it is currently rendered, or null if the snapshot could not be taken"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnCameraMoveCanceledListener": {
    "classDes": "Callback interface for when the camera\u0027s motion has been stopped or when the camera starts moving for a new reason.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveCanceledListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnCameraMoveCanceledListener.onCameraMoveCanceled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveCanceledListener#onCameraMoveCanceled()",
        "methodDes": "Called when the developer explicitly calls the stopAnimation() method or if the reason for camera motion has changed before the onCameraIdle had a chance to fire after the previous animation. Do not update or animate the camera from within this method. This is called on the Android UI thread.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.PointOfInterest": {
    "classDes": "Contains information about a PointOfInterest that was clicked on.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PointOfInterest",
    "methods": {
      "com.google.android.gms.maps.model.PointOfInterest.PointOfInterest(com.google.android.gms.maps.model.LatLng,java.lang.String,java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PointOfInterest#PointOfInterest(com.google.android.gms.maps.model.LatLng, java.lang.String, java.lang.String)",
        "methodDes": "Constructs a PointOfInterest.",
        "params": {
          "latLng": "the LatLng of the POI",
          "placeId": "the placeId of the POI",
          "name": "the name of the POI"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PointOfInterest.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PointOfInterest#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.PointOfInterest.latLng": {
        "des": "The LatLng of the POI.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PointOfInterest#public-final-latlng-latlng"
      },
      "com.google.android.gms.maps.model.PointOfInterest.name": {
        "des": "The name of the POI.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PointOfInterest#public-final-latlng-latlng"
      },
      "com.google.android.gms.maps.model.PointOfInterest.placeId": {
        "des": "The placeId of the POI.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PointOfInterest#public-final-latlng-latlng"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.OnCameraChangeListener": {
    "classDes": "This interface is deprecated. Replaced by GoogleMap.OnCameraMoveStartedListener, GoogleMap.OnCameraMoveListener and GoogleMap.OnCameraIdleListener. The order in which the deprecated onCameraChange method will be called in relation to the methods in the new camera change listeners is undefined. Callback interface for when the camera changes position.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraChangeListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnCameraChangeListener.onCameraChange(com.google.android.gms.maps.model.CameraPosition)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraChangeListener#onCameraChange(com.google.android.gms.maps.model.CameraPosition)",
        "methodDes": "Called after the camera position has changed. During an animation, this listener may not be notified of intermediate camera positions. It is always called for the final position in the animation. This is called on the Android UI thread.",
        "params": {
          "position": "The CameraPosition at the end of the last camera change"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.InfoWindowAdapter": {
    "classDes": "Provides views for customized rendering of info windows. Methods on this provider are called when it is time to show an info window for a marker, regardless of the cause (either a user gesture or a programmatic call to showInfoWindow(). Since there is only one info window shown at any one time, this provider may choose to reuse views, or it may choose to create new views on each method invocation. When constructing an info window, methods in this class are called in a defined order. To replace the default info window, override getInfoWindow(Marker) with your custom rendering and return null for getInfoContents(Marker). To replace only the info window contents inside the default info window frame (the callout bubble), return null in getInfoWindow(Marker) and override getInfoContents(Marker) instead. Developer Guide For more information, read the Info Windows developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.InfoWindowAdapter",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.InfoWindowAdapter.getInfoContents(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.InfoWindowAdapter#getInfoContents(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Provides custom contents for the default info window frame of a marker. This method is only called if getInfoWindow(Marker) first returns null. If this method returns a view, it will be placed inside the default info window frame. If you change this view after this method is called, those changes will not necessarily be reflected in the rendered info window. If this method returns null, the default rendering will be used instead.",
        "params": {
          "marker": "The marker for which an info window is being populated"
        },
        "returns": "android.view.View:A custom view to display as contents in the info window for marker, or null to use the default content rendering instead",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.InfoWindowAdapter.getInfoWindow(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.InfoWindowAdapter#getInfoWindow(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Provides a custom info window for a marker. If this method returns a view, it is used for the entire info window. If you change this view after this method is called, those changes will not necessarily be reflected in the rendered info window. If this method returns null , the default info window frame will be used, with contents provided by getInfoContents(Marker).",
        "params": {
          "marker": "The marker for which an info window is being populated"
        },
        "returns": "android.view.View:A custom info window for marker, or null to use the default info window frame with custom contents",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnIndoorStateChangeListener": {
    "classDes": "A listener for when the indoor state changes. Events are notified on the Android UI thread.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnIndoorStateChangeListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnIndoorStateChangeListener.onIndoorBuildingFocused()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnIndoorStateChangeListener#onIndoorBuildingFocused()",
        "methodDes": "The map maintains a notion of focused building, which is the building currently centered in the viewport or otherwise selected by the user through the UI or the location provider. This callback is called when the focused building changes. This method will only be called after the building data has become available. The focused building is not referenced as a parameter of this method due to synchronization issues: if multiple focus requests are handled, listeners may be notified out-of-order, so should rely on getFocusedBuilding() itself to provide the most up-to-date information. It is possible that more than one onIndoorBuildingFocused call will be made without the focused building actually changing.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.OnIndoorStateChangeListener.onIndoorLevelActivated(com.google.android.gms.maps.model.IndoorBuilding)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnIndoorStateChangeListener#onIndoorLevelActivated(com.google.android.gms.maps.model.IndoorBuilding)",
        "methodDes": "The map keeps track of the active level for each building which has been visited or otherwise had a level selected. When that level changes, this callback will be triggered regardless of whether the building is focused or not. This callback is also called when the default level first becomes available. This method will only be called after the building data has become available.",
        "params": {
          "building": "the building for which the active level has changed, never null"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.MapView": {
    "classDes": "A View which displays a map (with data obtained from the Google Maps service). When focused, it will capture keypresses and touch gestures to move the map. Users of this class must forward all the life cycle methods from the Activity or Fragment containing this view to the corresponding ones in this class. In particular, you must forward on the following methods: onCreate(Bundle) onStart() onResume() onPause() onStop() onDestroy() onSaveInstanceState() onLowMemory() A GoogleMap must be acquired using getMapAsync(OnMapReadyCallback). The MapView automatically initializes the maps system and the view. For a simpler method of displaying a Map use MapFragment (or SupportMapFragment) if you are looking to target earlier platforms. Note: You are advised not to add children to this view. Developer Guide For more information, read the Google Maps SDK for Android developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView",
    "methods": {
      "com.google.android.gms.maps.MapView.MapView(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#MapView(android.content.Context)",
        "methodDes": "",
        "params": {
          "view": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.MapView(android.content.Context,android.util.AttributeSet,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#public-mapview-context-context,-attributeset-attrs,-int-defstyle",
        "methodDes": "",
        "params": {
          "context": "",
          "attrs": "",
          "defStyle": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.MapView(android.content.Context,android.util.AttributeSet)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#MapView(android.content.Context, android.util.AttributeSet)",
        "methodDes": "",
        "params": {
          "context": "",
          "set": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.MapView(android.content.Context,com.google.android.gms.maps.GoogleMapOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#MapView(android.content.Context, com.google.android.gms.maps.GoogleMapOptions)",
        "methodDes": "",
        "params": {
          "context": "",
          "options": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)",
        "methodDes": "Returns a non-null instance of the GoogleMap, ready to be used. Note that: This method must be called from the main thread. The callback will be executed in the main thread. In the case where Google Play services is not installed on the user\u0027s device, the callback will not be triggered until the user installs it. The GoogleMap object provided by the callback is non-null.",
        "params": {
          "callback": "The callback object that will be triggered when the map is ready to be used"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onCreate(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onCreate(android.os.Bundle)",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {
          "create": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onDestroy()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onDestroy()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onEnterAmbient(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onEnterAmbient(android.os.Bundle)",
        "methodDes": "You must call this method from the parent WearableActivity\u0027s corresponding method.",
        "params": {
          "ambient": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onExitAmbient()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onExitAmbient()",
        "methodDes": "You must call this method from the parent WearableActivity\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onLowMemory()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onLowMemory()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onPause()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onPause()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onResume()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onResume()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onSaveInstanceState(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onSaveInstanceState(android.os.Bundle)",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method. Provides a Bundle to store the state of the View before it gets destroyed. It can later be retrieved when onCreate(Bundle) is called again.",
        "params": {
          "state": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onStart()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onStart()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapView.onStop()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapView#onStop()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.LatLng": {
    "classDes": "An immutable class representing a pair of latitude and longitude coordinates, stored as degrees.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng",
    "methods": {
      "com.google.android.gms.maps.model.LatLng.LatLng(double,double)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng#LatLng(double, double)",
        "methodDes": "Constructs a LatLng with the given latitude and longitude, measured in degrees.",
        "params": {
          "latitude": "The point\u0027s latitude. This will be clamped to between -90 degrees and +90 degrees inclusive",
          "longitude": "The point\u0027s longitude. This will be normalized to be within -180 degrees inclusive and +180 degrees exclusive"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLng.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng#equals(java.lang.Object)",
        "methodDes": "Tests if this LatLng is equal to another. Two points are considered equal if and only if their latitudes are bitwise equal and their longitudes are bitwise equal. This means that two LatLngs that are very near, in terms of geometric distance, might not be considered .equal().",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLng.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLng.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLng.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.LatLng.latitude": {
        "des": "Latitude, in degrees.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng#public-final-double-latitude"
      },
      "com.google.android.gms.maps.model.LatLng.longitude": {
        "des": "Longitude, in degrees.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLng#public-final-double-longitude"
      }
    }
  },
  "com.google.android.gms.maps.model.LatLngBounds.Builder": {
    "classDes": "This is a builder that is able to create a minimum bound based on a set of LatLng points.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds.Builder",
    "methods": {
      "com.google.android.gms.maps.model.LatLngBounds.Builder.Builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds.Builder#LatLngBounds.Builder()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.Builder.build()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds.Builder#build()",
        "methodDes": "Creates the LatLng bounds.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLngBounds:the LatLngBounds",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.Builder.include(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds.Builder#include(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Includes this point for building of the bounds. The bounds will be extended in a minimum way to include this point. More precisely, it will consider extending the bounds both in the eastward and westward directions (one of which may cross the antimeridian) and choose the smaller of the two. In the case that both directions result in a LatLngBounds of the same size, this will extend it in the eastward direction. For example, adding points (0, -179) and (1, 179) will create a bound crossing the 180 longitude.",
        "params": {
          "point": "A LatLng to be included in the bounds"
        },
        "returns": "com.google.android.gms.maps.model.LatLngBounds.Builder:This builder object with a new point added",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.CameraPosition.Builder": {
    "classDes": "Builds camera position.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder",
    "methods": {
      "com.google.android.gms.maps.model.CameraPosition.Builder.Builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder#public-cameraposition.builder-cameraposition-previous",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.Builder.Builder(com.google.android.gms.maps.model.CameraPosition)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder#CameraPosition.Builder()",
        "methodDes": "",
        "params": {
          "previous": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.Builder.bearing(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder#bearing(float)",
        "methodDes": "Sets the direction that the camera is pointing in, in degrees clockwise from north.",
        "params": {
          "bearing": ""
        },
        "returns": "com.google.android.gms.maps.model.CameraPosition.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.Builder.build()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder#build()",
        "methodDes": "Builds a CameraPosition.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.CameraPosition:the CameraPosition",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.Builder.target(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder#target(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Sets the location that the camera is pointing at.",
        "params": {
          "target": ""
        },
        "returns": "com.google.android.gms.maps.model.CameraPosition.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.Builder.tilt(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder#tilt(float)",
        "methodDes": "Sets the angle, in degrees, of the camera from the nadir (directly facing the Earth). When changing the camera position for a map, this value is restricted depending on the zoom level of the camera. The restrictions are as follows: For zoom levels less than 10 the maximum is 30. For zoom levels from 10 to 14 the maximum increases linearly from 30 to 45 (e.g. at zoom level 12, the maximum is 37.5). For zoom levels from 14 to 15.5 the maximum increases linearly from 45 to 67.5. For zoom levels greater than 15.5 the maximum is 67.5. The minimum is always 0 (directly down). If you specify a value outside this range and try to move the camera to this camera position it will be clamped to these bounds.",
        "params": {
          "tilt": ""
        },
        "returns": "com.google.android.gms.maps.model.CameraPosition.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.Builder.zoom(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition.Builder#zoom(float)",
        "methodDes": "Sets the zoom level of the camera. Zoom level is defined such that at zoom level 0, the whole world is approximately 256dp wide (assuming that the camera is not tilted). Increasing the zoom level by 1 doubles the width of the world on the screen. Hence at zoom level N, the width of the world is approximately 256 * 2 N dp, i.e., at zoom level 2, the whole world is approximately 1024dp wide. When changing the camera position for a map, the zoom level of the camera is restricted to a certain range depending on various factors including location, map type and map size. Use GoogleMap.getMinZoomLevel and GoogleMap.getMaxZoomLevel to find the restrictions. Note that the camera zoom need not be an integer value.",
        "params": {
          "zoom": ""
        },
        "returns": "com.google.android.gms.maps.model.CameraPosition.Builder:the Builder",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.StreetViewPanoramaFragment": {
    "classDes": "A StreetViewPanorama component in an app. This fragment is the simplest way to place a Street View panorama in an application. It\u0027s a wrapper around a view of a panorama to automatically handle the necessary life cycle needs. Being a fragment, this component can be added to an activity\u0027s layout file simply with the XML below. \u003cfragment class\u003d\"com.google.android.gms.maps.StreetViewPanoramaFragment\" android:layout_width\u003d\"match_parent\" android:layout_height\u003d\"match_parent\"/\u003eA StreetViewPanorama must be acquired using getStreetViewPanoramaAsync(OnStreetViewPanoramaReadyCallback). The StreetViewPanoramaFragment automatically initializes the Street View system and the view. A view can be removed when the StreetViewPanoramaFragment\u0027s onDestroyView() method is called and the useViewLifecycleInFragment(boolean) option is set. When this happens the StreetViewPanoramaFragment is no longer valid until the view is recreated again later when MapFragment\u0027s onCreateView(LayoutInflater, ViewGroup, Bundle) method is called. Any object obtained from the StreetViewPanorama is associated with the view. It\u0027s important to not hold on to objects beyond the view\u0027s life. Otherwise it will cause a memory leak as the view cannot be released. Use this class only if you are targeting API 12 and above. Otherwise, use SupportStreetViewPanoramaFragment. Note: The Google Maps SDK for Android does not support multiple StreetViewPanoramaFragment objects in one activity.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanoramaFragment.StreetViewPanoramaFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#StreetViewPanoramaFragment()",
        "methodDes": "Creates a streetview panorama fragment. This constructor is public only for use by an inflater. Use newInstance() to create a StreetViewPanoramaFragment programmatically.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.getStreetViewPanoramaAsync(com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#getStreetViewPanoramaAsync(com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback)",
        "methodDes": "Sets a callback object which will be triggered when the StreetViewPanorama instance is ready to be used. Note that: In the case where Google Play services is not installed on the user\u0027s device, the callback will not be triggered until the user installs it. The callback will be executed in the main thread. The StreetViewPanorama object provided by the callback is non-null.",
        "params": {
          "callback": "The callback object that will be triggered when the panorama is ready to be used"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.newInstance()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#newInstance()",
        "methodDes": "Creates a streetview panorama fragment, using default options.",
        "params": {},
        "returns": "com.google.android.gms.maps.StreetViewPanoramaFragment:the StreetViewPanoramaFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.newInstance(com.google.android.gms.maps.StreetViewPanoramaOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#newInstance(com.google.android.gms.maps.StreetViewPanoramaOptions)",
        "methodDes": "Creates a streetview panorama fragment with the given options.",
        "params": {
          "instance": ""
        },
        "returns": "com.google.android.gms.maps.StreetViewPanoramaFragment:the StreetViewPanoramaFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onActivityCreated(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onActivityCreated(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "created": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onAttach(android.app.Activity)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onAttach(android.app.Activity)",
        "methodDes": "",
        "params": {
          "attach": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onCreate(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onCreate(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "create": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)",
        "methodDes": "",
        "params": {
          "inflater": "",
          "group": "",
          "bundle": ""
        },
        "returns": "android.view.View:the View",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onDestroy()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onDestroy()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onDestroyView()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onDestroyView()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onInflate(android.app.Activity, android.util.AttributeSet, android.os.Bundle)",
        "methodDes": "Parse attributes during inflation from a view hierarchy into the arguments we handle.",
        "params": {
          "activity": "",
          "set": "",
          "bundle": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onLowMemory()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onLowMemory()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onPause()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onPause()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onResume()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onResume()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onSaveInstanceState(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onSaveInstanceState(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "state": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onStart()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onStart()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.onStop()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#onStop()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaFragment.setArguments(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaFragment#setArguments(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "arguments": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.LocationSource": {
    "classDes": "Defines an interface for providing location data, typically to a GoogleMap object. A GoogleMap object has a built-in location provider for its my-location layer, but it can be replaced with another one that implements this interface. A GoogleMap object activates its location provider using activate(OnLocationChangedListener). While active (between activate(OnLocationChangedListener) and deactivate()), a location provider should push periodic location updates to the listener registered in activate(OnLocationChangedListener). It is the provider\u0027s responsibility to use location services wisely according to the map\u0027s lifecycle state. For example, it should only using battery-intensive services (like GPS) occasionally, or only while an activity is in the foreground.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource",
    "methods": {
      "com.google.android.gms.maps.LocationSource.activate(com.google.android.gms.maps.LocationSource.OnLocationChangedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource#activate(com.google.android.gms.maps.LocationSource.OnLocationChangedListener)",
        "methodDes": "Activates this provider. This provider will notify the supplied listener periodically, until you call deactivate(). Notifications will be broadcast on the main thread.",
        "params": {
          "listener": "listener that\u0027s called when a new location is available"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.LocationSource.deactivate()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource#deactivate()",
        "methodDes": "Deactivates this provider. The previously-registered callback is not notified of any further updates.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.CameraPosition": {
    "classDes": "An immutable class that aggregates all camera position parameters such as location, zoom level, tilt angle, and bearing. Use CameraPosition.Builder to construct a CameraPosition instance, which you can then use in conjunction with CameraUpdateFactory. For more information, see Moving the camera. Developer Guide For more information, read the Camera and View developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition",
    "methods": {
      "com.google.android.gms.maps.model.CameraPosition.CameraPosition(com.google.android.gms.maps.model.LatLng,float,float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#CameraPosition(com.google.android.gms.maps.model.LatLng, float, float, float)",
        "methodDes": "Constructs a CameraPosition.",
        "params": {
          "target": "The target location to align with the center of the screen",
          "zoom": "Zoom level at target. See zoom(float) for details of restrictions",
          "tilt": "The camera angle, in degrees, from the nadir (directly down). See tilt(float) for details of restrictions",
          "bearing": "Direction that the camera is pointing in, in degrees clockwise from north. This value will be normalized to be within 0 degrees inclusive and 360 degrees exclusive"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#builder()",
        "methodDes": "Creates a builder for a camera position.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.CameraPosition.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.builder(com.google.android.gms.maps.model.CameraPosition)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#public-static-cameraposition.builder-builder-cameraposition-camera",
        "methodDes": "Creates a builder for a camera position.",
        "params": {
          "camera": ""
        },
        "returns": "com.google.android.gms.maps.model.CameraPosition.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.createFromAttributes(android.content.Context,android.util.AttributeSet)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#createFromAttributes(android.content.Context, android.util.AttributeSet)",
        "methodDes": "Creates a CameraPosition from the AttributeSet.",
        "params": {
          "context": "",
          "set": ""
        },
        "returns": "com.google.android.gms.maps.model.CameraPosition:the CameraPosition",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.fromLatLngZoom(com.google.android.gms.maps.model.LatLng,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#fromLatLngZoom(com.google.android.gms.maps.model.LatLng, float)",
        "methodDes": "Constructs a CameraPosition pointed for a particular target and zoom level. The resultant bearing is North, and the viewing angle is perpendicular to the Earth\u0027s surface. i.e., directly facing the Earth\u0027s surface, with the top of the screen pointing North.",
        "params": {
          "target": "The target location to align with the center of the screen",
          "zoom": "Zoom level at target. See zoom(float) for details on the range the value will be clamped to. The larger the value the more zoomed in the camera is"
        },
        "returns": "com.google.android.gms.maps.model.CameraPosition:the CameraPosition",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CameraPosition.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.CameraPosition.bearing": {
        "des": "Direction that the camera is pointing in, in degrees clockwise from north.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#public-final-float-bearing"
      },
      "com.google.android.gms.maps.model.CameraPosition.target": {
        "des": "The location that the camera is pointing at.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#public-final-latlng-target"
      },
      "com.google.android.gms.maps.model.CameraPosition.tilt": {
        "des": "The angle, in degrees, of the camera angle from the nadir (directly facing the Earth).",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#public-final-float-tilt"
      },
      "com.google.android.gms.maps.model.CameraPosition.zoom": {
        "des": "Zoom level near the center of the screen.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CameraPosition#public-final-float-zoom"
      }
    }
  },
  "com.google.android.gms.maps.LocationSource.OnLocationChangedListener": {
    "classDes": "Handles a location update.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource.OnLocationChangedListener",
    "methods": {
      "com.google.android.gms.maps.LocationSource.OnLocationChangedListener.onLocationChanged(android.location.Location)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/LocationSource.OnLocationChangedListener#onLocationChanged(android.location.Location)",
        "methodDes": "Called when a new user location is known.",
        "params": {
          "location": "new location. Must not be null"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.RoundCap": {
    "classDes": "Cap that is a semicircle with radius equal to half the stroke width, centered at the start or end vertex of a Polyline with solid stroke pattern.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/RoundCap",
    "methods": {
      "com.google.android.gms.maps.model.RoundCap.RoundCap()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/RoundCap#RoundCap()",
        "methodDes": "Constructs a RoundCap.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.RoundCap.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnInfoWindowCloseListener": {
    "classDes": "Callback interface for close events on a marker\u0027s info window.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnInfoWindowCloseListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnInfoWindowCloseListener.onInfoWindowClose(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnInfoWindowCloseListener#onInfoWindowClose(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Called when the marker\u0027s info window is closed. This is called on the Android UI thread.",
        "params": {
          "marker": "The marker of the info window that was closed"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnPolylineClickListener": {
    "classDes": "Callback interface for when a polyline is clicked.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnPolylineClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnPolylineClickListener.onPolylineClick(com.google.android.gms.maps.model.Polyline)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnPolylineClickListener#onPolylineClick(com.google.android.gms.maps.model.Polyline)",
        "methodDes": "Called when a polyline is clicked. This is called on the Android UI thread.",
        "params": {
          "polyline": "The polyline that is clicked"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMapOptions": {
    "classDes": "Defines configuration GoogleMapOptions for a GoogleMap. These options can be used when adding a map to your application programmatically (as opposed to via XML). If you are using a MapFragment, you can pass these options in using the static factory method newInstance(GoogleMapOptions). If you are using a MapView, you can pass these options in using the constructor MapView(Context, GoogleMapOptions). If you add a map using XML, then you can apply these options using custom XML tags.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions",
    "methods": {
      "com.google.android.gms.maps.GoogleMapOptions.GoogleMapOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#GoogleMapOptions()",
        "methodDes": "Creates a new GoogleMapOptions object.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.ambientEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#ambientEnabled(boolean)",
        "methodDes": "Specifies whether ambient-mode styling should be enabled. The default value is false. When enabled, ambient-styled maps can be displayed when an Ambiactive device enters ambient mode.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.camera(com.google.android.gms.maps.model.CameraPosition)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#camera(com.google.android.gms.maps.model.CameraPosition)",
        "methodDes": "Specifies a the initial camera position for the map.",
        "params": {
          "camera": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.compassEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#compassEnabled(boolean)",
        "methodDes": "Specifies whether the compass should be enabled. See setCompassEnabled(boolean) for more details. The default value is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.createFromAttributes(android.content.Context,android.util.AttributeSet)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#createFromAttributes(android.content.Context, android.util.AttributeSet)",
        "methodDes": "Creates a GoogleMapsOptions from the AttributeSet.",
        "params": {
          "context": "",
          "set": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getAmbientEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getAmbientEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the ambientEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getCamera()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getCamera()",
        "methodDes": "",
        "params": {},
        "returns": "com.google.android.gms.maps.model.CameraPosition:the camera option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getCompassEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getCompassEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the compassEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getLatLngBoundsForCameraTarget()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getLatLngBoundsForCameraTarget()",
        "methodDes": "",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLngBounds:the LatLngBounds used to constrain the camera target, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getLiteMode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getLiteMode()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the liteMode option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getMapToolbarEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getMapToolbarEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the mapToolbarEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getMapType()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getMapType()",
        "methodDes": "",
        "params": {},
        "returns": "int:the mapType option, or -1 if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getMaxZoomPreference()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getMaxZoomPreference()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Float:the maximum zoom level preference, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getMinZoomPreference()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getMinZoomPreference()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Float:the minimum zoom level preference, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getRotateGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getRotateGesturesEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the rotateGesturesEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getScrollGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getScrollGesturesEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the scrollGesturesEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getScrollGesturesEnabledDuringRotateOrZoom()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getScrollGesturesEnabledDuringRotateOrZoom()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the scrollGesturesEnabledDuringRotateOrZoom option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getTiltGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getTiltGesturesEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the tiltGesturesEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getUseViewLifecycleInFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getUseViewLifecycleInFragment()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the useViewLifecycleInFragment option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getZOrderOnTop()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getZOrderOnTop()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the zOrderOnTop option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getZoomControlsEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getZoomControlsEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the zoomControlsEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.getZoomGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#getZoomGesturesEnabled()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.Boolean:the zoomGesturesEnabled option, or null if unspecified",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.latLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#latLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)",
        "methodDes": "Specifies a LatLngBounds to constrain the camera target, so that when users scroll and pan the map, the camera target does not move outside these bounds. See setLatLngBoundsForCameraTarget(LatLngBounds) for details.",
        "params": {
          "target": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.liteMode(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#liteMode(boolean)",
        "methodDes": "Specifies whether the map should be created in lite mode. The default value is false. If lite mode is enabled, maps will load as static images. This improves performance in the case where a lot of maps need to be displayed at the same time, for example in a scrolling list, however lite-mode maps cannot be panned or zoomed by the user, or tilted or rotated at all.",
        "params": {
          "mode": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.mapToolbarEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#mapToolbarEnabled(boolean)",
        "methodDes": "Specifies whether the mapToolbar should be enabled. See setMapToolbarEnabled(boolean) for more details. The default value is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.mapType(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#mapType(int)",
        "methodDes": "Specifies a change to the initial map type.",
        "params": {
          "type": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.maxZoomPreference(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#maxZoomPreference(float)",
        "methodDes": "Specifies a preferred upper bound for camera zoom. See setMaxZoomPreference(float) for details.",
        "params": {
          "preference": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.minZoomPreference(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#minZoomPreference(float)",
        "methodDes": "Specifies a preferred lower bound for camera zoom. See setMinZoomPreference(float) for details.",
        "params": {
          "preference": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.rotateGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#rotateGesturesEnabled(boolean)",
        "methodDes": "Specifies whether rotate gestures should be enabled. See setRotateGesturesEnabled(boolean) for more details. The default value is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.scrollGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#scrollGesturesEnabled(boolean)",
        "methodDes": "Specifies whether scroll gestures should be enabled. See setScrollGesturesEnabled(boolean) for more details. The default value is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.scrollGesturesEnabledDuringRotateOrZoom(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#scrollGesturesEnabledDuringRotateOrZoom(boolean)",
        "methodDes": "Specifies whether scroll gestures should be enabled during rotate and zoom gestures. See setScrollGesturesEnabledDuringRotateOrZoom(boolean) for more details. The default value is true.",
        "params": {
          "zoom": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.tiltGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#tiltGesturesEnabled(boolean)",
        "methodDes": "Specifies whether tilt gestures should be enabled. See setTiltGesturesEnabled(boolean) for more details. The default value is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.useViewLifecycleInFragment(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#useViewLifecycleInFragment(boolean)",
        "methodDes": "When using a MapFragment, this flag specifies whether the lifecycle of the map should be tied to the fragment\u0027s view or the fragment itself. The default value is false, tying the lifecycle of the map to the fragment. Using the lifecycle of the fragment allows faster rendering of the map when the fragment is detached and reattached, because the underlying GL context is preserved. This has the cost that detaching the fragment, but not destroying it, will not release memory used by the map. Using the lifecycle of a fragment\u0027s view means that a map is not reused when the fragment is detached and reattached. This will cause the map to re-render from scratch, which can take a few seconds. It also means that while a fragment is detached, and therefore has no view, all GoogleMap methods will throw NullPointerException.",
        "params": {
          "fragment": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.zOrderOnTop(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#zOrderOnTop(boolean)",
        "methodDes": "Control whether the map view\u0027s surface is placed on top of its window. See setZOrderOnTop(boolean) for more details. Note that this will cover all other views that could appear on the map (e.g., the zoom controls, the my location button).",
        "params": {
          "top": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.zoomControlsEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#zoomControlsEnabled(boolean)",
        "methodDes": "Specifies whether the zoom controls should be enabled. See setZoomControlsEnabled(boolean) for more details. The default value is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMapOptions.zoomGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMapOptions#zoomGesturesEnabled(boolean)",
        "methodDes": "Specifies whether zoom gestures should be enabled. See setZoomGesturesEnabled(boolean) for more details. The default value is true.",
        "params": {
          "enabled": ""
        },
        "returns": "com.google.android.gms.maps.GoogleMapOptions:the GoogleMapOptions",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.GroundOverlay": {
    "classDes": "A ground overlay is an image that is fixed to a map. A ground overlay has the following properties: Position There are two ways to specify the position of the ground overlay: Using a location: You must provide an image of the ground overlay, a LatLng to which the anchor will be fixed and the width of the overlay (in meters). The anchor is, by default, 50% from the top of the image and 50% from the left of the image. This can be changed. You can optionally provide the height of the overlay (in meters). If you do not provide the height of the overlay, it will be automatically calculated to preserve the proportions of the image. Using a Bounds: You must provide a LatLngBounds which will contain the image. You must specify the position of the ground overlay before it is added to the map, otherwise an IllegalArgumentException will be thrown when the ground overlay is added to the map. Furthermore, you must only specify the position using one of these methods in the GroundOverlayOptions object; otherwise an IllegalStateException will be thrown when specifying using a second method. Image The image (as an BitmapDescriptor) to be used for this overlay. The image will be scaled to fit the position provided. You must specify an image before adding the ground overlay to the map; if not an IllegalArgumentException will be thrown when it is added to the map. Bearing The amount that the image should be rotated in a clockwise direction. The center of the rotation will be the image\u0027s anchor. This is optional and the default bearing is 0, i.e., the image is aligned so that up is north. zIndex The order in which this ground overlay is drawn with respect to other overlays (including Polylines and TileOverlays, but not Markers). An overlay with a larger zIndex is drawn over overlays with smaller zIndexes. The order of overlays with the same zIndex value is arbitrary. This is optional and the default zIndex is 0. Transparency Transparency of the ground overlay in the range [0..1] where 0 means the overlay is opaque and 1 means the overlay is fully transparent. If the specified bitmap is already partially transparent, the transparency of each pixel will be scaled accordingly (for example, if a pixel in the bitmap has an alpha value of 200 and you specify the transparency of the ground overlay as 0.25, then the pixel will be rendered on the screen with an alpha value of 150). Specification of this property is optional and the default transparency is 0 (opaque). Visibility Indicates if the ground overlay is visible or invisible, i.e. whether it is drawn on the map. An invisible ground overlay is not drawn, but retains all of its other properties. This is optional and the default visibility is true, i.e., visible. Clickability If you want to handle events fired when the user clicks the ground overlay, set this property to true. You can change this value at any time. The default is false. If this property is set to true, your app will receive notifications to the GoogleMap.OnGroundOverlayClickListener registered through setOnGroundOverlayClickListener(GoogleMap.OnGroundOverlayClickListener). Tag An Object associated with the ground overlay. For example, the Object can contain data about what the ground overlay represents. This is easier than storing a separate Map\u003cGroundOverlay, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. Methods in this class must be called on the Android UI thread. If not, an IllegalStateException will be thrown at runtime. Example GoogleMap map \u003d ...; // get a map. BitmapDescriptor imageDescriptor \u003d ...; // get an image. LatLngBounds bounds \u003d ...; // get a bounds // Adds a ground overlay with 50% transparency. GroundOverlay groundOverlay \u003d map.addGroundOverlay(new GroundOverlayOptions() .image(imageDescriptor) .positionFromBounds(bounds) .transparency(0.5)).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay",
    "methods": {
      "com.google.android.gms.maps.model.GroundOverlay.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#equals(java.lang.Object)",
        "methodDes": "Tests if this GroundOverlay is equal to another.",
        "params": {
          "other": "an Object"
        },
        "returns": "boolean:true if both objects are the same object, that is, this \u003d\u003d other",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getBearing()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getBearing()",
        "methodDes": "Gets the bearing of the ground overlay in degrees clockwise from north.",
        "params": {},
        "returns": "float:the bearing of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getBounds()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getBounds()",
        "methodDes": "Gets the bounds for the ground overlay. This ignores the rotation of the ground overlay.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLngBounds:a LatLngBounds that contains the ground overlay, ignoring rotation",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getHeight()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getHeight()",
        "methodDes": "Gets the height of the ground overlay.",
        "params": {},
        "returns": "float:the height of the ground overlay in meters",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getId()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getId()",
        "methodDes": "Gets this ground overlay\u0027s id. The id will be unique amongst all GroundOverlays on a map.",
        "params": {},
        "returns": "java.lang.String:this ground overlay\u0027s id",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getPosition()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getPosition()",
        "methodDes": "Gets the location of the anchor point.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:the position on the map (a LatLng)",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getTag()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getTag()",
        "methodDes": "Gets the tag for the circle.",
        "params": {},
        "returns": "java.lang.Object:the tag if a tag was set with setTag; null if no tag has been set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getTransparency()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getTransparency()",
        "methodDes": "Gets the transparency of this ground overlay.",
        "params": {},
        "returns": "float:the transparency of this ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getWidth()",
        "methodDes": "Gets the width of the ground overlay.",
        "params": {},
        "returns": "float:the width of the ground overlay in meters",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#getZIndex()",
        "methodDes": "Gets the zIndex of this ground overlay.",
        "params": {},
        "returns": "float:the zIndex of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#isClickable()",
        "methodDes": "Gets the clickability of the ground overlay. If the ground overlay is clickable, your app will receive notifications to the GoogleMap.OnGroundOverlayClickListener when the user clicks the ground overlay. The event listener is registered through setOnGroundOverlayClickListener(GoogleMap.OnGroundOverlayClickListener).",
        "params": {},
        "returns": "boolean:true if the ground overlay is clickable; otherwise, returns false",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#isVisible()",
        "methodDes": "Gets the visibility of this ground overlay. Note that this does not return whether the ground overlay is actually on screen, but whether it will be drawn if it is contained in the camera\u0027s viewport.",
        "params": {},
        "returns": "boolean:this ground overlay\u0027s visibility",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.remove()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#remove()",
        "methodDes": "Removes this ground overlay from the map. After a ground overlay has been removed, the behavior of all its methods is undefined.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setBearing(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setBearing(float)",
        "methodDes": "Sets the bearing of the ground overlay (the direction that the vertical axis of the ground overlay points) in degrees clockwise from north. The rotation is performed about the anchor point.",
        "params": {
          "bearing": "bearing in degrees clockwise from north"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setClickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setClickable(boolean)",
        "methodDes": "Sets the clickability of the ground overlay. If the ground overlay is clickable, your app will receive notifications to the GoogleMap.OnGroundOverlayClickListener when the user clicks the ground overlay. The event listener is registered through setOnGroundOverlayClickListener(GoogleMap.OnGroundOverlayClickListener).",
        "params": {
          "clickable": "New clickability setting for the ground overlay"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setDimensions(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#public-void-setdimensions-float-width,-float-height",
        "methodDes": "Sets the dimensions of the ground overlay. The image will be stretched to fit the dimensions.",
        "params": {
          "width": "width in meters",
          "height": "height in meters"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setDimensions(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setDimensions(float)",
        "methodDes": "Sets the width of the ground overlay. The height of the ground overlay will be adapted accordingly to preserve aspect ratio.",
        "params": {
          "width": "width in meters"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setImage(com.google.android.gms.maps.model.BitmapDescriptor)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setImage(com.google.android.gms.maps.model.BitmapDescriptor)",
        "methodDes": "Sets the image for the Ground Overlay. The new image will occupy the same bounds as the old image.",
        "params": {
          "imageDescriptor": "the BitmapDescriptor to use for this ground overlay"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setPosition(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setPosition(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Sets the position of the ground overlay by changing the location of the anchor point. Preserves all other properties of the image.",
        "params": {
          "latLng": "a LatLng that is the new location to place the anchor point"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setPositionFromBounds(com.google.android.gms.maps.model.LatLngBounds)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setPositionFromBounds(com.google.android.gms.maps.model.LatLngBounds)",
        "methodDes": "Sets the position of the ground overlay by fitting it to the given LatLngBounds. This method will ignore the rotation (bearing) of the ground overlay when positioning it, but the bearing will still be used when drawing it.",
        "params": {
          "bounds": "a LatLngBounds in which to place the ground overlay"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setTag(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setTag(java.lang.Object)",
        "methodDes": "Sets the tag for the ground overlay. You can use this property to associate an arbitrary Object with this ground overlay. For example, the Object can contain data about what the ground overlay represents. This is easier than storing a separate Map\u003cGroundOverlay, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. It is your responsibility to call setTag(null) to clear the tag when you no longer need it, to prevent memory leaks in your app.",
        "params": {
          "tag": "if null, the tag is cleared"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setTransparency(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setTransparency(float)",
        "methodDes": "Sets the transparency of this ground overlay. See the documentation at the top of this class for more information.",
        "params": {
          "transparency": "a float in the range [0..1] where 0 means that the ground overlay is opaque and 1 means that the ground overlay is transparent"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setVisible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setVisible(boolean)",
        "methodDes": "Sets the visibility of this ground overlay. When not visible, a ground overlay is not drawn, but it keeps all of its other properties.",
        "params": {
          "visible": "if true, then the ground overlay is visible; if false, it is not"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlay.setZIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlay#setZIndex(float)",
        "methodDes": "Sets the zIndex of this ground overlay. See the documentation at the top of this class for more information.",
        "params": {
          "zIndex": "the zIndex of this ground overlay"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.IndoorBuilding": {
    "classDes": "Represents a building. Two IndoorBuildings are .equal() if the physical building they represent is the same. However, if a building\u0027s structural model changes, e.g., due to an update to Google\u0027s building models, then an old IndoorBuilding object and a new IndoorBuilding object will be .equal(), but might have different contents.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorBuilding",
    "methods": {
      "com.google.android.gms.maps.model.IndoorBuilding.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorBuilding#equals(java.lang.Object)",
        "methodDes": "Tests if this IndoorBuilding is equal to another.",
        "params": {
          "other": "an Object"
        },
        "returns": "boolean:true if both objects are the same object, that is, this \u003d\u003d other",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorBuilding.getActiveLevelIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorBuilding#getActiveLevelIndex()",
        "methodDes": "Gets the index in the list returned by getLevels() of the level that is currently active in this building (default if no active level was previously set).",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorBuilding.getDefaultLevelIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorBuilding#getDefaultLevelIndex()",
        "methodDes": "Gets the index in the list returned by getLevels() of the default level for this building.",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorBuilding.getLevels()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorBuilding#getLevels()",
        "methodDes": "Gets the levels in the building. While a level is usually enclosed by a single building, a level might be enclosed by several buildings (e.g., a carpark level might span multiple buildings). The levels are in \u0027display order\u0027 from top to bottom.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.IndoorLevel\u003e:the List",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorBuilding.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorBuilding#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorBuilding.isUnderground()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorBuilding#isUnderground()",
        "methodDes": "Returns true if the building is entirely underground.",
        "params": {},
        "returns": "boolean:the boolean",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnPolygonClickListener": {
    "classDes": "Callback interface for when a polygon is clicked.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnPolygonClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnPolygonClickListener.onPolygonClick(com.google.android.gms.maps.model.Polygon)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnPolygonClickListener#onPolygonClick(com.google.android.gms.maps.model.Polygon)",
        "methodDes": "Called when a polygon is clicked. This is called on the Android UI thread.",
        "params": {
          "polygon": "The polygon that is clicked"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.MapStyleOptions": {
    "classDes": "Defines styling options for a GoogleMap. With style options you can customize the presentation of the standard Google map styles, changing the visual display of features like roads, parks, and other points of interest. As well as changing the style of these features, you can also hide features entirely. This means that you can emphasize particular components of the map or make the map complement the content of your app. Developer Guide For more information, read the developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MapStyleOptions",
    "methods": {
      "com.google.android.gms.maps.model.MapStyleOptions.MapStyleOptions(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MapStyleOptions#MapStyleOptions(java.lang.String)",
        "methodDes": "Creates a new set of map style options based on the given JSON styling string.",
        "params": {
          "options": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MapStyleOptions.loadRawResourceStyle(android.content.Context,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MapStyleOptions#loadRawResourceStyle(android.content.Context, int)",
        "methodDes": "Creates a new set of map style options based on the a JSON styling string loaded from a raw resource identifier.",
        "params": {
          "clientContext": "Client context for the supplied resourceId",
          "resourceId": "Id of a raw resource containing the styling JSON"
        },
        "returns": "com.google.android.gms.maps.model.MapStyleOptions:A reference to this MapStyleOptions to allow call chaining",
        "Exceptions": {
          "android.content.res.Resources.NotFoundException": "if resourceId is not a valid raw resource id or the resource could not be read"
        }
      },
      "com.google.android.gms.maps.model.MapStyleOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MapStyleOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.CircleOptions": {
    "classDes": "Defines options for a Circle. Developer Guide For more information, read the Shapes developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions",
    "methods": {
      "com.google.android.gms.maps.model.CircleOptions.CircleOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#CircleOptions()",
        "methodDes": "Creates circle options.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.center(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#center(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Sets the center using a LatLng. The center must not be null. This method is mandatory because there is no default center.",
        "params": {
          "center": "The geographic center as a LatLng"
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.clickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#clickable(boolean)",
        "methodDes": "Specifies whether this circle is clickable. The default setting is false.",
        "params": {
          "clickable": ""
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object with a new clickability setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.fillColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#fillColor(int)",
        "methodDes": "Sets the fill color. The fill color is the color inside the circle, in the integer format specified by Color. If TRANSPARENT is used then no fill is drawn. By default the fill color is transparent (0x00000000).",
        "params": {
          "color": "color in the Color format"
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.getCenter()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#getCenter()",
        "methodDes": "Returns the center as a LatLng.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:The geographic center as a LatLng",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.getFillColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#getFillColor()",
        "methodDes": "Returns the fill color.",
        "params": {},
        "returns": "int:The color in the Color format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.getRadius()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#getRadius()",
        "methodDes": "Returns the circle\u0027s radius, in meters.",
        "params": {},
        "returns": "double:The radius in meters",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.getStrokeColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#getStrokeColor()",
        "methodDes": "Returns the stroke color.",
        "params": {},
        "returns": "int:The color in the Color format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.getStrokePattern()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#getStrokePattern()",
        "methodDes": "Returns the stroke pattern set in this CircleOptions object for the circle\u0027s outline.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e:the stroke pattern of the circle\u0027s outline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.getStrokeWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#getStrokeWidth()",
        "methodDes": "Returns the stroke width.",
        "params": {},
        "returns": "float:The width in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#getZIndex()",
        "methodDes": "Returns the zIndex.",
        "params": {},
        "returns": "float:The zIndex value",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#isClickable()",
        "methodDes": "Gets the clickability setting for the circle.",
        "params": {},
        "returns": "boolean:true if the circle is clickable; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#isVisible()",
        "methodDes": "Checks whether the circle is visible.",
        "params": {},
        "returns": "boolean:true if the circle is visible; false if it is invisible",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.radius(double)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#radius(double)",
        "methodDes": "Sets the radius in meters. The radius must be zero or greater. The default radius is zero.",
        "params": {
          "radius": "radius in meters"
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.strokeColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#strokeColor(int)",
        "methodDes": "Sets the stroke color. The stroke color is the color of this circle\u0027s outline, in the integer format specified by Color. If TRANSPARENT is used then no outline is drawn. By default the stroke color is black (0xff000000).",
        "params": {
          "color": "color in the Color format"
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.strokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#strokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)",
        "methodDes": "Sets a stroke pattern for the circle\u0027s outline. The default stroke pattern is solid, represented by null.",
        "params": {
          "pattern": ""
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object with a new stroke pattern set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.strokeWidth(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#strokeWidth(float)",
        "methodDes": "Sets the stroke width. The stroke width is the width (in screen pixels) of the circle\u0027s outline. It must be zero or greater. If it is zero then no outline is drawn. The default width is 10 pixels.",
        "params": {
          "width": "width in screen pixels"
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.visible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#visible(boolean)",
        "methodDes": "Sets the visibility. If this circle is not visible then it is not drawn, but all other state is preserved.",
        "params": {
          "visible": "false to make this circle invisible"
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CircleOptions.zIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CircleOptions#zIndex(float)",
        "methodDes": "Sets the zIndex. Overlays (such as circles) with higher zIndices are drawn above those with lower indices. By default the zIndex is 0.0.",
        "params": {
          "zIndex": "zIndex value"
        },
        "returns": "com.google.android.gms.maps.model.CircleOptions:this CircleOptions object",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.CustomCap": {
    "classDes": "Bitmap overlay centered at the start or end vertex of a Polyline, orientated according to the direction of the line\u0027s first or last edge and scaled with respect to the line\u0027s stroke width. CustomCap can be applied to Polyline with any stroke pattern.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CustomCap",
    "methods": {
      "com.google.android.gms.maps.model.CustomCap.CustomCap(com.google.android.gms.maps.model.BitmapDescriptor)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CustomCap#CustomCap(com.google.android.gms.maps.model.BitmapDescriptor)",
        "methodDes": "Constructs a new CustomCap with default reference stroke width of 10 pixels (equal to the default stroke width, see width(float)).",
        "params": {
          "bitmapDescriptor": "Descriptor of the bitmap to be used. Must not be null"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CustomCap.CustomCap(com.google.android.gms.maps.model.BitmapDescriptor,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CustomCap#public-customcap-bitmapdescriptor-bitmapdescriptor,-float-refwidth",
        "methodDes": "Constructs a new CustomCap.",
        "params": {
          "bitmapDescriptor": "Descriptor of the bitmap to be used. Must not be null",
          "refWidth": "Stroke width, in pixels, for which the cap bitmap at its native dimension is designed. Must be positive"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.CustomCap.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.CustomCap.bitmapDescriptor": {
        "des": "Descriptor of the bitmap to be overlaid at the start or end vertex.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CustomCap#public-final-bitmapdescriptor-bitmapdescriptor"
      },
      "com.google.android.gms.maps.model.CustomCap.refWidth": {
        "des": "Reference stroke width (in pixels) - the stroke width for which the cap bitmap at its native dimension is designed.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/CustomCap#public-final-float-refwidth"
      }
    }
  },
  "com.google.android.gms.maps.model.Circle": {
    "classDes": "A circle on the earth\u0027s surface (spherical cap). A circle has the following properties. Center The center of the Circle is specified as a LatLng. Radius The radius of the circle, specified in meters. It should be zero or greater. Stroke Width The width of the circle\u0027s outline in screen pixels. The width is constant and independent of the camera\u0027s zoom level. The default value is 10. Stroke Color The color of the circle outline in ARGB format, the same format used by Color. The default value is black (0xff000000). Stroke pattern Solid (default, represented by null) or a sequence of PatternItem objects to be repeated along the circle\u0027s outline. Available PatternItem types: Gap (defined by gap length in pixels), Dash (defined by stroke width and dash length in pixels) and Dot (circular, centered on the circle\u0027s outline, diameter defined by stroke width in pixels). Fill Color The color of the circle fill in ARGB format, the same format used by Color. The default value is transparent (0x00000000). Z-Index The order in which this tile overlay is drawn with respect to other overlays (including GroundOverlays, TileOverlays, Polylines, and Polygons but not Markers). An overlay with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays with the same z-index is arbitrary. The default zIndex is 0. Visibility Indicates if the circle is visible or invisible, i.e., whether it is drawn on the map. An invisible circle is not drawn, but retains all of its other properties. The default is true, i.e., visible. Tag An Object associated with the circle. For example, the Object can contain data about what the circle represents. This is easier than storing a separate Map\u003cCircle, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. Methods in this class must be called on the Android UI thread. If not, an IllegalStateException will be thrown at runtime. Example GoogleMap map; // ... get a map. // Add a circle in Sydney Circle circle \u003d map.addCircle(new CircleOptions() .center(new LatLng(-33.87365, 151.20689)) .radius(10000) .strokeColor(Color.RED) .fillColor(Color.BLUE)); Note that the current map renderer is unable to draw the circle fill if the circle encompasses either the North or South pole. However, the outline will still be drawn correctly. Developer Guide For more information, read the Shapes developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle",
    "methods": {
      "com.google.android.gms.maps.model.Circle.getCenter()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getCenter()",
        "methodDes": "Returns the center as a LatLng.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:The geographic center as a LatLng",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getFillColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getFillColor()",
        "methodDes": "Returns the fill color of this Circle.",
        "params": {},
        "returns": "int:The fill color of the circle in ARGB format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getId()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getId()",
        "methodDes": "Gets this circle\u0027s id. The id will be unique amongst all Circles on a map.",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getRadius()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getRadius()",
        "methodDes": "Returns the circle\u0027s radius, in meters.",
        "params": {},
        "returns": "double:The radius in meters",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getStrokeColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getStrokeColor()",
        "methodDes": "Returns the stroke color.",
        "params": {},
        "returns": "int:The color of the circle in ARGB format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getStrokePattern()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getStrokePattern()",
        "methodDes": "Returns the stroke pattern of this circle\u0027s outline.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e:the stroke pattern",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getStrokeWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getStrokeWidth()",
        "methodDes": "Returns the stroke width.",
        "params": {},
        "returns": "float:The width in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getTag()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getTag()",
        "methodDes": "Gets the tag for the circle.",
        "params": {},
        "returns": "java.lang.Object:the tag if a tag was set with setTag; null if no tag has been set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#getZIndex()",
        "methodDes": "Returns the zIndex.",
        "params": {},
        "returns": "float:The zIndex of this circle",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#isClickable()",
        "methodDes": "Gets the clickability of the circle. If the circle is clickable, your app will receive notifications to the GoogleMap.OnCircleClickListener when the user clicks the circle. The event listener is registered through setOnCircleClickListener(GoogleMap.OnCircleClickListener).",
        "params": {},
        "returns": "boolean:true if the circle is clickable; false if it is not clickable",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#isVisible()",
        "methodDes": "Checks whether the circle is visible.",
        "params": {},
        "returns": "boolean:true if the circle is visible; false if it is invisible",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.remove()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#remove()",
        "methodDes": "Removes this circle from the map. After a circle has been removed, the behavior of all its methods is undefined.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setCenter(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setCenter(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Sets the center using a LatLng. The center must not be null, as there is no default value.",
        "params": {
          "center": "The geographic center of the circle, specified as a LatLng"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setClickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setClickable(boolean)",
        "methodDes": "Sets the clickability of the circle. If the circle is clickable, your app will receive notifications to the GoogleMap.OnCircleClickListener when the user clicks the circle. The event listener is registered through setOnCircleClickListener(GoogleMap.OnCircleClickListener).",
        "params": {
          "clickable": "New clickability setting for the circle"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setFillColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setFillColor(int)",
        "methodDes": "Sets the fill color. The fill color is the color inside the circle, in the integer format specified by Color. If TRANSPARENT is used then no fill is drawn.",
        "params": {
          "color": "The color in the Color format"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setRadius(double)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setRadius(double)",
        "methodDes": "Sets the radius in meters. The radius must be zero or greater.",
        "params": {
          "radius": "The radius, in meters"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setStrokeColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setStrokeColor(int)",
        "methodDes": "Sets the stroke color. The stroke color is the color of this circle\u0027s outline, in the integer format specified by Color. If TRANSPARENT is used then no outline is drawn.",
        "params": {
          "color": "The stroke color in the Color format"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setStrokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setStrokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)",
        "methodDes": "Sets the stroke pattern of the circle\u0027s outline. The default stroke pattern is solid, represented by null.",
        "params": {
          "pattern": "the stroke pattern"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setStrokeWidth(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setStrokeWidth(float)",
        "methodDes": "Sets the stroke width. The stroke width is the width (in screen pixels) of the circle\u0027s outline. It must be zero or greater. If it is zero then no outline is drawn. The default value is 10.",
        "params": {
          "width": "The stroke width, in screen pixels"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setTag(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setTag(java.lang.Object)",
        "methodDes": "Sets the tag for the circle. You can use this property to associate an arbitrary Object with this circle. For example, the Object can contain data about what the circle represents. This is easier than storing a separate Map\u003cCircle, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. It is your responsibility to call setTag(null) to clear the tag when you no longer need it, to prevent memory leaks in your app.",
        "params": {
          "tag": "if null, the tag is cleared"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setVisible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setVisible(boolean)",
        "methodDes": "Sets the visibility of the circle. If this circle is not visible then it will not be drawn. All other state is preserved. Circles are visible by default.",
        "params": {
          "visible": "true to make this circle visible; false to make it invisible"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Circle.setZIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Circle#setZIndex(float)",
        "methodDes": "Sets the zIndex. Overlays (such as circles) with higher zIndices are drawn above those with lower indices.",
        "params": {
          "zIndex": "The zIndex value"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.Tile": {
    "classDes": "Contains information about a Tile that is returned by a TileProvider.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Tile",
    "methods": {
      "com.google.android.gms.maps.model.Tile.Tile(int,int,byte[])": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Tile#Tile(int, int, byte[])",
        "methodDes": "Constructs a Tile.",
        "params": {
          "width": "the width of the image in pixels",
          "height": "the height of the image in pixels",
          "data": "A byte array containing the image data. The image will be created from this data by calling decodeByteArray(byte[], int, int)"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Tile.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Tile#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.Tile.data": {
        "des": "A byte array containing the image data.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Tile#public-final-byte[]-data"
      },
      "com.google.android.gms.maps.model.Tile.height": {
        "des": "The height of the image encoded by data in pixels.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Tile#public-final-int-height"
      },
      "com.google.android.gms.maps.model.Tile.width": {
        "des": "The width of the image encoded by data in pixels.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Tile#public-final-int-width"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.OnMarkerClickListener": {
    "classDes": "Defines signatures for methods that are called when a marker is clicked or tapped.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMarkerClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMarkerClickListener.onMarkerClick(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMarkerClickListener#onMarkerClick(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Called when a marker has been clicked or tapped. Note: the first thing that happens when a marker is clicked or tapped is that any currently showing info window is closed, and the GoogleMap.OnInfoWindowCloseListener is triggered. Then the OnMarkerClickListener is triggered. Therefore, calling isInfoWindowShown() on any marker from the OnMarkerClickListener will return false.",
        "params": {
          "marker": "The marker that was clicked"
        },
        "returns": "boolean:true if the listener has consumed the event (i.e., the default behavior should not occur); false otherwise (i.e., the default behavior should occur). The default behavior is for the camera to move to the marker and an info window to appear",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.Marker": {
    "classDes": "An icon placed at a particular point on the map\u0027s surface. A marker icon is drawn oriented against the device\u0027s screen rather than the map\u0027s surface; i.e., it will not necessarily change orientation due to map rotations, tilting, or zooming. A marker has the following properties: Alpha Sets the opacity of the marker. Defaults to 1.0. Anchor The point on the image that will be placed at the LatLng position of the marker. This defaults to 50% from the left of the image and at the bottom of the image. Position The LatLng value for the marker\u0027s position on the map. You can change this value at any time if you want to move the marker. Title A text string that\u0027s displayed in an info window when the user taps the marker. You can change this value at any time. Snippet Additional text that\u0027s displayed below the title. You can change this value at any time. Icon A bitmap that\u0027s displayed for the marker. If the icon is left unset, a default icon is displayed. You can specify an alternative coloring of the default icon using defaultMarker(float). Drag Status If you want to allow the user to drag the marker, set this property to true. You can change this value at any time. The default is false. Visibility By default, the marker is visible. To make the marker invisible, set this property to false. You can change this value at any time. Flat or Billboard If the marker is flat against the map, it will remain stuck to the map as the camera rotates and tilts but will still remain the same size as the camera zooms, unlike a GroundOverlay. If the marker is a billboard, it will always be drawn facing the camera and will rotate and tilt with the camera. The default is a billboard (false) Rotation The rotation of the marker in degrees clockwise about the marker\u0027s anchor point. The axis of rotation is perpendicular to the marker. A rotation of 0 corresponds to the default position of the marker. When the marker is flat on the map, the default position is North aligned and the rotation is such that the marker always remains flat on the map. When the marker is a billboard, the default position is pointing up and the rotation is such that the marker is always facing the camera. The default value is 0. zIndex The draw order for the marker. The markers are drawn in order of the zIndex, with the highest zIndex marker drawn on top. By setting the zIndex property for each marker, you can control which tap target your user is most likely to hit. The default value is 0. Tag An Object associated with the marker. For example, the Object can contain data about what the marker represents. This is easier than storing a separate Map\u003cMarker, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. Methods in this class must be called on the Android UI thread. If not, an IllegalStateException will be thrown at runtime. Example GoogleMap map \u003d ... // get a map. // Add a marker at San Francisco. Marker marker \u003d map.addMarker(new MarkerOptions() .position(new LatLng(37.7750, 122.4183)) .title(\"San Francisco\") .snippet(\"Population: 776733\")); Developer Guide For more information, read the Markers developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker",
    "methods": {
      "com.google.android.gms.maps.model.Marker.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#equals(java.lang.Object)",
        "methodDes": "Tests if this Marker is equal to another.",
        "params": {
          "other": "an Object"
        },
        "returns": "boolean:true if both objects are the same object, that is, this \u003d\u003d other",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getAlpha()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getAlpha()",
        "methodDes": "Gets the alpha of the marker.",
        "params": {},
        "returns": "float:the alpha of the marker in the range [0, 1]",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getId()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getId()",
        "methodDes": "Gets this marker\u0027s id. The id will be unique amongst all Markers on a map.",
        "params": {},
        "returns": "java.lang.String:this marker\u0027s id",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getPosition()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getPosition()",
        "methodDes": "Returns the position of the marker.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:A LatLng object specifying the marker\u0027s current position",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getRotation()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getRotation()",
        "methodDes": "Gets the rotation of the marker.",
        "params": {},
        "returns": "float:the rotation of the marker in degrees clockwise from the default position",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getSnippet()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getSnippet()",
        "methodDes": "Gets the snippet of the marker.",
        "params": {},
        "returns": "java.lang.String:A string containing the marker\u0027s snippet",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getTag()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getTag()",
        "methodDes": "Gets the tag for the marker.",
        "params": {},
        "returns": "java.lang.Object:the tag if a tag was set with setTag; null if no tag has been set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getTitle()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getTitle()",
        "methodDes": "Gets the title of the marker.",
        "params": {},
        "returns": "java.lang.String:A string containing the marker\u0027s title",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#getZIndex()",
        "methodDes": "Returns the zIndex of the marker.",
        "params": {},
        "returns": "float:this marker\u0027s zIndex",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.hideInfoWindow()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#hideInfoWindow()",
        "methodDes": "Hides the info window if it is shown from this marker. This method has no effect if this marker is not visible.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.isDraggable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#isDraggable()",
        "methodDes": "Gets the draggability of the marker. When a marker is draggable, it can be moved by the user by long pressing on the marker.",
        "params": {},
        "returns": "boolean:true if the marker is draggable; otherwise, returns false",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.isFlat()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#isFlat()",
        "methodDes": "Gets the flat setting of the Marker.",
        "params": {},
        "returns": "boolean:true if the marker is flat against the map; false if the marker should face the camera",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.isInfoWindowShown()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#isInfoWindowShown()",
        "methodDes": "Returns whether the info window is currently shown above this marker. This does not consider whether or not the info window is actually visible on screen.",
        "params": {},
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#isVisible()",
        "methodDes": "Gets the visibility setting of this marker. Note that this does not indicate whether the marker is within the screen\u0027s viewport. It indicates whether the marker will be drawn if it is contained in the screen\u0027s viewport.",
        "params": {},
        "returns": "boolean:this marker\u0027s visibility",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.remove()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#remove()",
        "methodDes": "Removes this marker from the map. After a marker has been removed, the behavior of all its methods is undefined.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setAlpha(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setAlpha(float)",
        "methodDes": "Sets the alpha (opacity) of the marker. This is a value from 0 to 1, where 0 means the marker is completely transparent and 1 means the marker is completely opaque.",
        "params": {
          "alpha": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setAnchor(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setAnchor(float, float)",
        "methodDes": "Sets the anchor point for the marker. The anchor specifies the point in the icon image that is anchored to the marker\u0027s position on the Earth\u0027s surface. The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0], where (0, 0) is the top-left corner of the image, and (1, 1) is the bottom-right corner. The anchoring point in a W x H image is the nearest discrete grid point in a (W + 1) x (H + 1) grid, obtained by scaling the then rounding. For example, in a 4 x 2 image, the anchor point (0.7, 0.6) resolves to the grid point at (3, 1). *-----+-----+-----+-----* | | | | | | | | | | +-----+-----+-----+-----+ | | | X | | (U, V) \u003d (0.7, 0.6) | | | | | *-----+-----+-----+-----* *-----+-----+-----+-----* | | | | | | | | | | +-----+-----+-----X-----+ (X, Y) \u003d (3, 1) | | | | | | | | | | *-----+-----+-----+-----*.",
        "params": {
          "anchorU": "u-coordinate of the anchor, as a ratio of the image width (in the range [0, 1])",
          "anchorV": "v-coordinate of the anchor, as a ratio of the image height (in the range [0, 1])"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setDraggable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setDraggable(boolean)",
        "methodDes": "Sets the draggability of the marker. When a marker is draggable, it can be moved by the user by long pressing on the marker.",
        "params": {
          "draggable": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setFlat(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setFlat(boolean)",
        "methodDes": "Sets whether this marker should be flat against the map true or a billboard facing the camera false.",
        "params": {
          "flat": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setIcon(com.google.android.gms.maps.model.BitmapDescriptor)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setIcon(com.google.android.gms.maps.model.BitmapDescriptor)",
        "methodDes": "Sets the icon for the marker.",
        "params": {
          "iconDescriptor": "if null, the default marker is used"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setInfoWindowAnchor(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setInfoWindowAnchor(float, float)",
        "methodDes": "Specifies the point in the marker image at which to anchor the info window when it is displayed. This is specified in the same coordinate system as the anchor. See setAnchor(float, float) for more details. The default is the top middle of the image.",
        "params": {
          "anchorU": "u-coordinate of the info window anchor, as a ratio of the image width (in the range [0, 1])",
          "anchorV": "v-coordinate of the info window anchor, as a ratio of the image height (in the range [0, 1])"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setPosition(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setPosition(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Sets the location of the marker.",
        "params": {
          "position": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setRotation(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setRotation(float)",
        "methodDes": "Sets the rotation of the marker in degrees clockwise about the marker\u0027s anchor point. The axis of rotation is perpendicular to the marker. A rotation of 0 corresponds to the default position of the marker.",
        "params": {
          "rotation": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setSnippet(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setSnippet(java.lang.String)",
        "methodDes": "Sets the snippet of the marker.",
        "params": {
          "snippet": "if null, the snippet is cleared"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setTag(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setTag(java.lang.Object)",
        "methodDes": "Sets the tag for the marker. You can use this property to associate an arbitrary Object with this marker. For example, the Object can contain data about what the marker represents. This is easier than storing a separate Map\u003cMarker, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. It is your responsibility to call setTag(null) to clear the tag when you no longer need it, to prevent memory leaks in your app.",
        "params": {
          "tag": "if null, the tag is cleared"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setTitle(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setTitle(java.lang.String)",
        "methodDes": "Sets the title of the marker.",
        "params": {
          "title": "if null, the title is cleared"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setVisible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setVisible(boolean)",
        "methodDes": "Sets the visibility of this marker. If set to false and an info window is currently showing for this marker, this will hide the info window.",
        "params": {
          "visible": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.setZIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#setZIndex(float)",
        "methodDes": "Sets the zIndex of the marker.",
        "params": {
          "index": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Marker.showInfoWindow()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker#showInfoWindow()",
        "methodDes": "Shows the info window of this marker on the map, if this marker isVisible().",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.MapFragment": {
    "classDes": "A Map component in an app. This fragment is the simplest way to place a map in an application. It\u0027s a wrapper around a view of a map to automatically handle the necessary life cycle needs. Being a fragment, this component can be added to an activity\u0027s layout file simply with the XML below. \u003cfragment class\u003d\"com.google.android.gms.maps.MapFragment\" android:layout_width\u003d\"match_parent\" android:layout_height\u003d\"match_parent\"/\u003eA GoogleMap must be acquired using getMapAsync(OnMapReadyCallback). This class automatically initializes the maps system and the view. A view can be removed when the MapFragment\u0027s onDestroyView() method is called and the useViewLifecycleInFragment(boolean) option is set. When this happens the MapFragment is no longer valid until the view is recreated again later when the MapFragment\u0027s onCreateView(LayoutInflater, ViewGroup, Bundle) method is called. Any objects obtained from the GoogleMap are associated with the view. It\u0027s important to not hold on to objects (e.g. Marker) beyond the view\u0027s life. Otherwise it will cause a memory leak as the view cannot be released. Use this class only if you are targeting API 12 and above. Otherwise, use SupportMapFragment by adding the Android support library to your build path. Developer Guide For more information, read the Google Maps SDK for Android developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment",
    "methods": {
      "com.google.android.gms.maps.MapFragment.MapFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#MapFragment()",
        "methodDes": "Creates a map fragment. This constructor is public only for use by an inflater. Use newInstance() to create a MapFragment programmatically.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)",
        "methodDes": "Sets a callback object which will be triggered when the GoogleMap instance is ready to be used. Note that: This method must be called from the main thread. The callback will be executed in the main thread. In the case where Google Play services is not installed on the user\u0027s device, the callback will not be triggered until the user installs it. In the rare case where the GoogleMap is destroyed immediately after creation, the callback is not triggered. The GoogleMap object provided by the callback is non-null.",
        "params": {
          "callback": "The callback object that will be triggered when the map is ready to be used"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.newInstance(com.google.android.gms.maps.GoogleMapOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#public-static-mapfragment-newinstance-googlemapoptions-options",
        "methodDes": "Creates a map fragment with the given options.",
        "params": {
          "options": ""
        },
        "returns": "com.google.android.gms.maps.MapFragment:the MapFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.newInstance()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#newInstance()",
        "methodDes": "Creates a map fragment, using default options.",
        "params": {},
        "returns": "com.google.android.gms.maps.MapFragment:the MapFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onActivityCreated(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onActivityCreated(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "created": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onAttach(android.app.Activity)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onAttach(android.app.Activity)",
        "methodDes": "",
        "params": {
          "attach": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onCreate(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onCreate(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "create": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)",
        "methodDes": "",
        "params": {
          "inflater": "",
          "group": "",
          "bundle": ""
        },
        "returns": "android.view.View:the View",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onDestroy()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onDestroy()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onDestroyView()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onDestroyView()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onEnterAmbient(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onEnterAmbient(android.os.Bundle)",
        "methodDes": "You must call this method from the parent WearableActivity\u0027s corresponding method.",
        "params": {
          "ambient": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onExitAmbient()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onExitAmbient()",
        "methodDes": "You must call this method from the parent WearableActivity\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onInflate(android.app.Activity, android.util.AttributeSet, android.os.Bundle)",
        "methodDes": "Parse attributes during inflation from a view hierarchy into the arguments we handle.",
        "params": {
          "activity": "",
          "set": "",
          "bundle": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onLowMemory()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onLowMemory()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onPause()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onPause()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onResume()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onResume()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onSaveInstanceState(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onSaveInstanceState(android.os.Bundle)",
        "methodDes": "Provides a Bundle to store the state of the Fragment before it gets destroyed. It can later be retrieved when onCreate(Bundle) is called again.",
        "params": {
          "state": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onStart()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onStart()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.onStop()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#onStop()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.MapFragment.setArguments(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapFragment#setArguments(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "arguments": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback": {
    "classDes": "Callback interface for when the Street View panorama is ready to be used. Once an instance of this interface is set on a StreetViewPanoramaFragment or StreetViewPanoramaView object, the onStreetViewPanoramaReady(StreetViewPanorama) method is triggered when the panorama is ready to be used and provides a non-null instance of StreetViewPanorama. If Google Play services is not installed on the device, the user will be prompted to install it, and the onStreetViewPanoramaReady(StreetViewPanorama) method will only be triggered when the user has installed it and returned to the app.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/OnStreetViewPanoramaReadyCallback",
    "methods": {
      "com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback.onStreetViewPanoramaReady(com.google.android.gms.maps.StreetViewPanorama)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/OnStreetViewPanoramaReadyCallback#onStreetViewPanoramaReady(com.google.android.gms.maps.StreetViewPanorama)",
        "methodDes": "Called when the Street View panorama is ready to be used.",
        "params": {
          "panorama": "A non-null instance of a StreetViewPanorama associated with the StreetViewPanoramaFragment or StreetViewPanoramaView that defines the callback"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.IndoorLevel": {
    "classDes": "Represents a level in a building. IndoorLevel objects are only equal by id. It is possible that may have different contents. While a level is usually enclosed by a single building, a level might be enclosed by several buildings (e.g., a carpark level might span multiple buildings).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorLevel",
    "methods": {
      "com.google.android.gms.maps.model.IndoorLevel.activate()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorLevel#activate()",
        "methodDes": "Sets this level as the visible level in its building. If a level is enclosed in several buildings, then all those buildings will have this level set as active.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorLevel.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorLevel#equals(java.lang.Object)",
        "methodDes": "Tests if this IndoorLevel is equal to another.",
        "params": {
          "other": "an Object"
        },
        "returns": "boolean:true if both objects are the same object, that is, this \u003d\u003d other",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorLevel.getName()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorLevel#getName()",
        "methodDes": "Localized display name for the level, e.g. \"Ground floor\". Returns an empty string if no name is defined.",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorLevel.getShortName()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorLevel#getShortName()",
        "methodDes": "Localized short display name for the level, e.g. \"1\". Returns an empty string if no shortName is defined.",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.IndoorLevel.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/IndoorLevel#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.TileOverlay": {
    "classDes": "A Tile Overlay is a set of images which are displayed on top of the base map tiles. These tiles may be transparent, allowing you to add features to existing maps. A tile overlay has the following properties: Tile Provider The TileProvider provides the images that are used in the tile overlay. You must specify the tile provider before it is added to the map. The tile provider cannot be changed once it has been added; however, you can modify the behavior of the tile provider to return different images for specific coordinates. If the tiles provided by the tile provider change, you must call clearTileCache() afterwards to ensure that the previous tiles are no longer rendered. Z-Index The order in which this tile overlay is drawn with respect to other overlays (including GroundOverlays, Circles, Polylines, and Polygons but not Markers). An overlay with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays with the same z-index is arbitrary. The default zIndex is 0. Transparency Transparency of the tile overlay in the range [0..1] where 0 means the overlay is opaque and 1 means the overlay is fully transparent. If the specified bitmap is already partially transparent, the transparency of each pixel will be scaled accordingly (for example, if a pixel in the bitmap has an alpha value of 200 and you specify the transparency of the tile overlay as 0.25, then the pixel will be rendered on the screen with an alpha value of 150). Specification of this property is optional and the default transparency is 0 (opaque). Visibility Indicates if the tile overlay is visible or invisible, i.e., whether it is drawn on the map. An invisible tile overlay is not drawn, but retains all of its other properties. The default is true, i.e., visible. You must only call methods in this class on the main thread. Failure to do so will result in an IllegalStateException. Tile Coordinates Note that the world is projected using the Mercator projection (see Wikipedia) with the left (west) side of the map corresponding to -180 degrees of longitude and the right (east) side of the map corresponding to 180 degrees of longitude. To make the map square, the top (north) side of the map corresponds to 85.0511 degrees of latitude and the bottom (south) side of the map corresponds to -85.0511 degrees of latitude. Areas outside this latitude range are not rendered. At each zoom level, the map is divided into tiles and only the tiles that overlap the screen are downloaded and rendered. Each tile is square and the map is divided into tiles as follows: At zoom level 0, one tile represents the entire world. The coordinates of that tile are (x, y) \u003d (0, 0). At zoom level 1, the world is divided into 4 tiles arranged in a 2 x 2 grid. ... At zoom level N, the world is divided into 4N tiles arranged in a 2N x 2N grid. Note that the minimum zoom level that the camera supports (which can depend on various factors) is GoogleMap.getMinZoomLevel and the maximum zoom level is GoogleMap.getMaxZoomLevel. The coordinates of the tiles are measured from the top left (northwest) corner of the map. At zoom level N, the x values of the tile coordinates range from 0 to 2N - 1 and increase from west to east and the y values range from 0 to 2N - 1 and increase from north to south. Example GoogleMap map; // ... get a map. TileProvider tileProvider; // ... create a tile provider. TileOverlay tileOverlay \u003d map.addTileOverlay( new TileOverlayOptions().tileProvider(tileProvider)).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay",
    "methods": {
      "com.google.android.gms.maps.model.TileOverlay.clearTileCache()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#clearTileCache()",
        "methodDes": "Clears the tile cache so that all tiles will be requested again from the TileProvider. The current tiles from this tile overlay will also be cleared from the map after calling this method. The API maintains a small in-memory cache of tiles. If you want to cache tiles for longer, you should implement an on-disk cache.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#equals(java.lang.Object)",
        "methodDes": "Tests if this TileOverlay is equal to another.",
        "params": {
          "other": "an Object"
        },
        "returns": "boolean:true if both objects are the same object, that is, this \u003d\u003d other",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.getFadeIn()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#getFadeIn()",
        "methodDes": "Gets whether the overlay tiles should fade in.",
        "params": {},
        "returns": "boolean:true if the tiles are to fade in; false if they are not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.getId()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#getId()",
        "methodDes": "Gets this tile overlay\u0027s id.",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.getTransparency()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#getTransparency()",
        "methodDes": "Gets the transparency of this tile overlay.",
        "params": {},
        "returns": "float:the transparency of this tile overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#getZIndex()",
        "methodDes": "Gets the zIndex of this tile overlay.",
        "params": {},
        "returns": "float:the zIndex of the tile overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#isVisible()",
        "methodDes": "Gets the visibility of this tile overlay. Note that this does not return whether the tile overlay is actually within the screen\u0027s viewport, but whether it will be drawn if it is contained in the screen\u0027s viewport.",
        "params": {},
        "returns": "boolean:this tile overlay\u0027s visibility",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.remove()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#remove()",
        "methodDes": "Removes this tile overlay from the map.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.setFadeIn(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#setFadeIn(boolean)",
        "methodDes": "Sets whether the overlay tiles should fade in.",
        "params": {
          "fadeIn": "true to make the tiles fade in; false to render them instantly"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.setTransparency(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#setTransparency(float)",
        "methodDes": "Sets the transparency of this tile overlay. See the documentation at the top of this class for more information.",
        "params": {
          "transparency": "a float in the range [0..1] where 0 means that the tile overlay is opaque and 1 means that the tile overlay is transparent"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.setVisible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#setVisible(boolean)",
        "methodDes": "Sets the visibility of this tile overlay. When not visible, a tile overlay is not drawn, but it keeps all its other properties. Tile overlays are visible by default.",
        "params": {
          "visible": "true to make this overlay visible; false to make it invisible"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.TileOverlay.setZIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileOverlay#setZIndex(float)",
        "methodDes": "Sets the zIndex of this tile overlay. See the documentation at the top of this class for more information.",
        "params": {
          "zIndex": "the zIndex of this tile overlay"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder": {
    "classDes": "Builds panorama cameras.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder",
    "methods": {
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.Builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#StreetViewPanoramaCamera.Builder()",
        "methodDes": "",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.Builder(com.google.android.gms.maps.model.StreetViewPanoramaCamera)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#public-streetviewpanoramacamera.builder-streetviewpanoramacamera-previous",
        "methodDes": "",
        "params": {
          "previous": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.bearing(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#bearing(float)",
        "methodDes": "Sets the direction that the camera is pointing in, in degrees clockwise from north.",
        "params": {
          "bearing": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.build()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#build()",
        "methodDes": "Builds a StreetViewPanoramaCamera.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera:the StreetViewPanoramaCamera",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.orientation(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#orientation(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)",
        "methodDes": "Sets the camera tilt and bearing based upon the given orientation\u0027s tilt and bearing.",
        "params": {
          "orientation": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.tilt(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#tilt(float)",
        "methodDes": "Sets the angle, in degrees, of the camera from the horizon of the panorama. This value is restricted to being between -90 (directly down) and 90 (directly up).",
        "params": {
          "tilt": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.zoom(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#zoom(float)",
        "methodDes": "Sets the zoom level of the camera. The original zoom level is set at 0. A zoom of 1 would double the magnification. The zoom is clamped between 0 and the maximum zoom level. The maximum zoom level can vary based upon the panorama. Clamped means that any value falling outside this range will be set to the closest extreme that falls within the range. For example, a value of -1 will be set to 0. Another example: If the maximum zoom for the panorama is 19, and the value is given as 20, it will be set to 19. Note that the camera zoom need not be an integer value.",
        "params": {
          "zoom": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder:the Builder",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.bearing": {
        "des": "",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#public-float-bearing"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.tilt": {
        "des": "",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#public-float-tilt"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder.zoom": {
        "des": "",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera.Builder#public-float-zoom"
      }
    }
  },
  "com.google.android.gms.maps.model.JointType": {
    "classDes": "Joint types for Polyline and outline of Polygon.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/JointType",
    "methods": {},
    "fields": {
      "com.google.android.gms.maps.model.JointType.BEVEL": {
        "des": "Flat bevel on the outside of the joint.",
        "value": "1",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/JointType#BEVEL"
      },
      "com.google.android.gms.maps.model.JointType.DEFAULT": {
        "des": "Default: Mitered joint, with fixed pointed extrusion equal to half the stroke width on the outside of the joint.",
        "value": "0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/JointType#DEFAULT"
      },
      "com.google.android.gms.maps.model.JointType.ROUND": {
        "des": "Rounded on the outside of the joint by an arc of radius equal to half the stroke width, centered at the vertex.",
        "value": "2",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/JointType#ROUND"
      }
    }
  },
  "com.google.android.gms.maps.model.Polyline": {
    "classDes": "A polyline is a list of points, where line segments are drawn between consecutive points. A polyline has the following properties: Points The vertices of the line. Line segments are drawn between consecutive points. A polyline is not closed by default; to form a closed polyline, the start and end points must be the same. Width Line segment width in screen pixels. The width is constant and independent of the camera\u0027s zoom level. The default value is 10. Color Line segment color in ARGB format, the same format used by Color. The default value is black (0xff000000). Start/end cap Defines the shape to be used at the start or end of a polyline. Supported cap types: ButtCap, SquareCap, RoundCap (applicable for solid stroke pattern) and CustomCap (applicable for any stroke pattern). Default for both start and end: ButtCap. Joint type The joint type defines the shape to be used when joining adjacent line segments at all vertices of the polyline except the start and end vertices. See JointType for supported joint types. The default value is DEFAULT. Stroke pattern Solid (default, represented by null) or a sequence of PatternItem objects to be repeated along the line. Available PatternItem types: Gap (defined by gap length in pixels), Dash (defined by line width and dash length in pixels) and Dot (circular, centered on the line, diameter defined by line width in pixels). Z-Index The order in which this tile overlay is drawn with respect to other overlays (including GroundOverlays, TileOverlays, Circles, and Polygons but not Markers). An overlay with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays with the same z-index is arbitrary. The default zIndex is 0. Visibility Indicates if the polyline is visible or invisible, i.e., whether it is drawn on the map. An invisible polyline is not drawn, but retains all of its other properties. The default is true, i.e., visible. Geodesic status Indicates whether the segments of the polyline should be drawn as geodesics, as opposed to straight lines on the Mercator projection. A geodesic is the shortest path between two points on the Earth\u0027s surface. The geodesic curve is constructed assuming the Earth is a sphere Clickability If you want to handle events fired when the user clicks the polyline, set this property to true. You can change this value at any time. The default is false. If this property is set to true, your app will receive notifications to the GoogleMap.OnPolylineClickListener registered through setOnPolylineClickListener(GoogleMap.OnPolylineClickListener). Tag An Object associated with the polyline. For example, the Object can contain data about what the polyline represents. This is easier than storing a separate Map\u003cPolyline, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. Methods in this class must be called on the Android UI thread. If not, an IllegalStateException will be thrown at runtime. Example GoogleMap map; // ... get a map. // Add a thin red line from London to New York. Polyline line \u003d map.addPolyline(new PolylineOptions() .add(new LatLng(51.5, -0.1), new LatLng(40.7, -74.0)) .width(5) .color(Color.RED)); Developer Guide For more information, read the Shapes developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline",
    "methods": {
      "com.google.android.gms.maps.model.Polyline.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#equals(java.lang.Object)",
        "methodDes": "Tests if this Polyline is equal to another.",
        "params": {
          "other": "an Object"
        },
        "returns": "boolean:true if both objects are the same object, that is, this \u003d\u003d other",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getColor()",
        "methodDes": "Gets the color of this polyline.",
        "params": {},
        "returns": "int:the color in ARGB format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getEndCap()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getEndCap()",
        "methodDes": "Gets the cap at the end vertex of this polyline.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.Cap:the end cap type",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getId()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getId()",
        "methodDes": "Gets this polyline\u0027s id. The id will be unique amongst all Polylines on a map.",
        "params": {},
        "returns": "java.lang.String:this polyline\u0027s id",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getJointType()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getJointType()",
        "methodDes": "Gets the joint type used at all vertices of the polyline except the start and end vertices. See JointType for possible values.",
        "params": {},
        "returns": "int:the joint type",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getPattern()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getPattern()",
        "methodDes": "Gets the stroke pattern of this polyline.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e:the stroke pattern",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getPoints()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getPoints()",
        "methodDes": "Returns a snapshot of the vertices of this polyline at this time . The list returned is a copy of the list of vertices and so changes to the polyline\u0027s vertices will not be reflected by this list, nor will changes to this list be reflected by the polyline. To change the vertices of the polyline, call setPoints(List).",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e:the List",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getStartCap()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getStartCap()",
        "methodDes": "Gets the cap at the start vertex of this polyline.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.Cap:the start cap",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getTag()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getTag()",
        "methodDes": "Gets the tag for the polyline.",
        "params": {},
        "returns": "java.lang.Object:the tag if a tag was set with setTag; null if no tag has been set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getWidth()",
        "methodDes": "Gets the width of this polyline.",
        "params": {},
        "returns": "float:the width in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#getZIndex()",
        "methodDes": "Gets the zIndex of this polyline.",
        "params": {},
        "returns": "float:the zIndex of the polyline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#isClickable()",
        "methodDes": "Gets the clickability of the polyline. If the polyline is clickable, your app will receive notifications to the GoogleMap.OnPolylineClickListener when the user clicks the polyline. The event listener is registered through setOnPolylineClickListener(GoogleMap.OnPolylineClickListener).",
        "params": {},
        "returns": "boolean:true if the polyline is clickable; otherwise, returns false",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.isGeodesic()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#isGeodesic()",
        "methodDes": "Gets whether each segment of the line is drawn as a geodesic or not.",
        "params": {},
        "returns": "boolean:true if each segment is drawn as a geodesic; false if each segment is drawn as a straight line on the Mercator projection",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#isVisible()",
        "methodDes": "Gets the visibility of this polyline.",
        "params": {},
        "returns": "boolean:this polyline\u0027s visibility",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.remove()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#remove()",
        "methodDes": "Removes this polyline from the map. After a polyline has been removed, the behavior of all its methods is undefined.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setClickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setClickable(boolean)",
        "methodDes": "Sets the clickability of the polyline. If the polyline is clickable, your app will receive notifications to the GoogleMap.OnPolylineClickListener when the user clicks the polyline. The event listener is registered through setOnPolylineClickListener(GoogleMap.OnPolylineClickListener).",
        "params": {
          "clickable": "New clickability setting for the polyline"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setColor(int)",
        "methodDes": "Sets the color of this polyline.",
        "params": {
          "color": "the color in ARGB format"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setEndCap(com.google.android.gms.maps.model.Cap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setEndCap(com.google.android.gms.maps.model.Cap)",
        "methodDes": "Sets the cap at the end vertex of this polyline. The default end cap is ButtCap.",
        "params": {
          "endCap": "the end cap. Must not be null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setGeodesic(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setGeodesic(boolean)",
        "methodDes": "Sets whether to draw each segment of the line as a geodesic or not.",
        "params": {
          "geodesic": "if true, then each segment is drawn as a geodesic; if false, each segment is drawn as a straight line on the Mercator projection"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setJointType(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setJointType(int)",
        "methodDes": "Sets the joint type for all vertices of the polyline except the start and end vertices. See JointType for allowed values. The default value DEFAULT will be used if joint type is undefined or is not one of the allowed values.",
        "params": {
          "jointType": "the joint type"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setPattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setPattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)",
        "methodDes": "Sets the stroke pattern of the polyline. The default stroke pattern is solid, represented by null.",
        "params": {
          "pattern": "the stroke pattern"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setPoints(java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setPoints(java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e)",
        "methodDes": "Sets the points of this polyline. This method will take a copy of the points, so further mutations to points will have no effect on this polyline.",
        "params": {
          "points": "an list of LatLngs that are the vertices of the polyline"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setStartCap(com.google.android.gms.maps.model.Cap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setStartCap(com.google.android.gms.maps.model.Cap)",
        "methodDes": "Sets the cap at the start vertex of this polyline. The default start cap is ButtCap.",
        "params": {
          "startCap": "the start cap. Must not be null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setTag(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setTag(java.lang.Object)",
        "methodDes": "Sets the tag for the polyline. You can use this property to associate an arbitrary Object with this polyline. For example, the Object can contain data about what the polyline represents. This is easier than storing a separate Map\u003cPolyline, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. It is your responsibility to call setTag(null) to clear the tag when you no longer need it, to prevent memory leaks in your app.",
        "params": {
          "tag": "if null, the tag is cleared"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setVisible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setVisible(boolean)",
        "methodDes": "Sets the visibility of this polyline. When not visible, a polyline is not drawn, but it keeps all its other properties.",
        "params": {
          "visible": "if true, then the polyline is visible; if false, it is not"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setWidth(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setWidth(float)",
        "methodDes": "Sets the width of this polyline.",
        "params": {
          "width": "the width in screen pixels"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polyline.setZIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polyline#setZIndex(float)",
        "methodDes": "Sets the zIndex of this polyline. Polylines with higher zIndices are drawn above those with lower indices.",
        "params": {
          "zIndex": "the zIndex of this polyline"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.CameraUpdate": {
    "classDes": "Defines a camera move. An object of this type can be used to modify a map\u0027s camera by calling animateCamera(CameraUpdate), animateCamera(CameraUpdate, GoogleMap.CancelableCallback) or moveCamera(CameraUpdate). To obtain a CameraUpdate use the factory class CameraUpdateFactory. For example, to zoom in on a map, you can use the following code: GoogleMap map \u003d ...; map.animateCamera(CameraUpdateFactory.zoomIn()); Developer Guide For more information, read the Camera and View developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdate",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.maps.model.Dot": {
    "classDes": "An immutable class representing a dot used in the stroke pattern for a Polyline or the outline of a Polygon or Circle.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Dot",
    "methods": {
      "com.google.android.gms.maps.model.Dot.Dot()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Dot#Dot()",
        "methodDes": "Constructs a Dot.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Dot.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PatternItem#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.Polygon": {
    "classDes": "A polygon on the earth\u0027s surface. A polygon can be convex or concave, it may span the 180 meridian and it can have holes that are not filled in. It has the following properties: Outline The outline is specified by a list of vertices in clockwise or counterclockwise order. It is not necessary for the start and end points to coincide; if they do not, the polygon will be automatically closed. Line segments are drawn between consecutive points in the shorter of the two directions (east or west). Holes A hole is a region inside the polygon that is not filled. A hole is specified in exactly the same way as the outline. A hole must be fully contained within the outline. Multiple holes can be specified, however overlapping holes are not supported. Stroke Width Line segment width in screen pixels. The width is constant and independent of the camera\u0027s zoom level. The default value is 10. Stroke Color Line segment color in ARGB format, the same format used by Color. The default value is black (0xff000000). Stroke Joint Type The joint type defines the shape to be used when joining adjacent line segments at all vertices of the polygon\u0027s outline. See JointType for supported joint types. The default value is DEFAULT. Stroke pattern Solid (default, represented by null) or a sequence of PatternItem objects to be repeated along the polygon\u0027s outline. Available PatternItem types: Gap (defined by gap length in pixels), Dash (defined by stroke width and dash length in pixels) and Dot (circular, centered on the polygon\u0027s outline, diameter defined by stroke width in pixels). Fill Color Fill color in ARGB format, the same format used by Color. The default value is transparent (0x00000000). If the polygon geometry is not specified correctly (see above for Outline and Holes), then no fill will be drawn. Z-Index The order in which this polygon is drawn with respect to other overlays, including Polylines, Circles, GroundOverlays and TileOverlays, but not Markers. An overlay with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays with the same z-index value is arbitrary. The default is 0. Visibility Indicates if the polygon is visible or invisible, i.e., whether it is drawn on the map. An invisible polygon is not drawn, but retains all of its other properties. The default is true, i.e., visible. Geodesic status Indicates whether the segments of the polygon should be drawn as geodesics, as opposed to straight lines on the Mercator projection. A geodesic is the shortest path between two points on the Earth\u0027s surface. The geodesic curve is constructed assuming the Earth is a sphere Clickability If you want to handle events fired when the user clicks the polygon, set this property to true. You can change this value at any time. The default is false. If this property is set to true, your app will receive notifications to the GoogleMap.OnPolygonClickListener registered through setOnPolygonClickListener(GoogleMap.OnPolygonClickListener). Tag An Object associated with the polygon. For example, the Object can contain data about what the polygon represents. This is easier than storing a separate Map\u003cPolygon, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. Methods in this class must be called on the Android UI thread. If not, an IllegalStateException will be thrown at runtime. Example GoogleMap map; // ... get a map. // Add a triangle in the Gulf of Guinea Polygon polygon \u003d map.addPolygon(new PolygonOptions() .add(new LatLng(0, 0), new LatLng(0, 5), new LatLng(3, 5), new LatLng(0, 0)) .strokeColor(Color.RED) .fillColor(Color.BLUE)); Developer Guide For more information, read the Shapes developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon",
    "methods": {
      "com.google.android.gms.maps.model.Polygon.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#equals(java.lang.Object)",
        "methodDes": "Tests if this Polygon is equal to another.",
        "params": {
          "other": "an Object"
        },
        "returns": "boolean:true if both objects are the same object, that is, this \u003d\u003d other",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getFillColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getFillColor()",
        "methodDes": "Gets the fill color of this polygon.",
        "params": {},
        "returns": "int:the color in ARGB format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getHoles()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getHoles()",
        "methodDes": "Returns a snapshot of the holes of this polygon at this time . The list returned is a copy of the list of holes and so changes to the polygon\u0027s holes will not be reflected by this list, nor will changes to this list be reflected by the polygon.",
        "params": {},
        "returns": "java.util.List\u003cjava.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e\u003e:the List",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getId()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getId()",
        "methodDes": "Gets this polygon\u0027s id. The id will be unique amongst all Polygons on a map.",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getPoints()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getPoints()",
        "methodDes": "Returns a snapshot of the vertices of this polygon at this time . The list returned is a copy of the list of vertices and so changes to the polygon\u0027s vertices will not be reflected by this list, nor will changes to this list be reflected by the polygon. To change the vertices of the polygon, call setPoints(List).",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e:the List",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getStrokeColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getStrokeColor()",
        "methodDes": "Gets the stroke color of this polygon.",
        "params": {},
        "returns": "int:the color in ARGB format",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getStrokeJointType()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getStrokeJointType()",
        "methodDes": "Gets the stroke joint type used at all vertices of the polygon\u0027s outline. See JointType for possible values.",
        "params": {},
        "returns": "int:the stroke joint type",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getStrokePattern()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getStrokePattern()",
        "methodDes": "Gets the stroke pattern of this polygon\u0027s outline.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e:the stroke pattern",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getStrokeWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getStrokeWidth()",
        "methodDes": "Gets the stroke width of this polygon.",
        "params": {},
        "returns": "float:the width in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getTag()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getTag()",
        "methodDes": "Gets the tag for the polygon.",
        "params": {},
        "returns": "java.lang.Object:the tag if a tag was set with setTag; null if no tag has been set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#getZIndex()",
        "methodDes": "Gets the zIndex of this polygon.",
        "params": {},
        "returns": "float:the zIndex of the polygon",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#isClickable()",
        "methodDes": "Gets the clickability of the polygon. If the polygon is clickable, your app will receive notifications to the GoogleMap.OnPolygonClickListener when the user clicks the polygon. The event listener is registered through setOnPolygonClickListener(GoogleMap.OnPolygonClickListener).",
        "params": {},
        "returns": "boolean:true if the polygon is clickable; otherwise, returns false",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.isGeodesic()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#isGeodesic()",
        "methodDes": "Gets whether each segment of the line is drawn as a geodesic or not.",
        "params": {},
        "returns": "boolean:true if each segment is drawn as a geodesic; false if each segment is drawn as a straight line on the Mercator projection",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#isVisible()",
        "methodDes": "Gets the visibility of this polygon.",
        "params": {},
        "returns": "boolean:this polygon visibility",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.remove()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#remove()",
        "methodDes": "Removes the polygon from the map. After a polygon has been removed, the behavior of all its methods is undefined.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setClickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setClickable(boolean)",
        "methodDes": "Sets the clickability of the polygon. If the polygon is clickable, your app will receive notifications to the GoogleMap.OnPolygonClickListener when the user clicks the polygon. The event listener is registered through setOnPolygonClickListener(GoogleMap.OnPolygonClickListener).",
        "params": {
          "clickable": "New clickability setting for the polygon"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setFillColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setFillColor(int)",
        "methodDes": "Sets the fill color of this polygon.",
        "params": {
          "color": "the color in ARGB format"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setGeodesic(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setGeodesic(boolean)",
        "methodDes": "Sets whether to draw each segment of the line as a geodesic or not.",
        "params": {
          "geodesic": "if true, then each segment is drawn as a geodesic; if false, each segment is drawn as a straight line on the Mercator projection"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setHoles(java.util.List\u003c? extends java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setHoles(java.util.List\u003c? extends java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e\u003e)",
        "methodDes": "Sets the holes of this polygon. This method will take a copy of the holes, so further mutations to holes will have no effect on this polygon.",
        "params": {
          "holes": "an list of holes, where a hole is an list of LatLngs"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setPoints(java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setPoints(java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e)",
        "methodDes": "Sets the points of this polygon. This method will take a copy of the points, so further mutations to points will have no effect on this polygon.",
        "params": {
          "points": "a list of LatLngs that are the vertices of the polygon"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setStrokeColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setStrokeColor(int)",
        "methodDes": "Sets the stroke color of this polygon.",
        "params": {
          "color": "the color in ARGB format"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setStrokeJointType(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setStrokeJointType(int)",
        "methodDes": "Sets the joint type for all vertices of the polygon\u0027s outline. See JointType for allowed values. The default value DEFAULT will be used if joint type is undefined or is not one of the allowed values.",
        "params": {
          "jointType": "the stroke joint type"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setStrokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setStrokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)",
        "methodDes": "Sets the stroke pattern of the polygon\u0027s outline. The default stroke pattern is solid, represented by null.",
        "params": {
          "pattern": "the stroke pattern"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setStrokeWidth(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setStrokeWidth(float)",
        "methodDes": "Sets the stroke width of this polygon.",
        "params": {
          "width": "the width in display pixels"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setTag(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setTag(java.lang.Object)",
        "methodDes": "Sets the tag for the polygon. You can use this property to associate an arbitrary Object with this polygon. For example, the Object can contain data about what the polygon represents. This is easier than storing a separate Map\u003cPolygon, Object\u003e. As another example, you can associate a String ID corresponding to the ID from a data set. Google Maps SDK for Android neither reads nor writes this property. It is your responsibility to call setTag(null) to clear the tag when you no longer need it, to prevent memory leaks in your app.",
        "params": {
          "tag": "if null, the tag is cleared"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setVisible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setVisible(boolean)",
        "methodDes": "Sets the visibility of this polygon. When not visible, a polygon is not drawn, but it keeps all its other properties.",
        "params": {
          "visible": "if true, then the polygon is visible; if false, it is not"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Polygon.setZIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Polygon#setZIndex(float)",
        "methodDes": "Sets the zIndex of this polygon. Polygons with higher zIndices are drawn above those with lower indices.",
        "params": {
          "zIndex": "the zIndex of this polygon"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.StreetViewPanoramaView": {
    "classDes": "A View which displays a Street View panorama (with data obtained from the Google Maps service). When focused, it will capture keypresses and touch gestures to move the panorama. Users of this class must forward all the life cycle methods from the Activity or Fragment containing this view to the corresponding ones in this class. In particular, you must forward the following methods: onCreate(Bundle) onStart() onResume() onPause() onStop() onDestroy() onSaveInstanceState() onLowMemory() A StreetViewPanorama must be acquired using getStreetViewPanoramaAsync(OnStreetViewPanoramaReadyCallback). The StreetViewPanoramaView automatically initializes the Street View system and the view. For a simpler method of displaying a StreetViewPanorama use StreetViewPanoramaFragment (or SupportStreetViewPanoramaFragment) if you are looking to target earlier platforms. Note: You are advised not to add children to this view. Note: The Google Maps SDK for Android does not support multiple StreetViewPanoramaView objects in one activity.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanoramaView.StreetViewPanoramaView(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#StreetViewPanoramaView(android.content.Context)",
        "methodDes": "",
        "params": {
          "view": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.StreetViewPanoramaView(android.content.Context,android.util.AttributeSet,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#public-streetviewpanoramaview-context-context,-attributeset-attrs,-int-defstyle",
        "methodDes": "",
        "params": {
          "context": "",
          "attrs": "",
          "defStyle": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.StreetViewPanoramaView(android.content.Context,android.util.AttributeSet)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#StreetViewPanoramaView(android.content.Context, android.util.AttributeSet)",
        "methodDes": "",
        "params": {
          "context": "",
          "set": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.StreetViewPanoramaView(android.content.Context,com.google.android.gms.maps.StreetViewPanoramaOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#StreetViewPanoramaView(android.content.Context, com.google.android.gms.maps.StreetViewPanoramaOptions)",
        "methodDes": "",
        "params": {
          "context": "",
          "options": ""
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.getStreetViewPanoramaAsync(com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#getStreetViewPanoramaAsync(com.google.android.gms.maps.OnStreetViewPanoramaReadyCallback)",
        "methodDes": "Sets a callback object which will be triggered when the StreetViewPanorama instance is ready to be used. Note that: In the case where Google Play services is not installed on the user\u0027s device, the callback will not be triggered until the user installs it. The callback will be executed in the main thread. The StreetViewPanorama object provided by the callback is non-null.",
        "params": {
          "callback": "The callback object that will be triggered when the panorama is ready to be used"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onCreate(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onCreate(android.os.Bundle)",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {
          "create": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onDestroy()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onDestroy()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onLowMemory()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onLowMemory()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onPause()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onPause()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onResume()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onResume()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onSaveInstanceState(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onSaveInstanceState(android.os.Bundle)",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {
          "state": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onStart()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onStart()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanoramaView.onStop()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanoramaView#onStop()",
        "methodDes": "You must call this method from the parent Activity/Fragment\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.LatLngBounds": {
    "classDes": "An immutable class representing a latitude/longitude aligned rectangle.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds",
    "methods": {
      "com.google.android.gms.maps.model.LatLngBounds.LatLngBounds(com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#LatLngBounds(com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Creates a new bounds based on a southwest and a northeast corner. The bounds conceptually includes all points where: the latitude is in the range [northeast.latitude, southwest.latitude]; the longitude is in the range [southwest.longtitude, northeast.longitude] if southwest.longtitude ?? northeast.longitude; and the longitude is in the range [southwest.longitude, 180) ?? [-180, northeast.longitude] if southwest.longtitude \u003e northeast.longitude.",
        "params": {
          "southwest": "southwest corner",
          "northeast": "northeast corner"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#builder()",
        "methodDes": "Creates a new builder.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLngBounds.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.contains(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#contains(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Returns whether this contains the given LatLng.",
        "params": {
          "point": "the LatLng to test"
        },
        "returns": "boolean:true if this contains the given point; false if not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.createFromAttributes(android.content.Context,android.util.AttributeSet)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#createFromAttributes(android.content.Context, android.util.AttributeSet)",
        "methodDes": "Creates a LatLngBounds from the AttributeSet.",
        "params": {
          "context": "",
          "set": ""
        },
        "returns": "com.google.android.gms.maps.model.LatLngBounds:the LatLngBounds",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.getCenter()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#getCenter()",
        "methodDes": "Returns the center of this LatLngBounds. The center is simply the average of the coordinates (taking into account if it crosses the antimeridian). This is approximately the geographical center (it would be exact if the Earth were a perfect sphere). It will not necessarily be the center of the rectangle as drawn on the map due to the Mercator projection.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:A LatLng that is the center of the LatLngBounds",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.including(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#including(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Returns a new LatLngBounds that extends this LatLngBounds to include the given LatLng. This will return the smallest LatLngBounds that contains both this and the extra point. In particular, it will consider extending the bounds both in the eastward and westward directions (one of which may cross the antimeridian) and choose the smaller of the two. In the case that both directions result in a LatLngBounds of the same size, this will extend it in the eastward direction.",
        "params": {
          "point": "a LatLng to be included in the new bounds"
        },
        "returns": "com.google.android.gms.maps.model.LatLngBounds:A new LatLngBounds that contains this and the extra point",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.LatLngBounds.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.LatLngBounds.northeast": {
        "des": "Northeast corner of the bound.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#public-final-latlng-northeast"
      },
      "com.google.android.gms.maps.model.LatLngBounds.southwest": {
        "des": "Southwest corner of the bound.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/LatLngBounds#public-final-latlng-southwest"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.OnGroundOverlayClickListener": {
    "classDes": "Callback interface for when a ground overlay is clicked.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnGroundOverlayClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnGroundOverlayClickListener.onGroundOverlayClick(com.google.android.gms.maps.model.GroundOverlay)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnGroundOverlayClickListener#onGroundOverlayClick(com.google.android.gms.maps.model.GroundOverlay)",
        "methodDes": "Called when a ground overlay is clicked. This is called on the Android UI thread.",
        "params": {
          "groundOverlay": "The ground overlay that is clicked"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.Cap": {
    "classDes": "Immutable cap that can be applied at the start or end vertex of a Polyline.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap",
    "methods": {
      "com.google.android.gms.maps.model.Cap.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Cap.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Cap.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Cap.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.CancelableCallback": {
    "classDes": "A callback interface for reporting when a task is complete or canceled.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.CancelableCallback",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.CancelableCallback.onCancel()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.CancelableCallback#onCancel()",
        "methodDes": "Invoked when a task is canceled.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.CancelableCallback.onFinish()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.CancelableCallback#onFinish()",
        "methodDes": "Invoked when a task is complete.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener": {
    "classDes": "Callback interface for when the camera motion starts.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveStartedListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener.onCameraMoveStarted(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveStartedListener#onCameraMoveStarted(int)",
        "methodDes": "Called when the camera starts moving after it has been idle or when the reason for camera motion has changed. Do not update or animate the camera from within this method. This is called on the Android UI thread.",
        "params": {
          "reason": "The reason for the camera change. Possible values: REASON_GESTURE: User gestures on the map. REASON_API_ANIMATION: Default animations resulting from user interaction. REASON_DEVELOPER_ANIMATION: Developer animations"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener.REASON_API_ANIMATION": {
        "des": "Non-gesture animation initiated in response to user actions. For example: zoom buttons, my location button, or marker clicks.",
        "value": "2",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveStartedListener#REASON_API_ANIMATION"
      },
      "com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener.REASON_DEVELOPER_ANIMATION": {
        "des": "Developer initiated animation.",
        "value": "3",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveStartedListener#REASON_DEVELOPER_ANIMATION"
      },
      "com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener.REASON_GESTURE": {
        "des": "Camera motion initiated in response to user gestures on the map. For example: pan, tilt, pinch to zoom, or rotate.",
        "value": "1",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveStartedListener#REASON_GESTURE"
      }
    }
  },
  "com.google.android.gms.maps.model.BitmapDescriptor": {
    "classDes": "Defines a Bitmap image. For a marker, this class can be used to set the image of the marker icon. For a ground overlay, it can be used to set the image to place on the surface of the earth. To obtain a BitmapDescriptor use the factory class BitmapDescriptorFactory. Example of setting the icon of a marker BitmapDescriptor. GoogleMap map \u003d ... // get a map. // Add a marker at San Francisco with an azure colored marker. Marker marker \u003d map.add(new MarkerOptions() .position(new LatLng(37.7750, 122.4183)) .title(\"San Francisco\") .snippet(\"Population: 776733\")) .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptor",
    "methods": {},
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnMyLocationClickListener": {
    "classDes": "Callback interface for when the My Location dot (which signifies the user\u0027s location) is clicked.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMyLocationClickListener.onMyLocationClick(android.location.Location)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationClickListener#onMyLocationClick(android.location.Location)",
        "methodDes": "Called when the My Location dot is clicked. This is called on the Android UI thread.",
        "params": {
          "location": "The current location of the My Location dot"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.RuntimeRemoteException": {
    "classDes": "A RuntimeException wrapper for RemoteException. Thrown when normally there is something seriously wrong and there is no way to recover.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/RuntimeRemoteException",
    "methods": {
      "com.google.android.gms.maps.model.RuntimeRemoteException.RuntimeRemoteException(android.os.RemoteException)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/RuntimeRemoteException#RuntimeRemoteException(android.os.RemoteException)",
        "methodDes": "",
        "params": {
          "exception": ""
        },
        "returns": "",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.StreetViewSource": {
    "classDes": "Identifiers to limit Street View searches to selected sources. See setPosition(LatLng, StreetViewSource), setPosition(LatLng, int, StreetViewSource), position(LatLng, Integer, StreetViewSource) or position(LatLng, StreetViewSource).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewSource",
    "methods": {
      "com.google.android.gms.maps.model.StreetViewSource.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewSource#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewSource.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewSource#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewSource.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewSource#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewSource.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewSource#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.StreetViewSource.DEFAULT": {
        "des": "Default: Uses the default sources of Street View, searches will not be limited to specific sources.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewSource#DEFAULT"
      },
      "com.google.android.gms.maps.model.StreetViewSource.OUTDOOR": {
        "des": "Limits Street View searches to outdoor collections. Indoor collections are not included in search results. Note also that the search only returns panoramas where it\u0027s possible to determine whether they\u0027re indoors or outdoors. For example, photo spheres are not returned because it\u0027s unknown whether they are indoors or outdoors.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewSource#OUTDOOR"
      }
    }
  },
  "com.google.android.gms.maps.Projection": {
    "classDes": "A projection is used to translate between on screen location and geographic coordinates on the surface of the Earth (LatLng). Screen location is in screen pixels (not display pixels) with respect to the top left corner of the map (and not necessarily of the whole screen).",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/Projection",
    "methods": {
      "com.google.android.gms.maps.Projection.fromScreenLocation(android.graphics.Point)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/Projection#fromScreenLocation(android.graphics.Point)",
        "methodDes": "Returns the geographic location that corresponds to a screen location. The screen location is specified in screen pixels (not display pixels) relative to the top left of the map (not the top left of the whole screen).",
        "params": {
          "point": "A Point on the screen in screen pixels"
        },
        "returns": "com.google.android.gms.maps.model.LatLng:The LatLng corresponding to the point on the screen, or null if the ray through the given screen point does not intersect the ground plane (this might be the case if the map is heavily tilted)",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.Projection.getVisibleRegion()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/Projection#getVisibleRegion()",
        "methodDes": "Gets a projection of the viewing frustum for converting between screen coordinates and geo-latitude/longitude coordinates.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.VisibleRegion:The projection of the viewing frustum in its current state",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.Projection.toScreenLocation(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/Projection#toScreenLocation(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Returns a screen location that corresponds to a geographical coordinate (LatLng). The screen location is in screen pixels (not display pixels) relative to the top left of the map (not of the whole screen).",
        "params": {
          "location": "A LatLng on the map to convert to a screen location"
        },
        "returns": "android.graphics.Point:A Point representing the screen location in screen pixels",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnPoiClickListener": {
    "classDes": "A listener for POI taps.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnPoiClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnPoiClickListener.onPoiClick(com.google.android.gms.maps.model.PointOfInterest)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnPoiClickListener#onPoiClick(com.google.android.gms.maps.model.PointOfInterest)",
        "methodDes": "Called when a POI is clicked or tapped. This is called on the Android UI thread.",
        "params": {
          "poi": "The point of interest that was clicked or tapped"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaChangeListener": {
    "classDes": "A listener for when the Street View panorama loads a new panorama.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaChangeListener",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaChangeListener.onStreetViewPanoramaChange(com.google.android.gms.maps.model.StreetViewPanoramaLocation)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaChangeListener#onStreetViewPanoramaChange(com.google.android.gms.maps.model.StreetViewPanoramaLocation)",
        "methodDes": "The StreetViewPanorama performs an animated transition from one location to another when the user performs a manual navigation action. This callback is called when the transition animation has occurred and the rendering of the first panorama has occurred. This callback also occurs when the developer sets a position and the rendering of the first panorama has occurred. It is possible that not all the panoramas have loaded when this callback is activated. Implementations of this method are always invoked on the main thread.",
        "params": {
          "location": "Location the StreetViewPanorama is changed to. null if it is an invalid panorama"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.ButtCap": {
    "classDes": "Cap that is squared off exactly at the start or end vertex of a Polyline with solid stroke pattern, equivalent to having no additional cap beyond the start or end vertex. This is the default cap type at start and end vertices of Polylines with solid stroke pattern.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/ButtCap",
    "methods": {
      "com.google.android.gms.maps.model.ButtCap.ButtCap()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/ButtCap#ButtCap()",
        "methodDes": "Constructs a ButtCap.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.ButtCap.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.SupportMapFragment": {
    "classDes": "A Map component in an app. This fragment is the simplest way to place a map in an application. It\u0027s a wrapper around a view of a map to automatically handle the necessary life cycle needs. Being a fragment, this component can be added to an activity\u0027s layout file simply with the XML below. \u003cfragment class\u003d\"com.google.android.gms.maps.SupportMapFragment\" android:layout_width\u003d\"match_parent\" android:layout_height\u003d\"match_parent\"/\u003eA GoogleMap must be acquired using getMapAsync(OnMapReadyCallback). This class automatically initializes the maps system and the view. A view can be removed when the SupportMapFragment\u0027s onDestroyView() method is called and the useViewLifecycleInFragment(boolean) option is set. When this happens the SupportMapFragment is no longer valid until the view is recreated again later when the SupportMapFragment\u0027s onCreateView(LayoutInflater, ViewGroup, Bundle) method is called. Any objects obtained from the GoogleMap are associated with the view. It\u0027s important to not hold on to objects (e.g. Marker) beyond the view\u0027s life. Otherwise it will cause a memory leak as the view cannot be released. To use this class, you must include the Android support library in your build path. Developer Guide For more information, read the Google Maps SDK for Android developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment",
    "methods": {
      "com.google.android.gms.maps.SupportMapFragment.SupportMapFragment()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#SupportMapFragment()",
        "methodDes": "Creates a map fragment. This constructor is public only for use by an inflater. Use newInstance() to create a SupportMapFragment programmatically.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)",
        "methodDes": "Sets a callback object which will be triggered when the GoogleMap instance is ready to be used. Note that: This method must be called from the main thread. The callback will be executed in the main thread. In the case where Google Play services is not installed on the user\u0027s device, the callback will not be triggered until the user installs it. In the rare case where the GoogleMap is destroyed immediately after creation, the callback is not triggered. The GoogleMap object provided by the callback is non-null.",
        "params": {
          "callback": "The callback object that will be triggered when the map is ready to be used"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.newInstance()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#newInstance()",
        "methodDes": "Creates a map fragment, using default options.",
        "params": {},
        "returns": "com.google.android.gms.maps.SupportMapFragment:the SupportMapFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.newInstance(com.google.android.gms.maps.GoogleMapOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#public-static-supportmapfragment-newinstance-googlemapoptions-options",
        "methodDes": "Creates a map fragment with the given options.",
        "params": {
          "options": ""
        },
        "returns": "com.google.android.gms.maps.SupportMapFragment:the SupportMapFragment",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onActivityCreated(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onActivityCreated(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "created": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onAttach(android.app.Activity)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onAttach(android.app.Activity)",
        "methodDes": "",
        "params": {
          "attach": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onCreate(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onCreate(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "create": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle)",
        "methodDes": "",
        "params": {
          "inflater": "",
          "group": "",
          "bundle": ""
        },
        "returns": "android.view.View:the View",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onDestroy()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onDestroy()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onDestroyView()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onDestroyView()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onEnterAmbient(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onEnterAmbient(android.os.Bundle)",
        "methodDes": "You must call this method from the parent WearableActivity\u0027s corresponding method.",
        "params": {
          "ambient": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onExitAmbient()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onExitAmbient()",
        "methodDes": "You must call this method from the parent WearableActivity\u0027s corresponding method.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onInflate(android.app.Activity, android.util.AttributeSet, android.os.Bundle)",
        "methodDes": "Parse attributes during inflation from a view hierarchy into the arguments we handle.",
        "params": {
          "activity": "",
          "set": "",
          "bundle": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onLowMemory()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onLowMemory()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onPause()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onPause()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onResume()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onResume()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onSaveInstanceState(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onSaveInstanceState(android.os.Bundle)",
        "methodDes": "Provides a Bundle to store the state of the Fragment before it gets destroyed. It can later be retrieved when onCreate(Bundle) is called again.",
        "params": {
          "state": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onStart()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onStart()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.onStop()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#onStop()",
        "methodDes": "",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.SupportMapFragment.setArguments(android.os.Bundle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/SupportMapFragment#setArguments(android.os.Bundle)",
        "methodDes": "",
        "params": {
          "arguments": ""
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.StreetViewPanoramaCamera": {
    "classDes": "An immutable class that aggregates all camera position parameters.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera",
    "methods": {
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.StreetViewPanoramaCamera(float,float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#StreetViewPanoramaCamera(float, float, float)",
        "methodDes": "Constructs a StreetViewPanoramaCamera.",
        "params": {
          "zoom": "Zoom level of the camera to the panorama. See zoom for details of restrictions",
          "tilt": "The camera angle, in degrees, from the horizon of the panorama. See tilt for details of restrictions",
          "bearing": "Direction that the camera is pointing in, in degrees clockwise from north. This value will be normalized to be within 0 degrees inclusive and 360 degrees exclusive"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#builder()",
        "methodDes": "Creates a builder for a Street View panorama camera.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.builder(com.google.android.gms.maps.model.StreetViewPanoramaCamera)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#public-static-streetviewpanoramacamera.builder-builder-streetviewpanoramacamera-camera",
        "methodDes": "Creates a builder for a Street View panorama camera.",
        "params": {
          "camera": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.getOrientation()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#getOrientation()",
        "methodDes": "Returns the particular camera\u0027s tilt and bearing as an orientation.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaOrientation:orientation Tilt and bearing of the camera",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.bearing": {
        "des": "Direction that the camera is pointing in, in degrees clockwise from north.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#public-final-float-bearing"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.tilt": {
        "des": "The angle, in degrees, of the camera from the horizon of the panorama. See tilt for details of restrictions on the range of values.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#public-final-float-tilt"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaCamera.zoom": {
        "des": "Zoom level near the centre of the screen. See zoom for the definition of the camera's zoom level.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaCamera#public-final-float-zoom"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.OnInfoWindowLongClickListener": {
    "classDes": "Callback interface for when the user long presses on a marker\u0027s info window.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnInfoWindowLongClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnInfoWindowLongClickListener.onInfoWindowLongClick(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnInfoWindowLongClickListener#onInfoWindowLongClick(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Called when the user makes a long-press gesture on the marker\u0027s info window. This is called on the Android UI thread.",
        "params": {
          "marker": "The marker to which the info window is anchored"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.SquareCap": {
    "classDes": "Cap that is squared off after extending half the stroke width beyond the start or end vertex of a Polyline with solid stroke pattern.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/SquareCap",
    "methods": {
      "com.google.android.gms.maps.model.SquareCap.SquareCap()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/SquareCap#SquareCap()",
        "methodDes": "Constructs a SquareCap.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.SquareCap.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Cap#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.BitmapDescriptorFactory": {
    "classDes": "Used to create a definition of a Bitmap image, used for marker icons and ground overlays. Prior to using any methods from this class, you must do one of the following to ensure that this class is initialized: Wait for a GoogleMap to become available from a MapFragment or MapView that you have added to your application. You can obtain the GoogleMap instance by calling getMapAsync() and waiting for the onMapReady(GoogleMap map) callback. Call MapsInitializer.initialize(Context). As long as a GooglePlayServicesNotAvailableException isn\u0027t thrown, this class will be correctly initialized.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory",
    "methods": {
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.defaultMarker()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#defaultMarker()",
        "methodDes": "Creates a BitmapDescriptor that refers to the default marker image.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:the BitmapDescriptor",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.defaultMarker(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#public-static-bitmapdescriptor-defaultmarker-float-hue",
        "methodDes": "Creates a BitmapDescriptor that refers to a colorization of the default marker image. For convenience, there is a predefined set of hue values. See example HUE_YELLOW.",
        "params": {
          "hue": "The hue of the marker. Value must be greater or equal to 0 and less than 360"
        },
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:the BitmapDescriptor",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.fromAsset(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#fromAsset(java.lang.String)",
        "methodDes": "Creates a BitmapDescriptor using the name of a Bitmap image in the assets directory.",
        "params": {
          "assetName": "The name of a Bitmap image in the assets directory"
        },
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:the BitmapDescriptor that was loaded from the asset or null if failed to load",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.fromBitmap(android.graphics.Bitmap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#fromBitmap(android.graphics.Bitmap)",
        "methodDes": "Creates a BitmapDescriptor from a given Bitmap image.",
        "params": {
          "bitmap": ""
        },
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:the BitmapDescriptor",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.fromFile(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#fromFile(java.lang.String)",
        "methodDes": "Creates a BitmapDescriptor using the name of a Bitmap image file located in the internal storage. In particular, this calls openFileInput(String).",
        "params": {
          "fileName": "The name of the Bitmap image file"
        },
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:the BitmapDescriptor that was loaded from the asset or null if failed to load",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.fromPath(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#fromPath(java.lang.String)",
        "methodDes": "Creates a BitmapDescriptor from the absolute file path of a Bitmap image.",
        "params": {
          "absolutePath": "The absolute path of the Bitmap image"
        },
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:the BitmapDescriptor that was loaded from the absolute path or null if failed to load",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.fromResource(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#fromResource(int)",
        "methodDes": "Creates a BitmapDescriptor using the resource ID of a Bitmap image.",
        "params": {
          "resourceId": "The resource ID of a Bitmap image"
        },
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:the BitmapDescriptor that was loaded from the asset or null if failed to load",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_AZURE": {
        "des": "",
        "value": "210.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_AZURE"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_BLUE": {
        "des": "",
        "value": "240.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_BLUE"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_CYAN": {
        "des": "",
        "value": "180.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_CYAN"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_GREEN": {
        "des": "",
        "value": "120.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_GREEN"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_MAGENTA": {
        "des": "",
        "value": "300.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_MAGENTA"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_ORANGE": {
        "des": "",
        "value": "30.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_ORANGE"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_RED": {
        "des": "",
        "value": "0.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_RED"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_ROSE": {
        "des": "",
        "value": "330.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_ROSE"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_VIOLET": {
        "des": "",
        "value": "270.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_VIOLET"
      },
      "com.google.android.gms.maps.model.BitmapDescriptorFactory.HUE_YELLOW": {
        "des": "",
        "value": "60.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory#HUE_YELLOW"
      }
    }
  },
  "com.google.android.gms.maps.model.MarkerOptions": {
    "classDes": "Defines MarkerOptions for a marker. Developer Guide For more information, read the Markers developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions",
    "methods": {
      "com.google.android.gms.maps.model.MarkerOptions.MarkerOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#MarkerOptions()",
        "methodDes": "Creates a new set of marker options.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.alpha(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#alpha(float)",
        "methodDes": "Sets the alpha (opacity) of the marker. This is a value from 0 to 1, where 0 means the marker is completely transparent and 1 means the marker is completely opaque.",
        "params": {
          "alpha": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new alpha set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.anchor(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#anchor(float, float)",
        "methodDes": "Specifies the anchor to be at a particular point in the marker image. The anchor specifies the point in the icon image that is anchored to the marker\u0027s position on the Earth\u0027s surface. The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0], where (0, 0) is the top-left corner of the image, and (1, 1) is the bottom-right corner. The anchoring point in a W x H image is the nearest discrete grid point in a (W + 1) x (H + 1) grid, obtained by scaling the then rounding. For example, in a 4 x 2 image, the anchor point (0.7, 0.6) resolves to the grid point at (3, 1). *-----+-----+-----+-----* | | | | | | | | | | +-----+-----+-----+-----+ | | | X | | (U, V) \u003d (0.7, 0.6) | | | | | *-----+-----+-----+-----* *-----+-----+-----+-----* | | | | | | | | | | +-----+-----+-----X-----+ (X, Y) \u003d (3, 1) | | | | | | | | | | *-----+-----+-----+-----*.",
        "params": {
          "u": "u-coordinate of the anchor, as a ratio of the image width (in the range [0, 1])",
          "v": "v-coordinate of the anchor, as a ratio of the image height (in the range [0, 1])"
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new anchor set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.draggable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#draggable(boolean)",
        "methodDes": "Sets the draggability for the marker.",
        "params": {
          "draggable": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new draggable state set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.flat(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#flat(boolean)",
        "methodDes": "Sets whether this marker should be flat against the map true or a billboard facing the camera false. If the marker is flat against the map, it will remain stuck to the map as the camera rotates and tilts but will still remain the same size as the camera zooms, unlike a GroundOverlay. If the marker is a billboard, it will always be drawn facing the camera and will rotate and tilt with the camera. The default value is false.",
        "params": {
          "flat": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new flat state set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getAlpha()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getAlpha()",
        "methodDes": "Gets the alpha set for this MarkerOptions object.",
        "params": {},
        "returns": "float:the alpha of the marker in the range [0, 1]",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getAnchorU()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getAnchorU()",
        "methodDes": "Horizontal distance, normalized to [0, 1], of the anchor from the left edge.",
        "params": {},
        "returns": "float:the u value of the anchor",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getAnchorV()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getAnchorV()",
        "methodDes": "Vertical distance, normalized to [0, 1], of the anchor from the top edge.",
        "params": {},
        "returns": "float:the v value of the anchor",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getIcon()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getIcon()",
        "methodDes": "Gets the custom icon descriptor set for this MarkerOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:A BitmapDescriptor representing the custom icon, or null if no custom icon is set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getInfoWindowAnchorU()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getInfoWindowAnchorU()",
        "methodDes": "Horizontal distance, normalized to [0, 1], of the info window anchor from the left edge.",
        "params": {},
        "returns": "float:the u value of the info window anchor",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getInfoWindowAnchorV()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getInfoWindowAnchorV()",
        "methodDes": "Vertical distance, normalized to [0, 1], of the info window anchor from the top edge.",
        "params": {},
        "returns": "float:the v value of the info window anchor",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getPosition()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getPosition()",
        "methodDes": "Returns the position set for this MarkerOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:A LatLng object specifying the marker\u0027s current position",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getRotation()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getRotation()",
        "methodDes": "Gets the rotation set for this MarkerOptions object.",
        "params": {},
        "returns": "float:the rotation of the marker in degrees clockwise from the default position",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getSnippet()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getSnippet()",
        "methodDes": "Gets the snippet set for this MarkerOptions object.",
        "params": {},
        "returns": "java.lang.String:A string containing the marker\u0027s snippet",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getTitle()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getTitle()",
        "methodDes": "Gets the title set for this MarkerOptions object.",
        "params": {},
        "returns": "java.lang.String:A string containing the marker\u0027s title",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#getZIndex()",
        "methodDes": "Gets the zIndex set for this MarkerOptions object.",
        "params": {},
        "returns": "float:the zIndex of the marker",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.icon(com.google.android.gms.maps.model.BitmapDescriptor)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#icon(com.google.android.gms.maps.model.BitmapDescriptor)",
        "methodDes": "Sets the icon for the marker.",
        "params": {
          "iconDescriptor": "if null, the default marker is used"
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new icon descriptor set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.infoWindowAnchor(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#infoWindowAnchor(float, float)",
        "methodDes": "Specifies the anchor point of the info window on the marker image. This is specified in the same coordinate system as the anchor. See anchor(float, float) for more details. The default is the top middle of the image.",
        "params": {
          "u": "u-coordinate of the info window anchor, as a ratio of the image width (in the range [0, 1])",
          "v": "v-coordinate of the info window anchor, as a ratio of the image height (in the range [0, 1])"
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new info window anchor set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.isDraggable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#isDraggable()",
        "methodDes": "Gets the draggability setting for this MarkerOptions object.",
        "params": {},
        "returns": "boolean:true if the marker is draggable; otherwise, returns false",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.isFlat()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#isFlat()",
        "methodDes": "Gets the flat setting for this MarkerOptions object.",
        "params": {},
        "returns": "boolean:true if the marker is flat against the map; false if the marker should face the camera",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#isVisible()",
        "methodDes": "Gets the visibility setting for this MarkerOptions object.",
        "params": {},
        "returns": "boolean:true if the marker is visible; otherwise, returns false",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.position(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#position(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Sets the location for the marker.",
        "params": {
          "position": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new position set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.rotation(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#rotation(float)",
        "methodDes": "Sets the rotation of the marker in degrees clockwise about the marker\u0027s anchor point. The axis of rotation is perpendicular to the marker. A rotation of 0 corresponds to the default position of the marker. When the marker is flat on the map, the default position is North aligned and the rotation is such that the marker always remains flat on the map. When the marker is a billboard, the default position is pointing up and the rotation is such that the marker is always facing the camera. The default value is 0.",
        "params": {
          "rotation": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new rotation set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.snippet(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#snippet(java.lang.String)",
        "methodDes": "Sets the snippet for the marker.",
        "params": {
          "snippet": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new snippet set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.title(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#title(java.lang.String)",
        "methodDes": "Sets the title for the marker.",
        "params": {
          "title": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new title set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.visible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#visible(boolean)",
        "methodDes": "Sets the visibility for the marker.",
        "params": {
          "visible": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new visibility state set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.MarkerOptions.zIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/MarkerOptions#zIndex(float)",
        "methodDes": "Sets the zIndex for the marker.",
        "params": {
          "index": ""
        },
        "returns": "com.google.android.gms.maps.model.MarkerOptions:the object for which the method was called, with the new zIndex set",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.StreetViewPanoramaOrientation": {
    "classDes": "An immutable class that aggregates all user point of view parameters.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation",
    "methods": {
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.StreetViewPanoramaOrientation(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#StreetViewPanoramaOrientation(float, float)",
        "methodDes": "Constructs a StreetViewPanoramaOrientation.",
        "params": {
          "tilt": "The angle, in degrees, of the orientation. See tilt for details of restrictions",
          "bearing": "Direction of the orientation, in degrees clockwise from north. This value will be normalized to be within 0 degrees inclusive and 360 degrees exclusive"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.builder()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#builder()",
        "methodDes": "Creates a builder for a Street View panorama orientation.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.builder(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#public-static-streetviewpanoramaorientation.builder-builder-streetviewpanoramaorientation-orientation",
        "methodDes": "Creates a builder for a Street View panorama orientation.",
        "params": {
          "orientation": ""
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.Builder:the Builder",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.bearing": {
        "des": "Direction of the orientation, in degrees clockwise from north.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#public-final-float-bearing"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaOrientation.tilt": {
        "des": "The angle, in degrees, of the orientation. See tilt for details of restrictions on the range of values.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaOrientation#public-final-float-tilt"
      }
    }
  },
  "com.google.android.gms.maps.model.UrlTileProvider": {
    "classDes": "A partial implementation of TileProvider that only requires a URL that points to an image to be provided. Note that this class requires that all the images have the same dimensions.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/UrlTileProvider",
    "methods": {
      "com.google.android.gms.maps.model.UrlTileProvider.UrlTileProvider(int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/UrlTileProvider#UrlTileProvider(int, int)",
        "methodDes": "Constructs a UrlTileProvider.",
        "params": {
          "width": "width of the images used for tiles",
          "height": "height of the images used for tiles"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.UrlTileProvider.getTile(int,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileProvider#getTile(int, int, int)",
        "methodDes": "Returns the tile to be used for this tile coordinate.",
        "params": {
          "x": "The x coordinate of the tile. This will be in the range [0, 2zoom - 1] inclusive",
          "y": "The y coordinate of the tile. This will be in the range [0, 2zoom - 1] inclusive",
          "zoom": "The zoom level of the tile. This will be in the range [ GoogleMap.getMinZoomLevel, GoogleMap.getMaxZoomLevel] inclusive"
        },
        "returns": "com.google.android.gms.maps.model.Tile:the Tile to be used for this tile coordinate. If you do not wish to provide a tile for this tile coordinate, return NO_TILE. If the tile could not be found at this point in time, return null and further requests might be made with an exponential backoff",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.UrlTileProvider.getTileUrl(int,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/UrlTileProvider#getTileUrl(int, int, int)",
        "methodDes": "Returns a URL that points to the image to be used for this tile. If no image is found on the initial request, further requests will be made with an exponential backoff. If you do not wish to provide an image for this tile coordinate, return null.",
        "params": {
          "x": "The x coordinate of the tile. This will be in the range [0, 2zoom - 1] inclusive",
          "y": "The y coordinate of the tile. This will be in the range [0, 2zoom - 1] inclusive",
          "zoom": "The zoom level of the tile. This will be in the range [ GoogleMap.getMinZoomLevel, GoogleMap.getMaxZoomLevel] inclusive"
        },
        "returns": "java.net.URL:URL a URL that points to the image to be used for this tile. If you do not wish to provide an image for this tile coordinate, return null",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnMarkerDragListener": {
    "classDes": "Callback interface for drag events on markers. Listeners will be invoked on the Android UI thread.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMarkerDragListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMarkerDragListener.onMarkerDrag(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMarkerDragListener#onMarkerDrag(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Called repeatedly while a marker is being dragged. The marker\u0027s location can be accessed via getPosition().",
        "params": {
          "marker": "The marker being dragged"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.OnMarkerDragListener.onMarkerDragEnd(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMarkerDragListener#onMarkerDragEnd(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Called when a marker has finished being dragged. The marker\u0027s location can be accessed via getPosition().",
        "params": {
          "marker": "The marker that was dragged"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.OnMarkerDragListener.onMarkerDragStart(com.google.android.gms.maps.model.Marker)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMarkerDragListener#onMarkerDragStart(com.google.android.gms.maps.model.Marker)",
        "methodDes": "Called when a marker starts being dragged. The marker\u0027s location can be accessed via getPosition(); this position may be different to the position prior to the start of the drag because the marker is popped up above the touch point.",
        "params": {
          "marker": "The marker being dragged"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener": {
    "classDes": "This interface is deprecated. Use com.google.android.gms.location.FusedLocationProviderApi instead. FusedLocationProviderApi provides improved location finding and power usage and is used by the \"My Location\" blue dot. See the Select Current Place tutorial, which uses the FusedLocationProviderApi, or the Location Developer Guide. Callback interface for when the My Location dot/chevron (which signifies the user\u0027s location) changes location.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationChangeListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener.onMyLocationChange(android.location.Location)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnMyLocationChangeListener#onMyLocationChange(android.location.Location)",
        "methodDes": "Called when the Location of the My Location dot has changed (be it latitude/longitude, bearing or accuracy).",
        "params": {
          "location": "The current location of the My Location dot"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.MapsInitializer": {
    "classDes": "Use this class to initialize the Google Maps SDK for Android if features need to be used before obtaining a map. It must be called because some classes such as BitmapDescriptorFactory and CameraUpdateFactory need to be initialized. If you are using MapFragment or MapView and have already obtained a (non-null) GoogleMap by calling getMapAsync() on either of these classes and waiting for the onMapReady(GoogleMap map) callback, then you do not need to worry about this class. See the sample application for some examples.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapsInitializer",
    "methods": {
      "com.google.android.gms.maps.MapsInitializer.initialize(android.content.Context)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/MapsInitializer#initialize(android.content.Context)",
        "methodDes": "Initializes the Google Maps SDK for Android so that its classes are ready for use. If you are using MapFragment or MapView and have already obtained a (non-null) GoogleMap by calling getMapAsync() on either of these classes, then it is not necessary to call this.",
        "params": {
          "context": "Required to fetch the necessary SDK resources and code. Must not be null"
        },
        "returns": "int:A ConnectionResult error code",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaLongClickListener": {
    "classDes": "Callback interface for when the user long presses on the panorama. Listeners will be invoked on the main thread.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaLongClickListener",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaLongClickListener.onStreetViewPanoramaLongClick(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama.OnStreetViewPanoramaLongClickListener#onStreetViewPanoramaLongClick(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)",
        "methodDes": "Called when the user makes a long-press gesture on the panorama, but only if none of the overlays of the panorama handled the gesture. Implementations of this method are always invoked on the main thread.",
        "params": {
          "orientation": "The tilt and bearing values corresponding to the point on the screen where the user long-pressed. These values have an absolute value within a specific panorama, and are independent of the current orientation of the camera"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.Gap": {
    "classDes": "An immutable class representing a gap used in the stroke pattern for a Polyline or the outline of a Polygon or Circle.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Gap",
    "methods": {
      "com.google.android.gms.maps.model.Gap.Gap(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Gap#Gap(float)",
        "methodDes": "Constructs a Gap.",
        "params": {
          "length": "Length in pixels. Negative value will be clamped to zero"
        },
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.Gap.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Gap#public-string-tostring",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.Gap.length": {
        "des": "Length in pixels (non-negative).",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/Gap#public-final-float-length"
      }
    }
  },
  "com.google.android.gms.maps.OnMapReadyCallback": {
    "classDes": "Callback interface for when the map is ready to be used. Once an instance of this interface is set on a MapFragment or MapView object, the onMapReady(GoogleMap) method is triggered when the map is ready to be used and provides a non-null instance of GoogleMap. If Google Play services is not installed on the device, the user will be prompted to install it, and the onMapReady(GoogleMap) method will only be triggered when the user has installed it and returned to the app.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/OnMapReadyCallback",
    "methods": {
      "com.google.android.gms.maps.OnMapReadyCallback.onMapReady(com.google.android.gms.maps.GoogleMap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/OnMapReadyCallback#onMapReady(com.google.android.gms.maps.GoogleMap)",
        "methodDes": "Called when the map is ready to be used. Note that this does not guarantee that the map has undergone layout. Therefore, the map\u0027s size may not have been determined by the time the callback method is called. If you need to know the dimensions or call a method in the API that needs to know the dimensions, get the map\u0027s View and register an ViewTreeObserver.OnGlobalLayoutListener as well. Do not chain the OnMapReadyCallback and OnGlobalLayoutListener listeners, but instead register and wait for both callbacks independently, since the callbacks can be fired in any order. As an example, if you want to update the map\u0027s camera using a LatLngBounds without dimensions, you should wait until both OnMapReadyCallback and OnGlobalLayoutListener have completed. Otherwise there is a race condition that could trigger an IllegalStateException.",
        "params": {
          "googleMap": "A non-null instance of a GoogleMap associated with the MapFragment or MapView that defines the callback"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.PolygonOptions": {
    "classDes": "Defines options for a polygon. Developer Guide For more information, read the Shapes developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions",
    "methods": {
      "com.google.android.gms.maps.model.PolygonOptions.PolygonOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#PolygonOptions()",
        "methodDes": "Creates polygon options.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.add(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#add(com.google.android.gms.maps.model.LatLng)",
        "methodDes": "Adds a vertex to the outline of the polygon being built.",
        "params": {
          "point": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with the given point added to the outline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.add(com.google.android.gms.maps.model.LatLng...)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#public-polygonoptions-add-latlng...-points",
        "methodDes": "Adds vertices to the outline of the polygon being built.",
        "params": {
          "points": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with the given point added to the outline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.addAll(java.lang.Iterable\u003ccom.google.android.gms.maps.model.LatLng\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#addAll(java.lang.Iterable\u003ccom.google.android.gms.maps.model.LatLng\u003e)",
        "methodDes": "Adds vertices to the outline of the polygon being built.",
        "params": {
          "all": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with the given points added to the outline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.addHole(java.lang.Iterable\u003ccom.google.android.gms.maps.model.LatLng\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#addHole(java.lang.Iterable\u003ccom.google.android.gms.maps.model.LatLng\u003e)",
        "methodDes": "Adds a hole to the polygon being built.",
        "params": {
          "hole": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with the given hole added",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.clickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#clickable(boolean)",
        "methodDes": "Specifies whether this polygon is clickable. The default setting is false.",
        "params": {
          "clickable": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new clickability setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.fillColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#fillColor(int)",
        "methodDes": "Specifies the polygon\u0027s fill color, as 32-bit ARGB. The default color is black ( 0xff000000).",
        "params": {
          "color": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new fill color set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.geodesic(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#geodesic(boolean)",
        "methodDes": "Specifies whether to draw each segment of this polygon as a geodesic. The default setting is false.",
        "params": {
          "geodesic": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new geodesic setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getFillColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getFillColor()",
        "methodDes": "Gets the fill color set for this PolygonOptions object.",
        "params": {},
        "returns": "int:the fill color of the polygon in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getHoles()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getHoles()",
        "methodDes": "Gets the holes set for this PolygonOptions object.",
        "params": {},
        "returns": "java.util.List\u003cjava.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e\u003e:the list of List\u003cLatLng\u003es specifying the holes of the polygon",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getPoints()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getPoints()",
        "methodDes": "Gets the outline set for this PolygonOptions object.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.LatLng\u003e:the list of LatLngs specifying the vertices of the outline of the polygon",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getStrokeColor()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getStrokeColor()",
        "methodDes": "Gets the stroke color set for this PolygonOptions object.",
        "params": {},
        "returns": "int:the stroke color of the polygon in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getStrokeJointType()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getStrokeJointType()",
        "methodDes": "Gets the stroke joint type set in this PolygonOptions object for all vertices of the polygon\u0027s outline. See JointType for possible values.",
        "params": {},
        "returns": "int:the stroke joint type of the polygon\u0027s outline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getStrokePattern()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getStrokePattern()",
        "methodDes": "Gets the stroke pattern set in this PolygonOptions object for the polygon\u0027s outline.",
        "params": {},
        "returns": "java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e:the stroke pattern of the polygon\u0027s outline",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getStrokeWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getStrokeWidth()",
        "methodDes": "Gets the stroke width set for this PolygonOptions object.",
        "params": {},
        "returns": "float:the stroke width of the polygon in screen pixels",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#getZIndex()",
        "methodDes": "Gets the zIndex set for this PolygonOptions object.",
        "params": {},
        "returns": "float:the zIndex of the polygon",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#isClickable()",
        "methodDes": "Gets the clickability setting for this PolygonOptions object.",
        "params": {},
        "returns": "boolean:true if the polygon is clickable; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.isGeodesic()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#isGeodesic()",
        "methodDes": "Gets the geodesic setting for this PolygonOptions object.",
        "params": {},
        "returns": "boolean:true if the polygon segments should be geodesics; false if they should not be",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#isVisible()",
        "methodDes": "Gets the visibility setting for this PolygonOptions object.",
        "params": {},
        "returns": "boolean:true if the polygon is to be visible; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.strokeColor(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#strokeColor(int)",
        "methodDes": "Specifies the polygon\u0027s stroke color, as 32-bit ARGB. The default color is black ( 0xff000000).",
        "params": {
          "color": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new stroke color set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.strokeJointType(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#strokeJointType(int)",
        "methodDes": "Specifies the joint type for all vertices of the polygon\u0027s outline. See JointType for allowed values. The default value DEFAULT will be used if joint type is undefined or is not one of the allowed values.",
        "params": {
          "type": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new stroke joint type set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.strokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#strokePattern(java.util.List\u003ccom.google.android.gms.maps.model.PatternItem\u003e)",
        "methodDes": "Specifies a stroke pattern for the polygon\u0027s outline. The default stroke pattern is solid, represented by null.",
        "params": {
          "pattern": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new stroke pattern set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.strokeWidth(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#strokeWidth(float)",
        "methodDes": "Specifies the polygon\u0027s stroke width, in display pixels. The default width is 10.",
        "params": {
          "width": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new stroke width set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.visible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#visible(boolean)",
        "methodDes": "Specifies the visibility for the polygon. The default visibility is true.",
        "params": {
          "visible": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new visibility setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.PolygonOptions.zIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/PolygonOptions#zIndex(float)",
        "methodDes": "Specifies the polygon\u0027s zIndex, i.e., the order in which it will be drawn. See the documentation at the top of this class for more information about zIndex.",
        "params": {
          "index": ""
        },
        "returns": "com.google.android.gms.maps.model.PolygonOptions:this PolygonOptions object with a new zIndex set",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.TileProvider": {
    "classDes": "An interface for a class that provides the tile images for a TileOverlay. For information about the tile coordinate system, see TileOverlay. Calls to methods in this interface might be made from multiple threads so implementations of this interface must be threadsafe.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileProvider",
    "methods": {
      "com.google.android.gms.maps.model.TileProvider.getTile(int,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileProvider#getTile(int, int, int)",
        "methodDes": "Returns the tile to be used for this tile coordinate.",
        "params": {
          "x": "The x coordinate of the tile. This will be in the range [0, 2zoom - 1] inclusive",
          "y": "The y coordinate of the tile. This will be in the range [0, 2zoom - 1] inclusive",
          "zoom": "The zoom level of the tile. This will be in the range [ GoogleMap.getMinZoomLevel, GoogleMap.getMaxZoomLevel] inclusive"
        },
        "returns": "com.google.android.gms.maps.model.Tile:the Tile to be used for this tile coordinate. If you do not wish to provide a tile for this tile coordinate, return NO_TILE. If the tile could not be found at this point in time, return null and further requests might be made with an exponential backoff",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.TileProvider.NO_TILE": {
        "des": "Stub tile that is used to indicate that no tile exists for a specific tile coordinate.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/TileProvider#NO_TILE"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.OnCircleClickListener": {
    "classDes": "Callback interface for when a circle is clicked.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCircleClickListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnCircleClickListener.onCircleClick(com.google.android.gms.maps.model.Circle)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCircleClickListener#onCircleClick(com.google.android.gms.maps.model.Circle)",
        "methodDes": "Called when a circle is clicked. This is called on the Android UI thread.",
        "params": {
          "circle": "The circle that is clicked"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.GroundOverlayOptions": {
    "classDes": "Defines options for a ground overlay.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions",
    "methods": {
      "com.google.android.gms.maps.model.GroundOverlayOptions.GroundOverlayOptions()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#GroundOverlayOptions()",
        "methodDes": "Creates a new set of ground overlay options.",
        "params": {},
        "returns": "",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.anchor(float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#anchor(float, float)",
        "methodDes": "Specifies the anchor. The anchor aligns with the ground overlay\u0027s location. The anchor point is specified in 2D continuous space where (0,0), (1,0), (0,1) and (1,1) denote the top-left, top-right, bottom-left and bottom-right corners respectively. *-----+-----+-----+-----* | | | | | | | | | | +-----+-----+-----+-----+ | | | X | | (U, V) \u003d (0.7, 0.6) | | | | | *-----+-----+-----+-----*.",
        "params": {
          "u": "u-coordinate of the anchor",
          "v": "v-coordinate of the anchor"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new anchor set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.bearing(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#bearing(float)",
        "methodDes": "Specifies the bearing of the ground overlay in degrees clockwise from north. The rotation is performed about the anchor point. If not specified, the default is 0 (i.e., up on the image points north). Note that latitude-longitude bound applies before the rotation.",
        "params": {
          "bearing": "the bearing in degrees clockwise from north. Values outside the range [0, 360) will be normalized"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new bearing set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.clickable(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#clickable(boolean)",
        "methodDes": "Specifies whether the ground overlay is clickable. The default clickability is false.",
        "params": {
          "clickable": "The new clickability setting"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new clickability setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getAnchorU()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getAnchorU()",
        "methodDes": "Horizontal relative anchor; 0.0 and 1.0 denote left and right edges respectively. Other anchor values are interpolated accordingly.",
        "params": {},
        "returns": "float:the horizontal edge-relative anchor location",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getAnchorV()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getAnchorV()",
        "methodDes": "Vertical relative anchor; 0.0 and 1.0 denote top and bottom edges respectively. Other anchor values are interpolated accordingly.",
        "params": {},
        "returns": "float:the vertical edge-relative anchor location",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getBearing()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getBearing()",
        "methodDes": "Gets the bearing set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "float:the bearing of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getBounds()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getBounds()",
        "methodDes": "Gets the bounds set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLngBounds:the bounds of the ground overlay. This will be null if the position was set using position(LatLng, float) or position(LatLng, float, float)",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getHeight()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getHeight()",
        "methodDes": "Gets the height set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "float:the height of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getImage()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getImage()",
        "methodDes": "Gets the image descriptor set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.BitmapDescriptor:A BitmapDescriptor representing the image of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getLocation()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getLocation()",
        "methodDes": "Gets the location set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.LatLng:the location to place the anchor of the ground overlay. This will be null if the position was set using positionFromBounds(LatLngBounds)",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getTransparency()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getTransparency()",
        "methodDes": "Gets the transparency set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "float:the transparency of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getWidth()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getWidth()",
        "methodDes": "Gets the width set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "float:the width of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.getZIndex()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#getZIndex()",
        "methodDes": "Gets the zIndex set for this GroundOverlayOptions object.",
        "params": {},
        "returns": "float:the zIndex of the ground overlay",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.image(com.google.android.gms.maps.model.BitmapDescriptor)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#image(com.google.android.gms.maps.model.BitmapDescriptor)",
        "methodDes": "Specifies the image for this ground overlay. To load an image as a texture (which is used to draw the image on a map), it must be converted into an image with sides that are powers of two. This is so that a mipmap can be created in order to render the texture at various zoom levels - see Mipmap (Wikipedia) for details. Hence, to conserve memory by avoiding this conversion, it is advised that the dimensions of the image are powers of two.",
        "params": {
          "imageDescriptor": "the BitmapDescriptor to use for this ground overlay"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new image set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.isClickable()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#isClickable()",
        "methodDes": "Gets the clickability setting for this GroundOverlayOptions object.",
        "params": {},
        "returns": "boolean:true if the ground overlay is clickable; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.isVisible()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#isVisible()",
        "methodDes": "Gets the visibility setting for this GroundOverlayOptions object.",
        "params": {},
        "returns": "boolean:true if this ground overlay is visible; false if it is not",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.position(com.google.android.gms.maps.model.LatLng,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#position(com.google.android.gms.maps.model.LatLng, float)",
        "methodDes": "Specifies the position for this ground overlay using an anchor point (a LatLng), width and height (both in meters). When rendered, the image will be scaled to fit the dimensions specified.",
        "params": {
          "location": "the location on the map LatLng to which the anchor point in the given image will remain fixed. The anchor will remain fixed to the position on the ground when transformations are applied (e.g., setDimensions, setBearing, etc.)",
          "width": "the width of the overlay (in meters)"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new position set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.position(com.google.android.gms.maps.model.LatLng,float,float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#public-groundoverlayoptions-position-latlng-location,-float-width,-float-height",
        "methodDes": "Specifies the position for this ground overlay using an anchor point (a LatLng), width and height (both in meters). When rendered, the image will be scaled to fit the dimensions specified.",
        "params": {
          "location": "the location on the map LatLng to which the anchor point in the given image will remain fixed. The anchor will remain fixed to the position on the ground when transformations are applied (e.g., setDimensions, setBearing, etc.)",
          "width": "the width of the overlay (in meters)",
          "height": "the height of the overlay (in meters)"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new position set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.positionFromBounds(com.google.android.gms.maps.model.LatLngBounds)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#positionFromBounds(com.google.android.gms.maps.model.LatLngBounds)",
        "methodDes": "Specifies the position for this ground overlay.",
        "params": {
          "bounds": "a LatLngBounds in which to place the ground overlay"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new position set",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.transparency(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#transparency(float)",
        "methodDes": "Specifies the transparency of the ground overlay. The default transparency is 0 (opaque).",
        "params": {
          "transparency": "a float in the range [0..1] where 0 means that the ground overlay is opaque and 1 means that the ground overlay is transparent"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new transparency setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.visible(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#visible(boolean)",
        "methodDes": "Specifies the visibility for the ground overlay. The default visibility is true.",
        "params": {
          "visible": ""
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new visibility setting",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.GroundOverlayOptions.zIndex(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#zIndex(float)",
        "methodDes": "Specifies the ground overlay\u0027s zIndex, i.e., the order in which it will be drawn. See the documentation at the top of this class for more information about zIndex.",
        "params": {
          "index": ""
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlayOptions:this GroundOverlayOptions object with a new zIndex set",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.GroundOverlayOptions.NO_DIMENSION": {
        "des": "Flag for when no dimension is specified for the height.",
        "value": "-1.0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/GroundOverlayOptions#NO_DIMENSION"
      }
    }
  },
  "com.google.android.gms.maps.StreetViewPanorama": {
    "classDes": "This is the main class of the Street View feature in the Google Maps SDK for Android and is the entry point for all methods related to Street View panoramas. You cannot instantiate a StreetViewPanorama object directly, rather, you must obtain one from the #getStreetViewPanoramaAsync() method on a StreetViewPanoramaFragment or StreetViewPanoramaView that you have added to your application. Note: Similar to a View object, a StreetViewPanorama can only be read and modified from the main thread. Calling StreetViewPanorama methods from another thread will result in an exception. Developer Guide To get started with the Google Maps SDK for Android, read the Google Maps SDK for Android developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama",
    "methods": {
      "com.google.android.gms.maps.StreetViewPanorama.animateTo(com.google.android.gms.maps.model.StreetViewPanoramaCamera,long)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#animateTo(com.google.android.gms.maps.model.StreetViewPanoramaCamera, long)",
        "methodDes": "Changes the current camera position, orientation and zoom, to a given position over a specified duration.",
        "params": {
          "camera": "The camera position to animate to",
          "duration": "The length of time, in milliseconds, it takes to transition from the current camera position to the given one"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.getLocation()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#getLocation()",
        "methodDes": "Returns the current location of the user and information regarding the current panorama\u0027s adjacent panoramas.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaLocation:The current location of the user",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.getPanoramaCamera()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#getPanoramaCamera()",
        "methodDes": "Returns the current orientation and zoom.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaCamera:The current camera",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.isPanningGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#isPanningGesturesEnabled()",
        "methodDes": "Returns whether or not the panning gestures are enabled for the user.",
        "params": {},
        "returns": "boolean:true if panning gestures are enabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.isStreetNamesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#isStreetNamesEnabled()",
        "methodDes": "Returns whether or not the street names appear on the panorama.",
        "params": {},
        "returns": "boolean:true if street names are shown",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.isUserNavigationEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#isUserNavigationEnabled()",
        "methodDes": "Returns whether or not the navigation is enabled for the user. This includes double tapping as well as using the navigation links.",
        "params": {},
        "returns": "boolean:true if navigation is enabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.isZoomGesturesEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#isZoomGesturesEnabled()",
        "methodDes": "Returns whether or not the zoom gestures are enabled for the user.",
        "params": {},
        "returns": "boolean:true if zoom gestures are enabled",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.orientationToPoint(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#orientationToPoint(com.google.android.gms.maps.model.StreetViewPanoramaOrientation)",
        "methodDes": "Returns a screen location that corresponds to an orientation (StreetViewPanoramaOrientation). The screen location is in screen pixels (not display pixels) relative to the top left of the Street View panorama (not of the whole screen).",
        "params": {
          "orientation": "A StreetViewPanoramaOrientation on the Street View panorama to convert to a screen location"
        },
        "returns": "android.graphics.Point:A Point representing the screen location in screen pixels. Returns null if the orientation is unable to be projected on the screen (e.g. behind the user\u0027s field of view)",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.pointToOrientation(android.graphics.Point)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#pointToOrientation(android.graphics.Point)",
        "methodDes": "Returns the orientation that corresponds to a screen location. The screen location is specified in screen pixels (not display pixels) relative to the top left of the Street View panorama (not the top left of the whole screen).",
        "params": {
          "point": "A Point on the screen in screen pixels"
        },
        "returns": "com.google.android.gms.maps.model.StreetViewPanoramaOrientation:The StreetViewPanoramaOrientation corresponding to the point on the screen, or null if the Street View panorama has not been initialized or if the given point is not a valid point on the screen",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setOnStreetViewPanoramaCameraChangeListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaCameraChangeListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setOnStreetViewPanoramaCameraChangeListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaCameraChangeListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the camera changes.",
        "params": {
          "listener": "The callback that\u0027s invoked when the camera changes. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setOnStreetViewPanoramaChangeListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaChangeListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setOnStreetViewPanoramaChangeListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaChangeListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the panorama changes.",
        "params": {
          "listener": "The callback that\u0027s invoked when the panorama changes. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setOnStreetViewPanoramaClickListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setOnStreetViewPanoramaClickListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the panorama is tapped.",
        "params": {
          "listener": "The callback that\u0027s invoked when the panorama is tapped. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setOnStreetViewPanoramaLongClickListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaLongClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setOnStreetViewPanoramaLongClickListener(com.google.android.gms.maps.StreetViewPanorama.OnStreetViewPanoramaLongClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the panorama is long-pressed.",
        "params": {
          "listener": "The callback that\u0027s invoked when the panorama is long-pressed. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setPanningGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setPanningGesturesEnabled(boolean)",
        "methodDes": "Sets whether the user is able to use panning gestures.",
        "params": {
          "enablePanning": "true if users are allowed to use panning gestures"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setPosition(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setPosition(java.lang.String)",
        "methodDes": "Sets the StreetViewPanorama to a given location.",
        "params": {
          "panoId": "Panorama ID of the desired location"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setPosition(com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.StreetViewSource)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#public-void-setposition-latlng-position,-streetviewsource-source",
        "methodDes": "Sets the StreetViewPanorama to a given location.",
        "params": {
          "position": "Latitude and longitude of the desired location",
          "source": "StreetViewSource specifies the source of panoramas to search"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setPosition(com.google.android.gms.maps.model.LatLng)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#public-void-setposition-latlng-position",
        "methodDes": "Sets the StreetViewPanorama to a given location.",
        "params": {
          "position": "\tLatitude and longitude of the desired location"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setPosition(com.google.android.gms.maps.model.LatLng,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#public-void-setposition-latlng-position,-int-radius",
        "methodDes": "Sets the StreetViewPanorama to a given location.",
        "params": {
          "position": "Latitude and longitude of the desired location",
          "radius": "Radius, specified in meters, that defines the area in which to search for a panorama, centered on the given latitude and longitude"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setPosition(com.google.android.gms.maps.model.LatLng,int,com.google.android.gms.maps.model.StreetViewSource)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#public-void-setposition-latlng-position,-int-radius,-streetviewsource-source",
        "methodDes": "Sets the StreetViewPanorama to a given location.",
        "params": {
          "position": "Latitude and longitude of the desired location",
          "radius": "Radius, specified in meters, that defines the area in which to search for a panorama, centered on the given latitude and longitude",
          "source": "StreetViewSource specifies the source of panoramas to search"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setStreetNamesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setStreetNamesEnabled(boolean)",
        "methodDes": "Sets whether the user is able to see street names on panoramas.",
        "params": {
          "enableStreetNames": "true if users are able to see street names on panoramas"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setUserNavigationEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setUserNavigationEnabled(boolean)",
        "methodDes": "Sets whether the user is able to move to another panorama.",
        "params": {
          "enableUserNavigation": "true if users are allowed to move to another panorama"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.StreetViewPanorama.setZoomGesturesEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/StreetViewPanorama#setZoomGesturesEnabled(boolean)",
        "methodDes": "Sets whether the user is able to use zoom gestures.",
        "params": {
          "enableZoom": "true if users are allowed to use zoom gestures"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  },
  "com.google.android.gms.maps.model.StreetViewPanoramaLink": {
    "classDes": "An immutable class that represents a link to another Street View panorama.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLink",
    "methods": {
      "com.google.android.gms.maps.model.StreetViewPanoramaLink.equals(java.lang.Object)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLink#equals(java.lang.Object)",
        "methodDes": "",
        "params": {
          "equals": ""
        },
        "returns": "boolean:the boolean",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLink.hashCode()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLink#hashCode()",
        "methodDes": "",
        "params": {},
        "returns": "int:the int",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLink.toString()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLink#toString()",
        "methodDes": "",
        "params": {},
        "returns": "java.lang.String:the String",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLink.writeToParcel(android.os.Parcel,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLink#writeToParcel(android.os.Parcel, int)",
        "methodDes": "",
        "params": {
          "dest": "The Parcel in which the object should be written",
          "flags": "Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE. Value is either 0 or a combination of PARCELABLE_WRITE_RETURN_VALUE, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"
        },
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.model.StreetViewPanoramaLink.bearing": {
        "des": "The direction of the linked Street View panorama, in degrees clockwise from north.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLink#public-final-float-bearing"
      },
      "com.google.android.gms.maps.model.StreetViewPanoramaLink.panoId": {
        "des": "Panorama ID of the linked Street View panorama.",
        "value": "",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/model/StreetViewPanoramaLink#public-final-string-panoid"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap": {
    "classDes": "This is the main class of the Google Maps SDK for Android and is the entry point for all methods related to the map. You cannot instantiate a GoogleMap object directly, rather, you must obtain one from the getMapAsync() method on a MapFragment or MapView that you have added to your application. Note: Similar to a View object, a GoogleMap can only be read and modified from the Android UI thread. Calling GoogleMap methods from another thread will result in an exception. You can adjust the viewpoint of a map by changing the position of the camera (as opposed to moving the map). You can use the map\u0027s camera to set parameters such as location, zoom level, tilt angle, and bearing. For more information, see Camera and View. Developer Guide To get started, read the Google Maps SDK for Android developer guide.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.addCircle(com.google.android.gms.maps.model.CircleOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#addCircle(com.google.android.gms.maps.model.CircleOptions)",
        "methodDes": "Add a circle to this map.",
        "params": {
          "options": "A circle options object that defines how to render the Circle"
        },
        "returns": "com.google.android.gms.maps.model.Circle:The Circle object that is added to the map",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.addGroundOverlay(com.google.android.gms.maps.model.GroundOverlayOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#addGroundOverlay(com.google.android.gms.maps.model.GroundOverlayOptions)",
        "methodDes": "Adds an image to this map.",
        "params": {
          "options": "A ground-overlay options object that defines how to render the overlay. Options must have an image (AnchoredBitmap) and position specified"
        },
        "returns": "com.google.android.gms.maps.model.GroundOverlay:The GroundOverlay that was added to the map",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.addMarker(com.google.android.gms.maps.model.MarkerOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#addMarker(com.google.android.gms.maps.model.MarkerOptions)",
        "methodDes": "Adds a marker to this map. The marker\u0027s icon is rendered on the map at the location Marker.position. Clicking the marker centers the camera on the marker. If Marker.title is defined, the map shows an info box with the marker\u0027s title and snippet. If the marker is draggable, long-clicking and then dragging the marker moves it.",
        "params": {
          "options": "A marker options object that defines how to render the marker"
        },
        "returns": "com.google.android.gms.maps.model.Marker:The Marker that was added to the map",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.addPolygon(com.google.android.gms.maps.model.PolygonOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#addPolygon(com.google.android.gms.maps.model.PolygonOptions)",
        "methodDes": "Adds a polygon to this map.",
        "params": {
          "options": "A polygon options object that defines how to render the Polygon"
        },
        "returns": "com.google.android.gms.maps.model.Polygon:The Polygon object that is added to the map",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.addPolyline(com.google.android.gms.maps.model.PolylineOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#addPolyline(com.google.android.gms.maps.model.PolylineOptions)",
        "methodDes": "Adds a polyline to this map.",
        "params": {
          "options": "A polyline options object that defines how to render the Polyline"
        },
        "returns": "com.google.android.gms.maps.model.Polyline:The Polyline object that was added to the map",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.addTileOverlay(com.google.android.gms.maps.model.TileOverlayOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#addTileOverlay(com.google.android.gms.maps.model.TileOverlayOptions)",
        "methodDes": "Adds a tile overlay to this map. See TileOverlay for more information. Note that unlike other overlays, if the map is recreated, tile overlays are not automatically restored and must be re-added manually.",
        "params": {
          "options": "A tile-overlay options object that defines how to render the overlay. Options must have a TileProvider specified, otherwise an IllegalArgumentException will be thrown"
        },
        "returns": "com.google.android.gms.maps.model.TileOverlay:The TileOverlay that was added to the map",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.animateCamera(com.google.android.gms.maps.CameraUpdate,com.google.android.gms.maps.GoogleMap.CancelableCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#animateCamera(com.google.android.gms.maps.CameraUpdate, com.google.android.gms.maps.GoogleMap.CancelableCallback)",
        "methodDes": "Animates the movement of the camera from the current position to the position defined in the update and calls an optional callback on completion. See CameraUpdateFactory for a set of updates. During the animation, a call to getCameraPosition() returns an intermediate location of the camera.",
        "params": {
          "update": "The change that should be applied to the camera",
          "callback": "The callback to invoke from the Android UI thread when the animation stops. If the animation completes normally, onFinish() is called; otherwise, onCancel() is called. Do not update or animate the camera from within onCancel()"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.animateCamera(com.google.android.gms.maps.CameraUpdate)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#animateCamera(com.google.android.gms.maps.CameraUpdate)",
        "methodDes": "Animates the movement of the camera from the current position to the position defined in the update. During the animation, a call to getCameraPosition() returns an intermediate location of the camera. See CameraUpdateFactory for a set of updates.",
        "params": {
          "update": "The change that should be applied to the camera"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.animateCamera(com.google.android.gms.maps.CameraUpdate,int,com.google.android.gms.maps.GoogleMap.CancelableCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#animateCamera(com.google.android.gms.maps.CameraUpdate, int, com.google.android.gms.maps.GoogleMap.CancelableCallback)",
        "methodDes": "Moves the map according to the update with an animation over a specified duration, and calls an optional callback on completion. See CameraUpdateFactory for a set of updates. If getCameraPosition() is called during the animation, it will return the current location of the camera in flight.",
        "params": {
          "update": "",
          "durationMs": "The duration of the animation in milliseconds. This must be strictly positive, otherwise an IllegalArgumentException will be thrown",
          "callback": "An optional callback to be notified from the Android UI thread when the animation stops. If the animation stops due to its natural completion, the callback will be notified with onFinish(). If the animation stops due to interruption by a later camera movement or a user gesture, onCancel() will be called. The callback should not attempt to move or animate the camera in its cancellation method. If a callback isn\u0027t required, leave it as null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.clear()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#clear()",
        "methodDes": "Removes all markers, polylines, polygons, overlays, etc from the map.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getCameraPosition()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getCameraPosition()",
        "methodDes": "Gets the current position of the camera. The CameraPosition returned is a snapshot of the current position, and will not automatically update when the camera moves. For more information about changing the camera\u0027s position, see Camera and View.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.CameraPosition:The current position of the Camera",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getFocusedBuilding()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getFocusedBuilding()",
        "methodDes": "Gets the currently focused building.",
        "params": {},
        "returns": "com.google.android.gms.maps.model.IndoorBuilding:The current focused building or null if no building is focused",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getMapType()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getMapType()",
        "methodDes": "Gets the type of map that\u0027s currently displayed. See MAP_TYPE_NORMAL, MAP_TYPE_SATELLITE, MAP_TYPE_TERRAIN for possible values.",
        "params": {},
        "returns": "int:The map type",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getMaxZoomLevel()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getMaxZoomLevel()",
        "methodDes": "Returns the maximum zoom level for the current camera position. This takes into account what map type is currently being used, e.g., satellite or terrain may have a lower max zoom level than the base map tiles. For more information about changing the camera\u0027s zoom level, see Camera and View.",
        "params": {},
        "returns": "float:The maximum zoom level available at the current camera position",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getMinZoomLevel()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getMinZoomLevel()",
        "methodDes": "Returns the minimum zoom level. This is the same for every location (unlike the maximum zoom level) but may vary between devices and map sizes. For more information about changing the camera\u0027s zoom level, see Camera and View.",
        "params": {},
        "returns": "float:The minimum zoom level available",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getMyLocation()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getMyLocation()",
        "methodDes": "This method is deprecated. use com.google.android.gms.location.FusedLocationProviderApi instead. FusedLocationProviderApi provides improved location finding and power usage and is used by the \"My Location\" blue dot. See the MyLocationDemoActivity in the sample applications folder for example code, or the Location Developer Guide.",
        "params": {},
        "returns": "android.location.Location:The currently displayed user location",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getProjection()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getProjection()",
        "methodDes": "Returns a Projection object that you can use to convert between screen coordinates and latitude/longitude coordinates. The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves. As this operation is expensive, you should get the projection only once per screen. Google Maps uses the Mercator projection to create its maps from geographic data and convert points on the map into geographic coordinates.",
        "params": {},
        "returns": "com.google.android.gms.maps.Projection:The Projection of the map in its current state",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.getUiSettings()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#getUiSettings()",
        "methodDes": "Gets the user interface settings for the map.",
        "params": {},
        "returns": "com.google.android.gms.maps.UiSettings:The UiSettings for this map",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.isBuildingsEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#isBuildingsEnabled()",
        "methodDes": "Returns whether 3D buildings layer is enabled.",
        "params": {},
        "returns": "boolean:true if buildings are enabled; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.isIndoorEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#isIndoorEnabled()",
        "methodDes": "Gets whether indoor maps are currently enabled.",
        "params": {},
        "returns": "boolean:true if indoor maps are enabled; false if indoor maps are disabled;",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.isMyLocationEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#isMyLocationEnabled()",
        "methodDes": "Gets the status of the my-location layer.",
        "params": {},
        "returns": "boolean:true if the my-location layer is enabled; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.isTrafficEnabled()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#isTrafficEnabled()",
        "methodDes": "Checks whether the map is drawing traffic data. This is subject to the availability of traffic data.",
        "params": {},
        "returns": "boolean:true if traffic data is enabled; false otherwise",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.moveCamera(com.google.android.gms.maps.CameraUpdate)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#moveCamera(com.google.android.gms.maps.CameraUpdate)",
        "methodDes": "Repositions the camera according to the instructions defined in the update. The move is instantaneous, and a subsequent getCameraPosition() will reflect the new position. See CameraUpdateFactory for a set of updates.",
        "params": {
          "update": "The change that should be applied to the camera"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.resetMinMaxZoomPreference()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#resetMinMaxZoomPreference()",
        "methodDes": "Removes any previously specified upper and lower zoom bounds.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setBuildingsEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setBuildingsEnabled(boolean)",
        "methodDes": "Turns the 3D buildings layer on or off.",
        "params": {
          "enabled": "true to enable the 3D buildings layer; false to disable 3D buildings"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setContentDescription(java.lang.String)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setContentDescription(java.lang.String)",
        "methodDes": "Sets a contentDescription for the map. This is used to provide a spoken description of the map in accessibility mode. The default value is \"Google Map\".",
        "params": {
          "description": "a string to use as a description"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setIndoorEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setIndoorEnabled(boolean)",
        "methodDes": "Sets whether indoor maps should be enabled. Currently, indoor maps can only be shown on one map at a time and by default, this is the first map added to your application. To enable indoor maps on another map, you must first disable indoor maps on the original map. If you try to enable indoor maps when it is enabled on another map, nothing will happen and this will return false. When Indoor is not enabled for a map, all methods related to indoor will return null, or false.",
        "params": {
          "enabled": "true to try to enable indoor maps; false to disable indoor maps"
        },
        "returns": "boolean:whether it was possible to enable indoor maps",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setInfoWindowAdapter(com.google.android.gms.maps.GoogleMap.InfoWindowAdapter)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setInfoWindowAdapter(com.google.android.gms.maps.GoogleMap.InfoWindowAdapter)",
        "methodDes": "Sets a custom renderer for the contents of info windows. Like the map\u0027s event listeners, this state is not serialized with the map. If the map gets re-created (e.g., due to a configuration change), you must ensure that you call this method again in order to preserve the customization.",
        "params": {
          "adapter": "The adapter to use for info window contents, or null to use the default content rendering in info windows"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setLatLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setLatLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)",
        "methodDes": "Specifies a LatLngBounds to constrain the camera target, so that when users scroll and pan the map, the camera target does not move outside these bounds. Set to null to clear the bounding box completely. The new bounds replaces any previously specified bounding box. When the LatLngBounds changes, the SDK adjusts all later camera updates to respect those bounds if possible. Note that there are technical considerations that may prevent the SDK from keeping the camera target strictly within the bounds. For example, floating point precision rounding errors or a very low zoom level.",
        "params": {
          "bounds": "The bounds to constrain the camera target within"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setLocationSource(com.google.android.gms.maps.LocationSource)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setLocationSource(com.google.android.gms.maps.LocationSource)",
        "methodDes": "Replaces the location source of the my-location layer.",
        "params": {
          "source": "A location source to use in the my-location layer. Set to null to use the default location source"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setMapStyle(com.google.android.gms.maps.model.MapStyleOptions)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setMapStyle(com.google.android.gms.maps.model.MapStyleOptions)",
        "methodDes": "Sets the styling of the base map. Using the style options, you can apply custom styles to features and elements on the map. See MapStyleOptions for style definition details. Set to null to clear any previous custom styling.",
        "params": {
          "style": ""
        },
        "returns": "boolean:true if the style was successfully parsed; false if problems were detected with the MapStyleOptions, including, e.g. unparsable styling JSON, unrecognized feature type, unrecognized element type, or invalid styler keys. If the return value is false, the current style is left unchanged",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setMapType(int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setMapType(int)",
        "methodDes": "Sets the type of map tiles that should be displayed. The allowable values are: MAP_TYPE_NORMAL: Basic map. MAP_TYPE_SATELLITE: Satellite imagery. MAP_TYPE_HYBRID: Satellite imagery with roads and labels. MAP_TYPE_TERRAIN: Topographic data. MAP_TYPE_NONE: No base map tiles.",
        "params": {
          "type": "The type of map to display"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setMaxZoomPreference(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setMaxZoomPreference(float)",
        "methodDes": "Sets a preferred upper bound for the camera zoom. When the maximum zoom changes, the SDK adjusts all later camera updates to respect that maximum if possible. Note that there are technical considerations that may prevent the SDK from allowing users to zoom too deep into the map. For example, satellite or terrain may have a lower maximum zoom than the base map tiles. The SDK resolves any conflicts in the minimum and maximum values. If you set the minimum zoom to a higher zoom level than the current maximum, then the SDK uses the new minimum value for both minimum and maximum. If you set the maximum zoom to a lower zoom level than the minimum, the SDK uses the new maximum value for both minimum and maximum. For example: Assume the current minimum zoom is 8 and the maximum is 14. Then you set the maximum zoom to 6. The SDK uses a minimum zoom of 6 and a maximum zoom of 6.",
        "params": {
          "maxZoomPreference": "The preferred upper bound"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setMinZoomPreference(float)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setMinZoomPreference(float)",
        "methodDes": "Sets a preferred lower bound for the camera zoom. When the minimum zoom changes, the SDK adjusts all later camera updates to respect that minimum if possible. Note that there are technical considerations that may prevent the SDK from allowing users to zoom too low. The SDK resolves any conflicts in the minimum and maximum values. If you set the minimum zoom to a higher zoom level than the current maximum, then the SDK uses the new minimum value for both minimum and maximum. If you set the maximum zoom to a lower zoom level than the minimum, the SDK uses the new maximum value for both minimum and maximum. For example: Assume the current minimum zoom is 8 and the maximum is 14. Then you set the minimum zoom to 16. The SDK uses a minimum zoom of 16 and a maximum zoom of 16.",
        "params": {
          "minZoomPreference": "The preferred lower bound"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setMyLocationEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setMyLocationEnabled(boolean)",
        "methodDes": "Enables or disables the my-location layer. While enabled and the location is available, the my-location layer continuously draws an indication of a user\u0027s current location and bearing, and displays UI controls that allow a user to interact with their location (for example, to enable or disable camera tracking of their location and bearing). In order to use the my-location-layer feature you need to request permission for either ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION unless you have set a custom location source. If you have set a custom location source via setLocationSource(LocationSource) the Google Maps SDK for Android will not check whether the above permissions have been granted. However, you still need to make sure that the user has granted all the permissions required for your custom location source.",
        "params": {
          "enabled": "true to enable; false to disable"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnCameraChangeListener(com.google.android.gms.maps.GoogleMap.OnCameraChangeListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnCameraChangeListener(com.google.android.gms.maps.GoogleMap.OnCameraChangeListener)",
        "methodDes": "This method is deprecated. Replaced by setOnCameraMoveStartedListener(GoogleMap.OnCameraMoveStartedListener), setOnCameraMoveListener(GoogleMap.OnCameraMoveListener), setOnCameraMoveCanceledListener(GoogleMap.OnCameraMoveCanceledListener) and setOnCameraIdleListener(GoogleMap.OnCameraIdleListener).",
        "params": {
          "listener": "The callback that\u0027s invoked when the camera changes. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnCameraIdleListener(com.google.android.gms.maps.GoogleMap.OnCameraIdleListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnCameraIdleListener(com.google.android.gms.maps.GoogleMap.OnCameraIdleListener)",
        "methodDes": "Sets a callback that is invoked when camera movement has ended.",
        "params": {
          "listener": "The callback that\u0027s invoked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnCameraMoveCanceledListener(com.google.android.gms.maps.GoogleMap.OnCameraMoveCanceledListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnCameraMoveCanceledListener(com.google.android.gms.maps.GoogleMap.OnCameraMoveCanceledListener)",
        "methodDes": "Sets a callback that is invoked when camera motion is stopped or interrupted by a new type of animation.",
        "params": {
          "listener": "The callback that\u0027s invoked. To unset the callback, use null. Do not update or animate the camera from within onCameraMoveCanceled()"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnCameraMoveListener(com.google.android.gms.maps.GoogleMap.OnCameraMoveListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnCameraMoveListener(com.google.android.gms.maps.GoogleMap.OnCameraMoveListener)",
        "methodDes": "Sets a callback that is invoked repeatedly while the camera is in motion. The callback may be invoked as often as once every frame and should not perform expensive operations.",
        "params": {
          "listener": "The callback that\u0027s invoked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnCameraMoveStartedListener(com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnCameraMoveStartedListener(com.google.android.gms.maps.GoogleMap.OnCameraMoveStartedListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the camera starts moving or the reason for camera motion has changed.",
        "params": {
          "listener": "The callback that\u0027s invoked. To unset the callback, use null. Do not update or animate the camera from within onCameraMoveStarted()"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnCircleClickListener(com.google.android.gms.maps.GoogleMap.OnCircleClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnCircleClickListener(com.google.android.gms.maps.GoogleMap.OnCircleClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a circle is clicked.",
        "params": {
          "listener": "The callback that\u0027s invoked when a circle is clicked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnGroundOverlayClickListener(com.google.android.gms.maps.GoogleMap.OnGroundOverlayClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnGroundOverlayClickListener(com.google.android.gms.maps.GoogleMap.OnGroundOverlayClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a ground overlay is clicked.",
        "params": {
          "listener": "The callback that\u0027s invoked when a ground overlay is clicked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnIndoorStateChangeListener(com.google.android.gms.maps.GoogleMap.OnIndoorStateChangeListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnIndoorStateChangeListener(com.google.android.gms.maps.GoogleMap.OnIndoorStateChangeListener)",
        "methodDes": "Sets or clears the listener for indoor events. Only one listener can ever be set. Setting a new listener will remove the previous listener.",
        "params": {
          "listener": "the listener for indoor events if non-null; otherwise, clears the listener"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnInfoWindowClickListener(com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnInfoWindowClickListener(com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a marker info window is clicked.",
        "params": {
          "listener": "The callback that\u0027s invoked when a marker info window is clicked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnInfoWindowCloseListener(com.google.android.gms.maps.GoogleMap.OnInfoWindowCloseListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnInfoWindowCloseListener(com.google.android.gms.maps.GoogleMap.OnInfoWindowCloseListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a marker\u0027s info window is closed.",
        "params": {
          "listener": "The callback that\u0027s invoked when a marker\u0027s info window is closed. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnInfoWindowLongClickListener(com.google.android.gms.maps.GoogleMap.OnInfoWindowLongClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnInfoWindowLongClickListener(com.google.android.gms.maps.GoogleMap.OnInfoWindowLongClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a marker\u0027s info window is long pressed.",
        "params": {
          "listener": "The callback that\u0027s invoked when a marker\u0027s info window is long pressed. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMapClickListener(com.google.android.gms.maps.GoogleMap.OnMapClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMapClickListener(com.google.android.gms.maps.GoogleMap.OnMapClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the map is tapped.",
        "params": {
          "listener": "The callback that\u0027s invoked when the map is tapped. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMapLoadedCallback(com.google.android.gms.maps.GoogleMap.OnMapLoadedCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMapLoadedCallback(com.google.android.gms.maps.GoogleMap.OnMapLoadedCallback)",
        "methodDes": "Sets a callback that\u0027s invoked when this map has finished rendering. The callback will only be invoked once. If this method is called when the map is fully rendered, the callback will be invoked immediately. This event will not fire if the map never loads due to connectivity issues, or if the map is continuously changing and never completes loading due to the user constantly interacting with the map.",
        "params": {
          "callback": "The callback invoked when the map has finished rendering. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMapLongClickListener(com.google.android.gms.maps.GoogleMap.OnMapLongClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMapLongClickListener(com.google.android.gms.maps.GoogleMap.OnMapLongClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the map is long pressed.",
        "params": {
          "listener": "The callback that\u0027s invoked when the map is long pressed. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMarkerClickListener(com.google.android.gms.maps.GoogleMap.OnMarkerClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMarkerClickListener(com.google.android.gms.maps.GoogleMap.OnMarkerClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a marker is clicked.",
        "params": {
          "listener": "The callback that\u0027s invoked when a marker is clicked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMarkerDragListener(com.google.android.gms.maps.GoogleMap.OnMarkerDragListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMarkerDragListener(com.google.android.gms.maps.GoogleMap.OnMarkerDragListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a marker is dragged.",
        "params": {
          "listener": "The callback that\u0027s invoked on marker drag events. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMyLocationButtonClickListener(com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMyLocationButtonClickListener(com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the my location button is clicked. If the listener returns true, the event is consumed and the default behavior will not occur. If it returns false, the default behavior will occur (i.e. The camera moves such that it is centered on the user\u0027s location).",
        "params": {
          "listener": "The callback that\u0027s invoked when the My Location button is clicked"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMyLocationChangeListener(com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMyLocationChangeListener(com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener)",
        "methodDes": "This method is deprecated. use com.google.android.gms.location.FusedLocationProviderApi instead. FusedLocationProviderApi provides improved location finding and power usage and is used by the \"My Location\" blue dot. See the MyLocationDemoActivity in the sample applications folder for example code, or the Location Developer Guide.",
        "params": {
          "listener": "The callback that\u0027s invoked when the My Location dot changes"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnMyLocationClickListener(com.google.android.gms.maps.GoogleMap.OnMyLocationClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnMyLocationClickListener(com.google.android.gms.maps.GoogleMap.OnMyLocationClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when the My Location dot (which signifies the user\u0027s location) is clicked.",
        "params": {
          "listener": "The callback that\u0027s invoked when the My Location dot is clicked"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnPoiClickListener(com.google.android.gms.maps.GoogleMap.OnPoiClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnPoiClickListener(com.google.android.gms.maps.GoogleMap.OnPoiClickListener)",
        "methodDes": "Sets a listener which will be triggered when a POI is clicked or tapped. Pass null to clear the listener.",
        "params": {
          "listener": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnPolygonClickListener(com.google.android.gms.maps.GoogleMap.OnPolygonClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnPolygonClickListener(com.google.android.gms.maps.GoogleMap.OnPolygonClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a polygon is clicked.",
        "params": {
          "listener": "The callback that\u0027s invoked when a polygon is clicked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setOnPolylineClickListener(com.google.android.gms.maps.GoogleMap.OnPolylineClickListener)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setOnPolylineClickListener(com.google.android.gms.maps.GoogleMap.OnPolylineClickListener)",
        "methodDes": "Sets a callback that\u0027s invoked when a polyline is clicked.",
        "params": {
          "listener": "The callback that\u0027s invoked when a polyline is clicked. To unset the callback, use null"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setPadding(int,int,int,int)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setPadding(int, int, int, int)",
        "methodDes": "Sets padding on the map. This method allows you to define a visible region on the map, to signal to the map that portions of the map around the edges may be obscured, by setting padding on each of the four edges of the map. Map functions will be adapted to the padding. For example, the zoom controls, compass, copyright notices and Google logo will be moved to fit inside the defined region, camera movements will be relative to the center of the visible region, etc.",
        "params": {
          "left": "the number of pixels of padding to be added on the left of the map",
          "top": "the number of pixels of padding to be added on the top of the map",
          "right": "the number of pixels of padding to be added on the right of the map",
          "bottom": "the number of pixels of padding to be added on the bottom of the map"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.setTrafficEnabled(boolean)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#setTrafficEnabled(boolean)",
        "methodDes": "Turns the traffic layer on or off.",
        "params": {
          "enabled": ""
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.snapshot(com.google.android.gms.maps.GoogleMap.SnapshotReadyCallback)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#snapshot(com.google.android.gms.maps.GoogleMap.SnapshotReadyCallback)",
        "methodDes": "Takes a snapshot of the map. You can use snapshots within your application when an interactive map would be difficult, or impossible, to use. For example, images produced with the snapshot() method can be used to display a thumbnail of the map in your app, or a snapshot in the notification center. Note: Images of the map must not be transmitted to your servers, or otherwise used outside of the application. If you need to send a map to another application or user, send data that allows them to reconstruct the map for the new user instead of a snapshot.",
        "params": {
          "callback": "Callback method invoked when the snapshot is taken"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.snapshot(com.google.android.gms.maps.GoogleMap.SnapshotReadyCallback,android.graphics.Bitmap)": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#public-void-snapshot-googlemap.snapshotreadycallback-callback,-bitmap-bitmap",
        "methodDes": "Takes a snapshot of the map. You can use snapshots within your application when an interactive map would be difficult, or impossible, to use. For example, images produced with the snapshot() method can be used to display a thumbnail of the map in your app, or a snapshot in the notification center. Note: Images of the map must not be transmitted to your servers, or otherwise used outside of the application. If you need to send a map to another application or user, send data that allows them to reconstruct the map for the new user instead of a snapshot.",
        "params": {
          "callback": "Callback method invoked when the snapshot is taken",
          "bitmap": "A preallocated bitmap. If null, behaves like snapshot(SnapshotReadyCallback)"
        },
        "returns": "void",
        "Exceptions": {}
      },
      "com.google.android.gms.maps.GoogleMap.stopAnimation()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#stopAnimation()",
        "methodDes": "Stops the camera animation if there is one in progress. When the method is called, the camera stops moving immediately and remains in that position.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {
      "com.google.android.gms.maps.GoogleMap.MAP_TYPE_HYBRID": {
        "des": "Satellite maps with a transparent layer of major streets.",
        "value": "4",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#MAP_TYPE_HYBRID"
      },
      "com.google.android.gms.maps.GoogleMap.MAP_TYPE_NONE": {
        "des": "No base map tiles.",
        "value": "0",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#MAP_TYPE_NONE"
      },
      "com.google.android.gms.maps.GoogleMap.MAP_TYPE_NORMAL": {
        "des": "Basic maps.",
        "value": "1",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#MAP_TYPE_NORMAL"
      },
      "com.google.android.gms.maps.GoogleMap.MAP_TYPE_SATELLITE": {
        "des": "Satellite maps with no labels.",
        "value": "2",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#MAP_TYPE_SATELLITE"
      },
      "com.google.android.gms.maps.GoogleMap.MAP_TYPE_TERRAIN": {
        "des": "Terrain maps.",
        "value": "3",
        "url": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap#MAP_TYPE_TERRAIN"
      }
    }
  },
  "com.google.android.gms.maps.GoogleMap.OnCameraMoveListener": {
    "classDes": "Callback interface for when the camera changes position.",
    "classUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveListener",
    "methods": {
      "com.google.android.gms.maps.GoogleMap.OnCameraMoveListener.onCameraMove()": {
        "methodUrl": "https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.OnCameraMoveListener#onCameraMove()",
        "methodDes": "Called repeatedly as the camera continues to move after an onCameraMoveStarted call. This may be called as often as once every frame and should not perform expensive operations. This is called on the Android UI thread.",
        "params": {},
        "returns": "void",
        "Exceptions": {}
      }
    },
    "fields": {}
  }
}