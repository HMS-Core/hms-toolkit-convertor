{
    "USER_CUSTOM_CODE_IN_CLASS_BODY_org.xms.f.remoteconfig.ExtensionRemoteConfig":"public interface XExtensionRemoteConfig {\n        int SOURCE_REMOTE = 2;\n        int SOURCE_STATIC = 0;\n        int SOURCE_DEFAULT = 1;\n        int LAST_FETCH_FAILURE = 1;\n        int LAST_FETCH_NO_FETCH_YET = 0;\n        int LAST_FETCH_SUCCESS = -1;\n        int LAST_FETCH_THROTTLED = 2;\n    }\n    private boolean developerModeEnabled = false;\n    public boolean getdeveloperModeEnabled() {\n        return this.developerModeEnabled;\n    }\n    public void setDeveloperMode(boolean developerModeEnabled) {\n        this.developerModeEnabled = developerModeEnabled;\n    }\n    public Map<java.lang.String, java.lang.Object> readXml2Map(int resId) {\n        Map<java.lang.String, java.lang.Object> defaultsMap = new HashMap<>();\n        Context context = AGConnectInstance.getInstance().getContext();\n        try {\n            Resources resources = context.getResources();\n            if (resources == null) {\n                return defaultsMap;\n            }\n            XmlResourceParser xmlParser = resources.getXml(resId);\n            String curTag = null;\n            String key = null;\n            String value = null;\n            int eventType = xmlParser.getEventType();\n            while (eventType != XmlResourceParser.END_DOCUMENT) {\n                if (eventType == XmlResourceParser.START_TAG) {\n                    curTag = xmlParser.getName();\n                } else if (eventType == XmlResourceParser.END_TAG) {\n                    if (xmlParser.getName().equals(\"entry\")) {\n                        if (key != null && value != null) {\n                            defaultsMap.put(key, value);\n                        }\n                        key = null;\n                        value = null;\n                    }\n                    curTag = null;\n                } else if (eventType == XmlResourceParser.TEXT) {\n                    if (curTag != null) {\n                        if (\"key\".equals(curTag)) {\n                            key = xmlParser.getText();\n                        } else if (\"value\".equals(curTag)) {\n                            value = xmlParser.getText();\n                        }\n                    }\n                }\n                eventType = xmlParser.next();\n            }\n        } catch (XmlPullParserException e) {\n            Log.e(\"readXml2Map\", \"parse default values xml failed\", e);\n        } catch (IOException e) {\n            Log.e(\"readXml2Map\", \"parse default values xml failed\", e);\n        }\n        return defaultsMap;\n    }",
    "USER_CUSTOM_CODE_IN_CLASS_BODY_org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl":"private boolean developerModeEnabled = false;\n        public boolean getdeveloperModeEnabled() {\n            return this.developerModeEnabled;\n        }\n        public org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl setDeveloperMode(boolean developerModeEnabled) {\n            this.developerModeEnabled = developerModeEnabled;\n            return this;\n        }",
    "USER_CUSTOM_CODE_IN_CLASS_BODY_org.xms.f.remoteconfig.ExtensionRemoteConfigSettings":"private boolean developerModeEnabled = false;\n    public boolean getdeveloperModeEnabled() {\n        return this.developerModeEnabled;\n    }\n    public org.xms.f.remoteconfig.ExtensionRemoteConfigSettings setDeveloperMode(boolean developerModeEnabled) {\n        this.developerModeEnabled = developerModeEnabled;\n        return this;\n    }",
    "USER_CUSTOM_CODE_IN_CLASS_BODY_org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder":"private boolean developerModeEnabled = false;\n        public boolean getdeveloperModeEnabled() {\n            return this.developerModeEnabled;\n        }\n        public org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder setDeveloperMode(boolean developerModeEnabled) {\n            this.developerModeEnabled = developerModeEnabled;\n            return this;\n        }",
    "USER_CUSTOM_CODE_OUT_CLASS_BODY_org.xms.f.remoteconfig.ExtensionRemoteConfig":"import android.content.Context;\nimport android.content.res.Resources;\nimport android.content.res.XmlResourceParser;\nimport android.util.Log;\nimport com.huawei.agconnect.AGConnectInstance;\nimport org.xmlpull.v1.XmlPullParserException;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getInfo()org.xms.f.remoteconfig.ExtensionRemoteConfigInfo":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getInfo\");\n        return new org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl(new org.xms.g.utils.XBox(null)).setDeveloperMode(this.getdeveloperModeEnabled());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getInstance(org.xms.f.ExtensionApp)org.xms.f.remoteconfig.ExtensionRemoteConfig":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"com.huawei.agconnect.remoteconfig.AGConnectConfig.getInstance()\");\n        com.huawei.agconnect.remoteconfig.AGConnectConfig hReturn = com.huawei.agconnect.remoteconfig.AGConnectConfig.getInstance();\n        return ((hReturn) == null ? null : (new org.xms.f.remoteconfig.ExtensionRemoteConfig(new org.xms.g.utils.XBox(hReturn))));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getKeysByPrefix(java.lang.String)java.util.Set<java.lang.String>":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"((com.huawei.agconnect.remoteconfig.AGConnectConfig) this.getHInstance()).getMergedAll()\");\n        java.util.Set<String> keySet = ((com.huawei.agconnect.remoteconfig.AGConnectConfig) this.getHInstance()).getMergedAll().keySet();\n        java.util.Set<String> hReturn = new HashSet<>();\n        for (String key : keySet) {\n            if (key.startsWith(param0)) {\n                hReturn.add(key);\n            }\n        }\n        return hReturn;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_FAILURE()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\",\n                \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_FAILURE()\");\n            return XExtensionRemoteConfig.LAST_FETCH_FAILURE;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_NO_FETCH_YET()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\",\n                \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_NO_FETCH_YET()\");\n            return XExtensionRemoteConfig.LAST_FETCH_NO_FETCH_YET;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_SUCCESS()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\",\n                \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_SUCCESS()\");\n            return XExtensionRemoteConfig.LAST_FETCH_SUCCESS;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_THROTTLED()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\",\n                \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getLAST_FETCH_STATUS_THROTTLED()\");\n            return XExtensionRemoteConfig.LAST_FETCH_THROTTLED;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getVALUE_SOURCE_DEFAULT()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getVALUE_SOURCE_DEFAULT()\");\n        return XExtensionRemoteConfig.SOURCE_DEFAULT;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getVALUE_SOURCE_REMOTE()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getVALUE_SOURCE_REMOTE()\");\n        return XExtensionRemoteConfig.SOURCE_REMOTE;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getVALUE_SOURCE_STATIC()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfig.getVALUE_SOURCE_STATIC()\");\n        return XExtensionRemoteConfig.SOURCE_STATIC;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.getValue(java.lang.String)org.xms.f.remoteconfig.ExtensionRemoteConfigValue":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"((com.huawei.agconnect.remoteconfig.AGConnectConfig) this.getHInstance()).getMergedAll().get(param0)\");\n        java.lang.Object hReturn = ((com.huawei.agconnect.remoteconfig.AGConnectConfig) this.getHInstance()).getMergedAll().get(param0);\n        return ((hReturn) == null ? null : (new org.xms.f.remoteconfig.ExtensionRemoteConfigValue.XImpl(new org.xms.g.utils.XBox(hReturn))));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.setConfigSettings(org.xms.f.remoteconfig.ExtensionRemoteConfigSettings)void":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfig.setConfigSettings\");\n        this.setDeveloperMode(param0.getdeveloperModeEnabled());\n        ((com.huawei.agconnect.remoteconfig.AGConnectConfig) this.getHInstance()).setDeveloperMode(param0.getdeveloperModeEnabled());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfig.setDefaults(int)void":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"((com.huawei.agconnect.remoteconfig.AGConnectConfig) this.getHInstance()).applyDefault(map)\");\n        java.util.Map<java.lang.String, java.lang.Object> map = this.readXml2Map(param0);\n        ((com.huawei.agconnect.remoteconfig.AGConnectConfig) this.getHInstance()).applyDefault(map);",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigClientException.ExtensionRemoteConfigClientException(java.lang.String)":"this.setHInstance(new com.huawei.agconnect.remoteconfig.AGCConfigException(param0,\n                    com.huawei.agconnect.remoteconfig.AGCConfigException.UNKNOWN_ERROR));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigClientException.ExtensionRemoteConfigClientException(java.lang.Stringjava.lang.Throwable)":"this.setHInstance(new com.huawei.agconnect.remoteconfig.AGCConfigException(param0 + param1.getMessage(),\n                    com.huawei.agconnect.remoteconfig.AGCConfigException.UNKNOWN_ERROR));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigClientException.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigException.ExtensionRemoteConfigException(java.lang.String)":"this.setHInstance(new com.huawei.agconnect.remoteconfig.AGCConfigException(param0,\n                    com.huawei.agconnect.remoteconfig.AGCConfigException.UNKNOWN_ERROR));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigException.ExtensionRemoteConfigException(java.lang.Stringjava.lang.Throwable)":"this.setHInstance(new com.huawei.agconnect.remoteconfig.AGCConfigException(param0 + param1.getMessage(),\n                    com.huawei.agconnect.remoteconfig.AGCConfigException.UNKNOWN_ERROR));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigException.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigFetchException.ExtensionRemoteConfigFetchException(java.lang.String)":"this.setHInstance(new com.huawei.agconnect.remoteconfig.AGCConfigException(param0,\n                    com.huawei.agconnect.remoteconfig.AGCConfigException.UNKNOWN_ERROR));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigFetchException.ExtensionRemoteConfigFetchException(java.lang.Stringjava.lang.Throwable)":"this.setHInstance(new com.huawei.agconnect.remoteconfig.AGCConfigException(param0 + param1.getMessage(),\n                    com.huawei.agconnect.remoteconfig.AGCConfigException.UNKNOWN_ERROR));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigFetchException.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigFetchThrottledException.ExtensionRemoteConfigFetchThrottledException(long)":"this.setHInstance(new com.huawei.agconnect.remoteconfig.AGCConfigException(null,\n                    com.huawei.agconnect.remoteconfig.AGCConfigException.FETCH_THROTTLED, param0));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigFetchThrottledException.getThrottleEndTimeMillis()long":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigFetchThrottledException.getThrottleEndTimeMillis\");\n                return 0;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigFetchThrottledException.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl.getConfigSettings()org.xms.f.remoteconfig.ExtensionRemoteConfigSettings":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl.getConfigSettings\");\n                return new org.xms.f.remoteconfig.ExtensionRemoteConfigSettings(new org.xms.g.utils.XBox(null)).setDeveloperMode(this.getdeveloperModeEnabled());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl.getFetchTimeMillis()long":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl.getFetchTimeMillis\");\n                return 0;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl.getLastFetchStatus()int":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.XImpl.getLastFetchStatus\");\n                return 0;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.getHInstanceExtensionRemoteConfigInfo()java.lang.Object":"default java.lang.Object getHInstanceExtensionRemoteConfigInfo() {\n        if (this instanceof org.xms.g.utils.XGettable) {\n            return ((java.lang.Object) ((org.xms.g.utils.XGettable) this).getHInstance());\n        }\n        return new java.lang.Object();\n    }",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigInfo.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigServerException.ExtensionRemoteConfigServerException(intjava.lang.String)":"this.setHInstance(new HImpl(param1, param0));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigServerException.ExtensionRemoteConfigServerException(intjava.lang.Stringjava.lang.Throwable)":"this.setHInstance(new HImpl(param1 + param2.getMessage(), param0));",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.Builder()":"this.setHInstance(null);",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.build()org.xms.f.remoteconfig.ExtensionRemoteConfigSettings":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.build\");\n                return new org.xms.f.remoteconfig.ExtensionRemoteConfigSettings(new org.xms.g.utils.XBox(null)).setDeveloperMode(this.getdeveloperModeEnabled());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.getFetchTimeoutInSeconds()long":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.getFetchTimeoutInSeconds\");\n                return 0;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.getMinimumFetchIntervalInSeconds()long":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.getMinimumFetchIntervalInSeconds\");\n                return 0;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.setDeveloperModeEnabled(boolean)org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.setDeveloperModeEnabled\");\n                return this.setDeveloperMode(param0);",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.setFetchTimeoutInSeconds(long)org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.setFetchTimeoutInSeconds\");\n                return this;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.setMinimumFetchIntervalInSeconds(long)org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder.setMinimumFetchIntervalInSeconds\");\n                return this;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.getFetchTimeoutInSeconds()long":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.getFetchTimeoutInSeconds\");\n            return 0;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.getMinimumFetchIntervalInSeconds()long":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.getMinimumFetchIntervalInSeconds\");\n            return 0;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.isDeveloperModeEnabled()boolean":"return this.developerModeEnabled;",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.toBuilder()org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.toBuilder\");\n            return new org.xms.f.remoteconfig.ExtensionRemoteConfigSettings.Builder(new org.xms.g.utils.XBox(null)).setDeveloperMode(this.getdeveloperModeEnabled());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigValue.XImpl.asBoolean()boolean":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"Boolean.parseBoolean(this.getHInstance().toString())\");\n                return Boolean.parseBoolean(this.getHInstance().toString());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigValue.XImpl.asByteArray()byte[]":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"new byte[]{Byte.parseByte(this.getHInstance().toString())}\");\n                return new byte[]{Byte.parseByte(this.getHInstance().toString())};",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigValue.XImpl.asDouble()double":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"Double.parseDouble(this.getHInstance().toString())\");\n                return Double.parseDouble(this.getHInstance().toString());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigValue.XImpl.asLong()long":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"Long.parseLong(this.getHInstance().toString())\");\n                return Long.parseLong(this.getHInstance().toString());",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigValue.XImpl.asString()java.lang.String":"org.xms.g.utils.XmsLog.d(\"XMSRouter\", \"this.getHInstance().toString()\");\n                return this.getHInstance().toString();",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigValue.getHInstanceExtensionRemoteConfigValue()java.lang.Object":"default java.lang.Object getHInstanceExtensionRemoteConfigValue() {\n        if (this instanceof org.xms.g.utils.XGettable) {\n            return ((java.lang.Object) ((org.xms.g.utils.XGettable) this).getHInstance());\n        }\n        return new java.lang.Object();\n    }",
    "org.xms.f.remoteconfig.ExtensionRemoteConfigValue.isInstance(java.lang.Object)boolean":"throw new java.lang.RuntimeException(\"HMS does not support this API.\");"
}