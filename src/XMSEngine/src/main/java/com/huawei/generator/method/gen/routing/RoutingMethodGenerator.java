/*
 * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.huawei.generator.method.gen.routing;

import com.huawei.generator.ast.MethodNode;
import com.huawei.generator.ast.StatementNode;
import com.huawei.generator.method.call.RouterCallHandler;
import com.huawei.generator.method.exception.ExceptionHandler;
import com.huawei.generator.method.gen.BodyGenerator;
import com.huawei.generator.method.param.ParamHandler;
import com.huawei.generator.method.returns.ReturnHandler;

import java.util.ArrayList;
import java.util.List;

/**
 * Matched method body generator
 *
 * @since 2020-03-04
 */
public abstract class RoutingMethodGenerator implements BodyGenerator {
    public ParamHandler paramHandler;

    public RouterCallHandler routerCallHandler;

    public ReturnHandler returnHandler;

    public ExceptionHandler exceptionHandler;

    private MethodNode methodNode;

    RoutingMethodGenerator(MethodNode methodNode) {
        this.methodNode = methodNode;
    }

    @Override
    public List<StatementNode> generate() {
        List<StatementNode> generatedBody = new ArrayList<>();
        List<StatementNode> args = handleArguments(generatedBody);
        StatementNode callNode = handleRouterCall(generatedBody, args);
        handleReturnValue(generatedBody, callNode);
        return handleException(generatedBody);
    }

    /**
     * Maps arguments
     * 
     * @param body contains partially generated code, contents of the body may be modified in this method
     * @return mapped arguments, for performing router call.
     */
    private List<StatementNode> handleArguments(List<StatementNode> body) {
        return paramHandler.handleParamValue(body, methodNode.parameters());
    }

    /**
     * Call Z from a X method.
     *
     * @param body contains partially generated code, contents of the body may be modified in this method
     * @param args contains converted values that are used for calling X.
     * @return a statement node representing the call.
     */
    private StatementNode handleRouterCall(List<StatementNode> body, List<StatementNode> args) {
        return routerCallHandler.handleRouterCall(body, args);
    }

    /**
     * Converts the return value from router call(X type) to its corresponding Z type and generate the return statement.
     *
     * @param body contains partially generated code, contents of the body will be modified in this method
     * @param callNode the X call.
     */
    private void handleReturnValue(List<StatementNode> body, StatementNode callNode) {
        returnHandler.handleReturnValue(body, callNode);
    }

    /**
     * Wraps a block of statements into a try-catch block to handle exceptions generated by the router call.
     *
     * @param body contains partially generated code, contents of the body will be modified in this method
     * @return a new body wrapped with try-catch if necessary.
     */
    private List<StatementNode> handleException(List<StatementNode> body) {
        return exceptionHandler.handleException(body);
    }
}
